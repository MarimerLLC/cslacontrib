<%@ CodeTemplate Src="TemplateBase.cs" Inherits="CodeSmith.Csla.TemplateBase" Language="C#" TargetLanguage="C#" Description="Generates a CSLA Editable Root Object." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Design" %>
<%@ Assembly Name="System.Xml" %>
<%@ Import Namespace="System.Xml" %>
<%@ Import Namespace="System.IO" %>
<%@ Property Name="OutputToFile" Type="System.Boolean" Optional="false" Category="0. Render Options" Description="Required - True to generate file, or False to preview on the screen" %>
<script runat="template">
	private string _xmlPath = "";
	[Editor(typeof(System.Windows.Forms.Design.FileNameEditor), typeof(System.Drawing.Design.UITypeEditor)),
	CodeTemplateProperty(CodeTemplatePropertyOption.Optional),
	Category("0. Render Options"), Description("Required - The Xml file name to be generated.")]
	public string XmlFileName
	{
		get {return _xmlPath;}
		set {_xmlPath= value;}
	}
	private string _outputDirectory = "C:\\Projects";	//set your default directory here
	[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor)),
	CodeTemplateProperty(CodeTemplatePropertyOption.Optional),
	Category("0. Render Options"), Description("Optional - The directory to which every output file is generated.")]
	public string OutputDirectory
	{
		get {return _outputDirectory;}
		set {_outputDirectory= value;}
	}
</script>

<% LoadObjects(); %>

<script runat="template">
public void LoadObjects() 
{
    XmlTextReader xtr = new XmlTextReader(_xmlPath);
    while (xtr.Read())
    {
        if (xtr.NodeType == XmlNodeType.Element && 
				xtr.LocalName.ToLower() == "object")
        {
			 //render first object
			 string objectType = xtr.GetAttribute("type");
			 string objectName = xtr.GetAttribute("name");
		     
			 OutputSubTemplate(objectName, objectType, true);
        }
    }
    xtr.Close();
}

public void OutputSubTemplate(string objectName, string cslaObjectType, bool overwriteFile)
{
	//validate first, make sure all required properties are filled
	//if(!Validate(table, template)) return;
	
	CodeTemplate subTemplate = TemplateHelper.GetCompiledTemplate(CodeTemplateInfo.DirectoryName + cslaObjectType + ".cst");
	if(subTemplate == null) return;

	// assign properties		
	subTemplate.SetProperty("XmlFilePath", _xmlPath);
	subTemplate.SetProperty("ObjectName", objectName);
	subTemplate.SetProperty("ClassNamespace", ClassNamespace);
	subTemplate.SetProperty("ClassType", ClassType);
	subTemplate.SetProperty("GenerationMethod", GenerationMethod);
	subTemplate.SetProperty("AuthorizationRules", AuthorizationRules);
	subTemplate.SetProperty("PropertyAuthorization", PropertyAuthorization);
	subTemplate.SetProperty("TransactionalType", TransactionalType);
	
	
	// Output to screen
	subTemplate.Render(Response);
	
	if(OutputToFile) 
	{
		string fileName = GetSourcePath() + GetSourceFileName(objectName);
		try 
		{
			subTemplate.RenderToFile(fileName, overwriteFile);
		}
		catch(Exception ex) 
		{
			Response.WriteLine("Error Rendering To File: " + ex.Message);
			Response.WriteLine("- " + fileName);
		}
	}
}


// determine output file name based on Language, template name, and table name
private string GetSourceFileName(string objectName)	//todo:get from template instead.
{
	string fileName = objectName;
	if(ClassType == GenerationClassType.Generated) 
	{
		if(GenerationMethod == CodeGenerationMethod.SplitBase)
			fileName += "Base";
		else if(GenerationMethod == CodeGenerationMethod.SplitPartial)
			fileName += ".Generated";
	}
	return fileName + ".cs";
}

private string GetSourcePath()
{
	string path = OutputDirectory.Trim();

	path += path.EndsWith("\\")? "":"\\";

	//check if path not exist, create folder
	if(!System.IO.Directory.Exists(path)) System.IO.Directory.CreateDirectory(path);

	return path;
}

</script>