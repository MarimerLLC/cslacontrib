<%@ CodeTemplate Src="TemplateBase.cs" Inherits="CodeSmith.Csla.TemplateBase" Language="C#" TargetLanguage="C#" Description="Generates a CSLA Editable Child Collection Object." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Property Name="ObjectName" Type="System.String" Optional="true" Category="1. Object" Description="Required - The Name of the Business Object Collection Class to Generate." %>
<%@ Property Name="ChildName" Type="System.String" Optional="true" Category="1. Object" Description="Required - The Name of the Business Object Element of the Collection." %>
<%@ Property Name="ParentName" Type="System.String" Optional="true" Default="" Category="1. Object" Description="The Name of parent Business object belongs." %>
<%@ Property Name="RootCommand" Type="CommandSchema" Optional="true" Category="2. Data Source" Description="Required - The stored procedure that the object is based on. Must select RootTable,  RootView, or RootCommand." %>
<%@ Property Name="RootTable" Type="TableSchema" Optional="true" Category="2. Data Source" Description="Required - The Root Table that the object is based on. Must select RootTable,  RootView, or RootCommand." %>
<%@ Property Name="RootView" Type="ViewSchema" Optional="true" Category="2. Data Source" Description="Required - The Root View that the object is based on. Must select RootTable,  RootView, or RootCommand." %>
<%@ Property Name="ResultSetIndex" Type="System.Int32" Default="1" Optional="true" Category="2. Data Source" Description="Result set index indicates which result set to use from the stored procedure. Required when using RootCommand." %>

<%-- Generic Variables for code to use  --%>
<% 
   int i = BaseIndentLevel; 
   ObjectInfo objInfo = new ObjectInfo(this);
%>
<!-- #INCLUDE FILE="AutoGenWarning.inc" -->
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;

<% if (ClassNamespace != null && ClassNamespace.Length > 0) { %>namespace <%= ClassNamespace %>
<%=Indent(i++)%>{ 
<% } %> 
<% if(!objInfo.IsUserPartial) {%>
<%=Indent(i)%>[Serializable()] 
<%}%>
<%=Indent(i)%><%= objInfo.Modifiers %> class <%=objInfo.NameAndSuffix%><%=objInfo.Inherits%>
<% if(objInfo.IsGeneratedBase) {%>
<%=GetConstraint(objInfo, i+1)%>
<%}%>
<%=Indent(i++)%>{
<% if(objInfo.IsGeneratedClass && (objInfo.HasIdentity || objInfo.HasObjectGeneratedKey)) {%>
<%=Indent(i)%>#region BindingList Overrides
<%=Indent(i)%>protected override object AddNewCore()
<%=Indent(i++)%>{
<%=Indent(i)%><%=objInfo.ChildType%> item = <%=objInfo.ChildNameAndSuffix%>.<%=objInfo.NewChildMethodName%>();
<%=Indent(i)%>this.Add(item);
<%=Indent(i)%>return item;
<%=Indent(--i)%>}
<%=Indent(i)%>#endregion //BindingList Overrides
<%}%>
<!-- #INCLUDE FILE="ChildFactoryMethods.inc" -->

<% if(objInfo.IsGeneratedClass) {%>

<%=Indent(i)%>#region Data Access
<% if(objInfo.IsGeneratedBase) {%>
<%=Indent(i)%>[RunLocal]
<%=Indent(i)%>protected override void DataPortal_Create() { MarkAsChild(); }

<%}%>
<%=Indent(i)%><%=objInfo.LocalMethodModifiers%> void Fetch(SafeDataReader dr)
<%=Indent(i++)%>{
<%=Indent(i)%>RaiseListChangedEvents = false;

<%=Indent(i)%>while(dr.Read())
<%=Indent(i+1)%>this.Add(<%=objInfo.Child%><%if(objInfo.IsGeneratedBase){%><<%=GenericTypeChildParameter%>><%}%>.<%=objInfo.GetChildMethodName%>(dr));

<%=Indent(i)%>RaiseListChangedEvents = true;
<%=Indent(--i)%>}

<% if(objInfo.IsGeneratedBase) { %>
<%=Indent(i)%>internal void Update<<%=objInfo.ParentType%>>(<% if(objInfo.UseAdoTransaction) { %>SqlTransaction tr, <%} else {%>SqlConnection cn, <%}%><%=objInfo.ParentType%> parent) where <%=objInfo.ParentType%> : <%=objInfo.ParentNameAndSuffix%>
<% } else { %>
<%=Indent(i)%>internal void Update(<% if(objInfo.UseAdoTransaction) { %>SqlTransaction tr, <% } else {%>SqlConnection cn, <%}%><%=objInfo.ParentType%> parent)
<%}%>
<%=Indent(i++)%>{
<%=Indent(i)%>RaiseListChangedEvents = false;

<%=Indent(i)%>// loop through each deleted child object
<%=Indent(i)%>foreach (<%=objInfo.ChildType%> deletedChild in DeletedList)
<%=Indent(i+1)%>deletedChild.DeleteSelf(<% if(objInfo.UseAdoTransaction) { %>tr<% } else {%>cn<%}%>);
<%=Indent(i)%>DeletedList.Clear();

<%=Indent(i)%>// loop through each non-deleted child object
<%=Indent(i)%>foreach (<%=objInfo.ChildType%> child in this)
<%=Indent(i++)%>{
<%=Indent(i)%>if(child.IsNew)
<%=Indent(i+1)%>child.Insert(<% if(objInfo.UseAdoTransaction) { %>tr, <% } else {%>cn, <%}%>parent);
<%=Indent(i)%>else
<%=Indent(i+1)%>child.Update(<% if(objInfo.UseAdoTransaction) { %>tr, <% } else {%>cn, <%}%>parent);
<%=Indent(--i)%>}

<%=Indent(i)%>RaiseListChangedEvents = true;
<%=Indent(--i)%>}
<%=Indent(i)%>#endregion //Data Access
<%}%>

<%=Indent(--i)%>}
<% if(ClassNamespace != null && ClassNamespace.Length > 0) {%>}<%}%>
