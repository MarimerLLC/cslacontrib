<%@ CodeTemplate src="TemplateBase.cs" Inherits="CodeSmith.Csla.TemplateBase" Language="C#" TargetLanguage="C#" Description="Generates a CSLA Editable Switchable Object." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Property Name="ObjectName" Type="System.String" Optional="true" Category="1. Object" Description="Required - The Name of the Business Object Class to Generate." %>
<%@ Property Name="ParentName" Type="System.String" Optional="true" Default="" Category="1. Object" Description="The Name of parent Business object belongs." %>
<%@ Property Name="RootCommand" Type="CommandSchema" Optional="true" Category="2. Data Source" Description="Required - The stored procedure that the object is based on. Must select RootTable,  RootView, or RootCommand." %>
<%@ Property Name="RootTable" Type="TableSchema" Optional="true" Category="2. Data Source" Description="Required - The Root Table that the object is based on. Must select RootTable,  RootView, or RootCommand." %>
<%@ Property Name="RootView" Type="ViewSchema" Optional="true" Category="2. Data Source" Description="Required - The Root View that the object is based on. Must select RootTable,  RootView, or RootCommand." %>
<%@ Property Name="ResultSetIndex" Type="System.Int32" Default="0" Optional="true" Category="2. Data Source" Description="Result set index indicates which result set to use from the stored procedure. Required when using RootCommand." %>
<%@ Property Name="UniqueColumnNames" Type="CodeSmith.CustomProperties.StringCollection" Optional="true" Category="2. Data Source" Description="Unique columns. Required when using RootView." %>
<%@ Property Name="ChildCollectionNames" Type="CodeSmith.CustomProperties.StringCollection" Optional="true" Category="1a. Child Collection Object" Description="The Child Collection's Name. Used for the memeber variable and collection name." %>
<%@ Property Name="ChildPropertyNames" Type="CodeSmith.CustomProperties.StringCollection" Optional="true" Category="1a. Child Collection Object" Description="The Child Collection's member variable name." %>

<%-- Generic Variables for code to use  --%>
<% 
   int i = BaseIndentLevel; 
   ObjectInfo objInfo = new ObjectInfo(this);
%>
<!-- #INCLUDE FILE="AutoGenWarning.inc" -->
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using Csla.Validation;

<% if (ClassNamespace != null && ClassNamespace.Length > 0) { %>namespace <%= ClassNamespace %>
<%=Indent(i++)%>{ 
<% } %> 
<% if(!objInfo.IsUserPartial) {%>
<%=Indent(i)%>[Serializable()] 
<%}%>
<%=Indent(i)%><%= objInfo.Modifiers %> class <%=objInfo.NameAndSuffix%><%=objInfo.Inherits%>
<% if(objInfo.IsGeneratedBase) {%>
<%=Indent(i+1)%><%=objInfo.Constraint%>
<%}%>
<%=Indent(i++)%>{
<!-- #INCLUDE FILE="PropertiesMethods.inc" -->
<!-- #INCLUDE FILE="ValidationRules.inc" -->
<!-- #INCLUDE FILE="AuthorizationRules.inc" -->
<!-- #INCLUDE FILE="ObjectFactoryMethods.inc" -->
<%=Indent(i, true)%>#region Child Factory Methods
<% if(objInfo.IsGeneratedClass) {%>
<% string cPars = GetFactoryNewCallArguments(objInfo); %>
<% if(!objInfo.IsGeneratedBase && cPars.Length>0) {%>
<%=Indent(i)%><%=objInfo.MemberAccess%> <%=objInfo.Name%>(<%=cPars%>)
<%=Indent(i++)%>{
<%=GetFactoryNewAssignments(objInfo, i)%>
<%=Indent(--i)%>}

<% } %>
<%=Indent(i)%>internal static <%=objInfo.Type%> <%=objInfo.NewMethodName%>Child(<%=GetFactoryNewDeclarationArguments(objInfo)%>)
<%=Indent(i++)%>{
<% if(objInfo.IsGeneratedBase) { //abstract-child cannot use constructor %>
<%=Indent(i)%><%=objInfo.Type%> child = DataPortal.Create<<%=objInfo.Type%>>(<% if(cPars.Length>0) {%>new Criteria(<%=cPars%>)<%}%>);
<% } else { %>
<%=Indent(i)%><%=objInfo.Type%> child = new <%=objInfo.Name%>(<%=GetFactoryNewCallArguments(objInfo)%>);
<%=Indent(i)%>child.ValidationRules.CheckRules();
<% } %>
<%=Indent(i)%>child.MarkAsChild();
<%=Indent(i)%>return child;
<%=Indent(--i)%>}

<%=Indent(i)%>internal static <%=objInfo.Type%> <%=objInfo.GetMethodName%>(SafeDataReader dr)
<%=Indent(i++)%>{
<% if(objInfo.IsGeneratedBase) { %>
<%=Indent(i)%><%=objInfo.Type%> child = DataPortal.Create<<%=objInfo.Type%>>();
<% } else { %>
<%=Indent(i)%><%=objInfo.Type%> child =  new <%=objInfo.Name%>();
<% } %>
<%=Indent(i)%>child.MarkAsChild();
<%=Indent(i)%>child.Fetch(dr);
<%=Indent(i)%>return child;
<%=Indent(--i)%>}
<% } //if(objInfo.IsGeneratedClass)%>
<%=Indent(i)%>#endregion //Child Factory Methods
<%=Indent(i, true)%>#region Data Access
<% if(objInfo.IsGeneratedClass) {%>
<!-- #INCLUDE FILE="ObjectCriteria.inc" -->
<!-- #INCLUDE FILE="DataPortalCreate.inc" -->
<!-- #INCLUDE FILE="DataPortalFetch.inc" -->
<!-- #INCLUDE FILE="DataPortalUpdate.inc" -->
<!-- #INCLUDE FILE="DataPortalDelete.inc" -->
<!-- #INCLUDE FILE="Fetch.inc" -->
<!-- #INCLUDE FILE="Update.inc" -->
<!-- #INCLUDE FILE="Delete.inc" -->
<%}%>
<%=Indent(i)%>#endregion //Data Access
<%if(objInfo.IsGeneratedPartial) {%>
<%=Indent(i, true)%>#region Delegation Methods
<%=Indent(i)%>private delegate bool predicateEx<U, V>(U obj1, V obj2);
<%=Indent(i)%>private delegate void actionEx<U, V>(U obj1, V obj2);
<%=Indent(i)%>private delegate void rulesAction();
<%=Indent(i)%>//
<%=Indent(i)%>// Business Rules
<%=Indent(i)%>//
<%=Indent(i)%>[NonSerialized()]
<%=Indent(i)%>[NotUndoable()]
<%=Indent(i)%>private rulesAction addCustomRulesDelegate = null;
<%=Indent(i)%>private void onAddCustomRules()
<%=Indent(i++)%>{
<%=Indent(i)%>if (addCustomRulesDelegate != null)
<%=Indent(i+1)%>addCustomRulesDelegate();
<%=Indent(--i)%>}
<%=Indent(i)%>//
<%=Indent(i)%>// Fetch
<%=Indent(i)%>//
<%=Indent(i)%>[NonSerialized()]
<%=Indent(i)%>[NotUndoable()]
<%=Indent(i)%>private predicateEx<<%if(objInfo.UseAdoTransaction){%>SqlTransaction<%}else{%>SqlConnection<%}%>, Criteria> executeFetchDelegate = null;
<%=Indent(i)%>private bool onExecuteFetch(<%if(objInfo.UseAdoTransaction){%>SqlTransaction tr<%}else{%>SqlConnection cn<%}%>, Criteria criteria)
<%=Indent(i++)%>{
<%=Indent(i)%>if (executeFetchDelegate != null)
<%=Indent(i+1)%>return executeFetchDelegate(<%if(objInfo.UseAdoTransaction){%>tr<%}else{%>cn<%}%>, criteria);
<%=Indent(i)%>return true;
<%=Indent(--i)%>}
<%=Indent(i)%>[NonSerialized()]
<%=Indent(i)%>[NotUndoable()]
<%=Indent(i)%>private actionEx<SqlCommand, Criteria> executeFetchCompleteDelegate = null;
<%=Indent(i)%>private void onExecuteFetchComplete(SqlCommand cm, Criteria criteria)
<%=Indent(i++)%>{
<%=Indent(i)%>if (executeFetchCompleteDelegate != null)
<%=Indent(i+1)%>executeFetchCompleteDelegate(cm, criteria);
<%=Indent(--i)%>}
<%=Indent(i)%>[NonSerialized()]
<%=Indent(i)%>[NotUndoable()]
<%=Indent(i)%>private Action<SafeDataReader> fetchObjectCompleteDelegate = null;
<%=Indent(i)%>private void onFetchObjectComplete(SafeDataReader dr)
<%=Indent(i++)%>{
<%=Indent(i)%>if (fetchObjectCompleteDelegate != null)
<%=Indent(i+1)%>fetchObjectCompleteDelegate(dr);
<%=Indent(--i)%>}
<%=Indent(i)%>[NonSerialized()]
<%=Indent(i)%>[NotUndoable()]
<%=Indent(i)%>private Action<SafeDataReader> fetchChildrenCompleteDelegate = null;
<%=Indent(i)%>private void onFetchChildrenComplete(SafeDataReader dr)
<%=Indent(i++)%>{
<%=Indent(i)%>if (fetchChildrenCompleteDelegate != null)
<%=Indent(i+1)%>fetchChildrenCompleteDelegate(dr);
<%=Indent(--i)%>}
<%=Indent(i)%>//
<%=Indent(i)%>// Insert
<%=Indent(i)%>//
<%=Indent(i)%>[NonSerialized()]
<%=Indent(i)%>[NotUndoable()]
<% if(objInfo.IsChild && objInfo.ParentType.Length>0) {%>
<%=Indent(i)%>private predicateEx<<%if(objInfo.UseAdoTransaction){%>SqlTransaction<%}else{%>SqlConnection<%}%>, <%=objInfo.ParentType%>> executeInsertDelegate = null;
<%} else {%>
<%=Indent(i)%>private Predicate<<%if(objInfo.UseAdoTransaction){%>SqlTransaction<%}else{%>SqlConnection<%}%>> executeInsertDelegate = null;
<%}%>
<%=Indent(i)%>private bool onExecuteInsert(<%if(objInfo.UseAdoTransaction){%>SqlTransaction tr<%}else{%>SqlConnection cn<%}%><%if(objInfo.IsChild && objInfo.ParentType.Length>0){%>, <%=objInfo.ParentType%> parent<%}%>)
<%=Indent(i++)%>{
<%=Indent(i)%>if (executeInsertDelegate != null)
<%=Indent(i+1)%>return executeInsertDelegate(<%if(objInfo.UseAdoTransaction){%>tr<%}else{%>cn<%}%><%if(objInfo.IsChild && objInfo.ParentType.Length>0){%>, parent<%}%>);
<%=Indent(i)%>return true;
<%=Indent(--i)%>}
<%=Indent(i)%>[NonSerialized()]
<%=Indent(i)%>[NotUndoable()]
<% if(objInfo.IsChild && objInfo.ParentType.Length>0) {%>
<%=Indent(i)%>private actionEx<SqlCommand, <%=objInfo.ParentType%>> executeInsertCompleteDelegate = null;
<%} else {%>
<%=Indent(i)%>private Action<SqlCommand> executeInsertCompleteDelegate = null;
<%}%>
<%=Indent(i)%>private void onExecuteInsertComplete(SqlCommand cm<%if(objInfo.IsChild && objInfo.ParentType.Length>0){%>, <%=objInfo.ParentType%> parent<%}%>)
<%=Indent(i++)%>{
<%=Indent(i)%>if (executeInsertCompleteDelegate != null)
<%=Indent(i+1)%>executeInsertCompleteDelegate(cm<%if(objInfo.IsChild && objInfo.ParentType.Length>0){%>, parent<%}%>);
<%=Indent(--i)%>}
<%=Indent(i)%>[NonSerialized()]
<%=Indent(i)%>[NotUndoable()]
<% if(objInfo.IsChild && objInfo.ParentType.Length>0) {%>
<%=Indent(i)%>private actionEx<SqlCommand, <%=objInfo.ParentType%>> addInsertParamatersCompleteDelegate = null;
<%} else {%>
<%=Indent(i)%>private Action<SqlCommand> addInsertParamatersCompleteDelegate = null;
<%}%>
<%=Indent(i)%>private void onAddInsertParametersComplete(SqlCommand cm<%if(objInfo.IsChild && objInfo.ParentType.Length>0){%>, <%=objInfo.ParentType%> parent<%}%>)
<%=Indent(i++)%>{
<%=Indent(i)%>if (addInsertParamatersCompleteDelegate != null)
<%=Indent(i+1)%>addInsertParamatersCompleteDelegate(cm<%if(objInfo.IsChild && objInfo.ParentType.Length>0){%>, parent<%}%>);
<%=Indent(--i)%>}
<%=Indent(i)%>//
<%=Indent(i)%>// Update
<%=Indent(i)%>//
<%=Indent(i)%>[NonSerialized()]
<%=Indent(i)%>[NotUndoable()]
<% if(objInfo.IsChild && objInfo.ParentType.Length>0) {%>
<%=Indent(i)%>private predicateEx<<%if(objInfo.UseAdoTransaction){%>SqlTransaction<%}else{%>SqlConnection<%}%>, <%=objInfo.ParentType%>> executeUpdateDelegate = null;
<%} else {%>
<%=Indent(i)%>private Predicate<<%if(objInfo.UseAdoTransaction){%>SqlTransaction<%}else{%>SqlConnection<%}%>> executeUpdateDelegate = null;
<%}%>
<%=Indent(i)%>private bool onExecuteUpdate(<%if(objInfo.UseAdoTransaction){%>SqlTransaction tr<%}else{%>SqlConnection cn<%}%><%if(objInfo.IsChild && objInfo.ParentType.Length>0){%>, <%=objInfo.ParentType%> parent<%}%>)
<%=Indent(i++)%>{
<%=Indent(i)%>if (executeUpdateDelegate != null)
<%=Indent(i+1)%>return executeUpdateDelegate(<%if(objInfo.UseAdoTransaction){%>tr<%}else{%>cn<%}%><%if(objInfo.IsChild && objInfo.ParentType.Length>0){%>, parent<%}%>);
<%=Indent(i)%>return true;
<%=Indent(--i)%>}
<%=Indent(i)%>[NonSerialized()]
<%=Indent(i)%>[NotUndoable()]
<% if(objInfo.IsChild && objInfo.ParentType.Length>0) {%>
<%=Indent(i)%>private actionEx<SqlCommand, <%=objInfo.ParentType%>> executeUpdateCompleteDelegate = null;
<%} else {%>
<%=Indent(i)%>private Action<SqlCommand> executeUpdateCompleteDelegate = null;
<%}%>
<%=Indent(i)%>private void onExecuteUpdateComplete(SqlCommand cm<%if(objInfo.IsChild && objInfo.ParentType.Length>0){%>, <%=objInfo.ParentType%> parent<%}%>)
<%=Indent(i++)%>{
<%=Indent(i)%>if (executeUpdateCompleteDelegate != null)
<%=Indent(i+1)%>executeUpdateCompleteDelegate(cm<%if(objInfo.IsChild && objInfo.ParentType.Length>0){%>, parent<%}%>);
<%=Indent(--i)%>}
<%=Indent(i)%>[NonSerialized()]
<%=Indent(i)%>[NotUndoable()]
<% if(objInfo.IsChild && objInfo.ParentType.Length>0) {%>
<%=Indent(i)%>private actionEx<SqlCommand, <%=objInfo.ParentType%>> addUpdateParamatersCompleteDelegate = null;
<%} else {%>
<%=Indent(i)%>private Action<SqlCommand> addUpdateParamatersCompleteDelegate = null;
<%}%>
<%=Indent(i)%>private void onAddUpdateParametersComplete(SqlCommand cm<%if(objInfo.IsChild && objInfo.ParentType.Length>0){%>, <%=objInfo.ParentType%> parent<%}%>)
<%=Indent(i++)%>{
<%=Indent(i)%>if (addUpdateParamatersCompleteDelegate != null)
<%=Indent(i+1)%>addUpdateParamatersCompleteDelegate(cm<%if(objInfo.IsChild && objInfo.ParentType.Length>0){%>, parent<%}%>);
<%=Indent(--i)%>}
<%=Indent(i)%>[NonSerialized()]
<%=Indent(i)%>[NotUndoable()]
<%=Indent(i)%>private Action<<%if(objInfo.UseAdoTransaction){%>SqlTransaction<%}else{%>SqlConnection<%}%>> updateChildrenCompleteDelegate = null;
<%=Indent(i)%>private void onUpdateChildrenComplete(<%if(objInfo.UseAdoTransaction){%>SqlTransaction tr<%}else{%>SqlConnection cn<%}%>)
<%=Indent(i++)%>{
<%=Indent(i)%>if (updateChildrenCompleteDelegate != null)
<%=Indent(i+1)%>updateChildrenCompleteDelegate(<%if(objInfo.UseAdoTransaction){%>tr<%}else{%>cn<%}%>);
<%=Indent(--i)%>}
<%=Indent(i)%>//
<%=Indent(i)%>// Delete
<%=Indent(i)%>//
<%=Indent(i)%>[NonSerialized()]
<%=Indent(i)%>[NotUndoable()]
<%=Indent(i)%>private predicateEx<<%if(objInfo.UseAdoTransaction){%>SqlTransaction<%}else{%>SqlConnection<%}%>, Criteria> executeDeleteDelegate = null;
<%=Indent(i)%>private bool onExecuteDelete(<%if(objInfo.UseAdoTransaction){%>SqlTransaction tr<%}else{%>SqlConnection cn<%}%>, Criteria criteria)
<%=Indent(i++)%>{
<%=Indent(i)%>if (executeDeleteDelegate != null)
<%=Indent(i+1)%>return executeDeleteDelegate(<%if(objInfo.UseAdoTransaction){%>tr<%}else{%>cn<%}%>, criteria);
<%=Indent(i)%>return true;
<%=Indent(--i)%>}
<%=Indent(i)%>[NonSerialized()]
<%=Indent(i)%>[NotUndoable()]
<%=Indent(i)%>private actionEx<SqlCommand, Criteria> executeDeleteCompleteDelegate = null;
<%=Indent(i)%>private void onExecuteDeleteComplete(SqlCommand cm, Criteria criteria)
<%=Indent(i++)%>{
<%=Indent(i)%>if (executeDeleteCompleteDelegate != null)
<%=Indent(i+1)%>executeDeleteCompleteDelegate(cm, criteria);
<%=Indent(--i)%>}
<%=Indent(i)%>#endregion //Delegation Methods
<%} //IsGeneratedPartial%>
<%=Indent(--i)%>}
<% if(ClassNamespace != null && ClassNamespace.Length > 0) {%>}<%}%>
