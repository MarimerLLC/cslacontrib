<%@ CodeTemplate Src="TemplateBase.cs" Inherits="CodeSmith.Csla.TemplateBase" Language="C#" TargetLanguage="C#" Description="Generates a CSLA Name Value List Object." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Property Name="ObjectName" Type="System.String" Optional="true" Category="1. Object" Description="Required - The Name of the Business Object Collection Class to Generate." %>
<%@ Property Name="RootCommand" Type="CommandSchema" Optional="true" Category="2. Data Source" Description="Required - The stored procedure that the object is based on. Must select RootTable,  RootView, or RootCommand." %>
<%@ Property Name="RootTable" Type="TableSchema" Optional="true" Category="2. Data Source" Description="Required - The Root Table that the object is based on. Must select RootTable,  RootView, or RootCommand." %>
<%@ Property Name="RootView" Type="ViewSchema" Optional="true" Category="2. Data Source" Description="Required - The Root View that the object is based on. Must select RootTable,  RootView, or RootCommand." %>
<%@ Property Name="ResultSetIndex" Type="System.Int32" Default="0" Optional="true" Category="2. Data Source" Description="Result set index indicates which result set to use from the stored procedure. Required when using RootCommand." %>
<%@ Property Name="UniqueColumnNames" Type="CodeSmith.CustomProperties.StringCollection" Optional="true" Category="2. Data Source" Description="Unique columns. Required when using RootView or when ResultSetIndex > 0." %>

<%-- Generic Variables for code to use  --%>
<% 
   int i = BaseIndentLevel; 
   ObjectInfo objInfo = new ObjectInfo(this);
%>
<!-- #INCLUDE FILE="AutoGenWarning.inc" -->
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;

<% if (ClassNamespace != null && ClassNamespace.Length > 0) { %>namespace <%= ClassNamespace %>
<%=Indent(i++)%>{ 
<% } %> 
<% if(!objInfo.IsUserPartial) {%>
<%=Indent(i)%>[Serializable()] 
<%}%>
<%=Indent(i)%><%= objInfo.Modifiers %> class <%=objInfo.Name%><%=objInfo.Inherits%>
<%=Indent(i++)%>{
<%=Indent(i, true)%>#region Factory Methods
<% if(objInfo.IsSingle || objInfo.IsGeneratedPartial || objInfo.IsUserBase) {%>
<%=Indent(i)%>private <%=objInfo.Name%>()
<%=Indent(i)%>{ /* require use of factory method */ }

<% } %>
<% if(objInfo.IsGeneratedClass) {%>
<%=Indent(i)%>private static <%=objInfo.CustomName%> _list;

<%=Indent(i)%>public static <%=objInfo.CustomName%> <%=objInfo.GetMethodName%>()
<%=Indent(i++)%>{
<%=Indent(i)%>if (_list == null)
<%=Indent(i + 1)%>_list = DataPortal.Fetch<<%=objInfo.CustomName%>>(new Criteria(typeof(<%=objInfo.CustomName%>)));
<%=Indent(i)%>return _list;
<%=Indent(--i)%>}

<%=Indent(i)%>public static void InvalidateCache()
<%=Indent(i++)%>{
<%=Indent(i)%>_list = null;
<%=Indent(--i)%>}
<% } %>
<%=Indent(i)%>#endregion //Factory Methods

<% if(objInfo.IsGeneratedClass) {%>

<%=Indent(i)%>#region Data Access
<%=Indent(i)%>protected override void DataPortal_Fetch(Object criteria)
<%=Indent(i++)%>{
<%=Indent(i)%>RaiseListChangedEvents = false;

<%=Indent(i)%>using (SqlConnection cn = new SqlConnection(<%=objInfo.DbConnection%>))
<%=Indent(i)%>using (SqlCommand cm = cn.CreateCommand())
<%=Indent(i++)%>{
<%=Indent(i)%>cn.Open();

<%=Indent(i)%>cm.CommandType = CommandType.StoredProcedure;
<%=Indent(i)%>cm.CommandText = "<%=objInfo.FetchCommandText%>";

<%=Indent(i)%>using(SafeDataReader dr = new SafeDataReader(cm.ExecuteReader()))
<%=Indent(i++)%>{
<%=Indent(i)%>IsReadOnly = false;
<%=Indent(i)%>while(dr.Read())
<%=Indent(i+1)%>this.Add(<%=GetNewNameValuePair(objInfo)%>);
<%=Indent(i)%>IsReadOnly = true;
<%=Indent(--i)%>}
<%=Indent(--i)%>}//using

<%=Indent(i)%>RaiseListChangedEvents = true;
<%=Indent(--i)%>}
<%=Indent(i)%>#endregion //Data Access
<%}%>

<%=Indent(--i)%>}
<% if(ClassNamespace != null && ClassNamespace.Length > 0) {%>}<%}%>
