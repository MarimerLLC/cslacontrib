<%@ CodeTemplate Src="TemplateBase.vb" Inherits="CodeSmith.Csla.TemplateBase" Language="VB" TargetLanguage="VB" Description="Generates a CSLA Name Value List Object." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Property Name="ObjectName" Type="System.String" Optional="true" Category="1. Object" Description="Required - The Name of the Business Object Collection Class to Generate." %>

<%-- Generic Variables for code to use  --%>
<% 
    Dim i As Integer = BaseIndentLevel
    Dim objInfo As ObjectInfo = New ObjectInfo(Me)
%>
<!-- #INCLUDE FILE="AutoGenWarning.inc" -->
<%=Indent(0)%>Imports System
<%=Indent(0)%>Imports System.Data
<%=Indent(0)%>Imports System.Data.SqlClient
<%=Indent(0)%>Imports Csla
<%=Indent(0)%>Imports Csla.Data
<% If Not ClassNamespace Is Nothing AndAlso ClassNamespace.Length > 0 Then %>
<%=Indent(0, True)%>Namespace <%= ClassNamespace %>
<% i+=1 %>
<% End If %> 
<% If Not objInfo.IsUserPartial Then %>
<%=Indent(i, True)%><Serializable()> _
<%=Indent(i)%><%= objInfo.Modifiers %> Class <%=objInfo.Name%>
<% Else %>
<%=Indent(i, True)%><%= objInfo.Modifiers %> Class <%=objInfo.Name%>
<% End If %>
<% i+=1 %>
<%=Indent(i)%>Inherits CommandBase
<%=Indent(0, True)%>#Region " Authorization Rules "
<%=Indent(i, True)%>Public Shared Function CanExecuteCommand() As Boolean
<%=Indent(i+1)%>' to see if user is authorized
<%=Indent(i+1)%>'Return Csla.ApplicationContext.User.IsInRole("")
<%=Indent(i+1)%>Return True
<%=Indent(i)%>End Function
<%=Indent(0, True)%>#End Region ' Authorization Rules
<%=Indent(0, True)%>#Region " Client-side Code "
<%=Indent(i, True)%>Private mResult As Boolean
<%=Indent(i)%>Public ReadOnly Property Result() As Boolean
<%=Indent(i+1)%>Get
<%=Indent(i+2)%>Return mResult
<%=Indent(i+1)%>End Get
<%=Indent(i)%>End Property
<%=Indent(i, True)%>Private Sub BeforeServer()
<% i+=1 %>
<%=Indent(i)%>' implement code to run on client
<%=Indent(i)%>' before server is called
<% i-=1 %>
<%=Indent(i)%>End Sub
<%=Indent(i, True)%>Private Sub AfterServer()
<% i+=1 %>
<%=Indent(i)%>' implement code to run on client
<%=Indent(i)%>' after server is called
<% i-=1 %>
<%=Indent(i)%>End Sub
<%=Indent(0, True)%>#End Region ' Client-side Code
<%=Indent(0, True)%>#Region " Factory Methods "
<%=Indent(i, True)%>Public Shared Function TheCommand() As Boolean
<% i+=1 %>
<%=Indent(i)%>Dim cmd As New CommandObject
<%=Indent(i)%>cmd.BeforeServer()
<%=Indent(i)%>cmd = DataPortal.Execute(Of CommandObject)(cmd)
<%=Indent(i)%>cmd.AfterServer()
<%=Indent(i)%>Return cmd.Result
<% i-=1 %>
<%=Indent(i)%>End Function
<%=Indent(i, True)%>Private Sub New()
<%=Indent(i+1)%>' require use of factory methods
<%=Indent(i)%>End Sub
<%=Indent(0, True)%>#End Region ' Factory Methods
<%=Indent(0, True)%>#Region " Server-side Code "
<%=Indent(i, True)%>Protected Overrides Sub DataPortal_Execute()
<% i+=1 %>
<%=Indent(i)%>' implement code to run on server
<%=Indent(i)%>' here - and set result value(s)
<%=Indent(i)%>mResult = True
<% i-=1 %>
<%=Indent(i)%>End Sub
<%=Indent(0, True)%>#End Region ' Server-side Code
<% i-=1 %>
<%=Indent(i, True)%>End Class
<% If Not ClassNamespace Is Nothing AndAlso ClassNamespace.Length > 0 Then %>
<%=Indent(0, True)%>End namespace<% End If %>