<%@ CodeTemplate Src="TemplateBase.vb" Debug="True" Inherits="CodeSmith.Csla.TemplateBase" Language="VB" TargetLanguage="VB" Description="Generates a CSLA Editable Root Object." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Property Name="ObjectName" Type="System.String" Optional="true" Category="1. Object" Description="Required - The Name of the Business Object Class to Generate." %>
<%@ Property Name="ParentName" Type="System.String" Optional="true" Default="" Category="1. Object" Description="The Name of parent Business object belongs." %>
<%@ Property Name="ChildName" Type="System.String" Optional="true" Category="1. Object" Description="Required - The Name of the Business Object Element of the Collection." %>
<%@ Property Name="RootCommand" Type="CommandSchema" Optional="true" Category="2. Data Source" Description="Required - The stored procedure that the object is based on. Must select RootTable,  RootView, or RootCommand." %>
<%@ Property Name="RootTable" Type="TableSchema" Optional="true" Category="2. Data Source" Description="Required - The Root Table that the object is based on. Must select RootTable or RootView." %>
<%@ Property Name="RootView" Type="ViewSchema" Optional="true" Category="2. Data Source" Description="Required - The Root View that the object is based on. Must select RootTable or RootView." %>
<%@ Property Name="ResultSetIndex" Type="System.Int32" Default="0" Optional="true" Category="2. Data Source" Description="Result set index indicates which result set to use from the stored procedure. Required when using RootCommand." %>
<%@ Property Name="UniqueColumnNames" Type="CodeSmith.CustomProperties.StringCollection" Optional="true" Category="2. Data Source" Description="Unique columns. Required when using RootView." %>
<%@ Property Name="FilterColumnNames" Type="CodeSmith.CustomProperties.StringCollection" Optional="true" Category="2. Data Source" Description="Filter columns used as get criteria. Required when using RootView." %>
<%@ Property Name="ChildCollectionNames" Type="CodeSmith.CustomProperties.StringCollection" Optional="true" Category="1a. Child Collection Object" Description="The Child Collection's Name. Used for the memeber variable and collection name." %>
<%@ Property Name="ChildPropertyNames" Type="CodeSmith.CustomProperties.StringCollection" Optional="true" Category="1a. Child Collection Object" Description="The Child Collection's member variable name." %>
<%@ Property Name="Template" Type="ObjectType" Optional="false" Category="0. Render Options" Description="Required - Generate the object code from this template." %>
<%@ Property Name="OutputToFile" Type="System.Boolean" Optional="false" Category="0. Render Options" Description="Required - True to generate file, or False to preview on the screen" %>
<script runat="template">
	private _outputDirectory as string = "C:\Projects"	' set your default directory here
	
	<Editor(gettype(System.Windows.Forms.Design.FolderNameEditor), gettype(System.Drawing.Design.UITypeEditor)), _
	Category("0. Render Options"), Description("Optional - The directory to which every output file is generated.")> _
	public PROPERTY OutputDirectory as string 
		get 
			return _outputDirectory
		end get
		set(byval value as string)
			_outputDirectory= value
		end set
	end property
</script>

<%	
	OutputSubTemplate(Template, false)
	'debugger.Break
%>

<script runat="template">

public sub OutputSubTemplate(byval objectType as ObjectType ,byval overwriteFile as boolean )
	' validate first, make sure all required properties are filled
	' if(!Validate(table, template)) return;
	
	Dim templateName As String = CodeTemplateInfo.DirectoryName & objectType.ToString() + ".cst"
	
	Dim subTemplate As CodeTemplate = TemplateHelper.GetCompiledTemplate(templateName)
	If subTemplate Is Nothing Then Return
		
	SetProperties(subTemplate)
	
	' Output to screen
	subTemplate.Render(Response)
	
	If OutputToFile Then
		Dim fileName As String = GetSourcePath() + GetSourceFileName()
		Try 
			subTemplate.RenderToFile(fileName, overwriteFile)
		Catch ex as Exception 
			Response.WriteLine("Error Rendering To File: " + ex.Message)
			Response.WriteLine("- " + fileName)
		End Try
	End If
End Sub

' determine output file name based on Language, template name, and table name
Private Function GetSourceFileName() As String
	Dim fileName As String =  ObjectName 
	If ClassType = GenerationClassType.Generated Then
		If GenerationMethod = CodeGenerationMethod.SplitBase Then
			fileName += "Base"
		Else If GenerationMethod = CodeGenerationMethod.SplitPartial Then 
			fileName += ".Generated"
		End If
	End If
	Return fileName + ".vb"
End Function

Private Function GetSourcePath() As String
	Dim path As String =  OutputDirectory.Trim() 
 
	path += iif(path.EndsWith("\\"), "","\\")
 
	'check if path not exist, create folder
	If Not System.IO.Directory.Exists(path) Then
		 System.IO.Directory.CreateDirectory(path)
	End If
 
	Return path
End Function

' validate properties based on template
private shadows function Validate(byval table as SchemaExplorer.TableSchema ,byval template as ObjectType ) as boolean
	 dim message as string= ""

	' validate all required properties for a given template

	if(OutputToFile) then
		if(OutputDirectory is nothing  orelse OutputDirectory.Trim().Length =0) then
			message += "OutputDirectory is Required.\n\r"
		end if
	end if

	if(message.Length>0) then
		System.Windows.Forms.MessageBox.Show(message,"Validation Errors", System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Error)
		return false
	end if
	return true
end function

Private  Sub SetProperties(ByVal template As CodeTemplate)
	'properties apply to all templates
	'Object
	template.SetProperty("ClassNamespace", ClassNamespace)
	template.SetProperty("ObjectName", ObjectName)
	If Template.ToString().IndexOf("Child")>=0 And Template.ToString().IndexOf("Editable")>=0 Then
		template.SetProperty("ParentName", ParentName)
	End If
	If Template.ToString().IndexOf("List")>=0 Then
		template.SetProperty("ChildName", ChildName)
	End If
 
	'Child Collection Object
	If Template.ToString().IndexOf("List")<0 And Template.ToString().IndexOf("NameValue")<0 Then
		template.SetProperty("ChildCollectionNames", ChildCollectionNames)
		template.SetProperty("ChildPropertyNames", ChildPropertyNames)
	End If
 
	'Data Source
	template.SetProperty("RootCommand", RootCommand)
	template.SetProperty("RootTable", RootTable)
	template.SetProperty("RootView", RootView)
	template.SetProperty("ResultSetIndex", ResultSetIndex)
	If Template.ToString().IndexOf("List")<0 And Template.ToString().IndexOf("NameValue")<0 Then
		template.SetProperty("UniqueColumnNames", UniqueColumnNames)
	End If
	If Template.ToString().IndexOf("RootList")>=0 Then
		template.SetProperty("FilterColumnNames", FilterColumnNames)
	End If
 
	'Csla Options
	template.SetProperty("AuthorizationRules", AuthorizationRules)
	template.SetProperty("PropertyAuthorization", PropertyAuthorization)
	template.SetProperty("TransactionalType", TransactionalType)
 
	'Code Generation
	template.SetProperty("GenerationMethod", GenerationMethod)
	template.SetProperty("ClassType", ClassType)
 
End Sub

</script>