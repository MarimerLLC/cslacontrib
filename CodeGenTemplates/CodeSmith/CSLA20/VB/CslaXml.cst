<%@ CodeTemplate Src="TemplateBase.vb" debug="true" Inherits="CodeSmith.Csla.TemplateBase" Language="VB" TargetLanguage="VB" Description="Generates a CSLA Editable Root Object." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Design" %>
<%@ Assembly Name="System.Xml" %>
<%@ Import Namespace="System.Xml" %>
<%@ Import Namespace="System.IO" %>
<%@ Property Name="OutputToFile" Type="System.Boolean" Optional="false" Category="0. Render Options" Description="Required - True to generate file, or False to preview on the screen" %>
<script runat="template">
	private _xmlPath as string = ""
	<Editor(GetType(System.Windows.Forms.Design.FileNameEditor), GetType(System.Drawing.Design.UITypeEditor)), Optionalattribute(), Category("0. Render Options"), Description("Required - The Xml file name to be generated.")> _
	public Property XmlFileName as string 
		get 
			return _xmlPath
		end get
		set(Byval value as string)
			_xmlPath= value
		end set
	end property
	
	private _outputDirectory as string = "C:\\Projects"	'set your default directory here
	<Editor(Gettype(System.Windows.Forms.Design.FolderNameEditor), Gettype(System.Drawing.Design.UITypeEditor)), OptionalAttribute(), Category("0. Render Options"), Description("Optional - The directory to which every output file is generated.")> _
	public property OutputDirectory as string 
		get 
			return _outputDirectory
		end get
		set(byval value as string)
			_outputDirectory = value
		end set
	end property
</script>

<% Debugger.Break() %>
<% LoadObjects() %>

<script runat="template">
public Sub LoadObjects() 
    dim xtr as XmlTextReader = new XmlTextReader(_xmlPath)
    while (xtr.Read())
        if (xtr.NodeType = XmlNodeType.Element andalso xtr.LocalName.ToLower() = "object") then
			 'render first object
			 dim objectType as string = xtr.GetAttribute("type")
			 dim objectName as string = xtr.GetAttribute("name")
		     
			 OutputSubTemplate(objectName, objectType, true)
        end if
    end while
    xtr.Close()
end sub

public Sub OutputSubTemplate(byval objectName as string , byval cslaObjectType as string , byval overwriteFile as boolean)
	'validate first, make sure all required properties are filled
	'if(not Validate(table, template)) then return
	
	dim subTemplate as CodeTemplate = TemplateHelper.GetCompiledTemplate(cslaObjectType + ".cst")
	if (subTemplate is nothing) then return

	' assign properties		
	subTemplate.SetProperty("XmlFilePath", _xmlPath)
	subTemplate.SetProperty("ObjectName", objectName)
	subTemplate.SetProperty("ClassNamespace", ClassNamespace)
	subTemplate.SetProperty("ClassType", ClassType)
	subTemplate.SetProperty("GenerationMethod", GenerationMethod)
	subTemplate.SetProperty("AuthorizationRules", AuthorizationRules)
	subTemplate.SetProperty("PropertyAuthorization", PropertyAuthorization)
	subTemplate.SetProperty("TransactionalType", TransactionalType)
		
	' Output to screen
	subTemplate.Render(Response)
	
	if(OutputToFile) then
		dim fileName as string = GetSourcePath() + GetSourceFileName(objectName)
		try 
			subTemplate.RenderToFile(fileName, overwriteFile)
		catch ex as Exception
			Response.WriteLine("Error Rendering To File: " + ex.Message)
			Response.WriteLine("- " + fileName)
		end try
	end if
end sub


' determine output file name based on Language, template name, and table name
private Function GetSourceFileName(byval objectName as string) as string  'todo:get from template instead.
	Dim fileName  as string = objectName
	if (ClassType = GenerationClassType.Generated) then
		if (GenerationMethod = CodeGenerationMethod.SplitBase) then
			fileName += "Base"
		elseif (GenerationMethod = CodeGenerationMethod.SplitPartial) then
			fileName += ".Generated"
		end if
	end if
	return fileName + ".cs"
end function

private Function GetSourcePath() as string 
	dim path as string = OutputDirectory.Trim()

	path += iif(path.EndsWith("\\"), "","\\")

	' check if path not exist, create folder
	if (not System.IO.Directory.Exists(path)) then System.IO.Directory.CreateDirectory(path)

	return path
end function

</script>