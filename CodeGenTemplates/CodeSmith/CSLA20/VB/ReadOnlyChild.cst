<%@ CodeTemplate Src="TemplateBase.vb" Debug="True" Inherits="CodeSmith.Csla.TemplateBase" Language="VB" TargetLanguage="VB" Description="Generates a CSLA Editable Child Collection Object." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Property Name="ObjectName" Type="System.String" Optional="true" Category="1. Object" Description="Required - The Name of the Business Object Class to Generate." %>
<%@ Property Name="RootCommand" Type="CommandSchema" Optional="true" Category="2. Data Source" Description="Required - The stored procedure that the object is based on. Must select RootTable,  RootView, or RootCommand." %>
<%@ Property Name="RootTable" Type="TableSchema" Optional="true" Category="2. Data Source" Description="Required - The Root Table that the object is based on. Must select RootTable,  RootView, or RootCommand." %>
<%@ Property Name="RootView" Type="ViewSchema" Optional="true" Category="2. Data Source" Description="Required - The Root View that the object is based on. Must select RootTable,  RootView, or RootCommand." %>
<%@ Property Name="ResultSetIndex" Type="System.Int32" Default="1" Optional="true" Category="2. Data Source" Description="Result set index indicates which result set to use from the stored procedure. Required when using RootCommand." %>
<%@ Property Name="UniqueColumnNames" Type="CodeSmith.CustomProperties.StringCollection" Optional="true" Category="2. Data Source" Description="Unique columns. Required when using RootView or when ResultSetIndex > 0." %>
<%@ Property Name="ChildCollectionNames" Type="CodeSmith.CustomProperties.StringCollection" Optional="true" Category="1a. Child Collection Object" Description="The Child Collection's Name. Used for the memeber variable and collection name." %>
<%@ Property Name="ChildPropertyNames" Type="CodeSmith.CustomProperties.StringCollection" Optional="true" Category="1a. Child Collection Object" Description="The Child Collection's member variable name." %>
<%-- Generic Variables for code to use  --%>
<% 
	Debugger.Break
   	Dim i as integer = BaseIndentLevel
   	Dim objInfo as ObjectInfo = new ObjectInfo(Me)
%>
<!-- #INCLUDE FILE="AutoGenWarning.inc" -->
Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports Csla
Imports Csla.Data
Imports Csla.Validation

<% If ClassNamespace IsNot Nothing AndAlso ClassNamespace.Length > 0 Then %>Namespace <%= ClassNamespace %>
<% i+=1 %>
<% end if %> 
<% if (not objInfo.IsUserPartial) then %>
<%=Indent(i)%><Serializable()> _
<% end if %>
<%=Indent(i)%><%= objInfo.Modifiers %> Class <%=objInfo.NameAndSuffix%>
<%=Indent(i+1)%>Inherits <%=objInfo.Inherits%>
<% i+=1 %>
<% If objInfo.IsUserPartial Then %>
#Region " Initialize "
<%=Indent(i)%>Protected Overrides Sub Initialize()
<% i+=1 %>
<%=Indent(i)%>'fetchObjectCompleteDelegate = fetchObjectComplete
<%=Indent(i)%>'fetchChildrenCompleteDelegate = fetchChildrenComplete
<% i-=1 %>
<%=Indent(i)%>End Sub
#End Region 
<% End If %>
<!-- #INCLUDE FILE="PropertiesMethods.inc" -->
<!-- #INCLUDE FILE="AuthorizationRules.inc" -->
<!-- #INCLUDE FILE="ChildFactoryMethods.inc" -->

#Region " Data Access "
<% if (objInfo.IsGeneratedClass) then%>
<% if (objInfo.IsGeneratedBase) then%>
<%=Indent(i)%><RunLocal> _
<%=Indent(i)%>Private Sub DataPortal_Create(Byval criteria as Object)
<%=Indent(i)%>End Sub

<% end if %>
<!-- #INCLUDE FILE="Fetch.inc" -->
<% end if %>
#End Region
<% If objInfo.IsGeneratedPartial Then %>
#Region " Delegation Methods "
<%=Indent(i)%>'
<%=Indent(i)%>' Fetch
<%=Indent(i)%>'
<%=Indent(i)%><NonSerialized()> _
<%=Indent(i)%>private fetchObjectCompleteDelegate as Action(Of SafeDataReader) = Nothing
<%=Indent(i)%>private Sub OnFetchObjectComplete(Byval dr as SafeDataReader )
<% i+=1 %>
<%=Indent(i)%>if (fetchObjectCompleteDelegate isnot nothing) then
<%=Indent(i+1)%>fetchObjectCompleteDelegate(dr)
<%=Indent(i)%>end if
<% i-=1 %>
<%=Indent(i)%>End Sub

<%=Indent(i)%><NonSerialized()> _
<%=Indent(i)%>private fetchChildrenCompleteDelegate as Action(Of SafeDataReader) = nothing
<%=Indent(i)%>private Sub OnFetchChildrenComplete(byval dr as SafeDataReader)
<% i+=1 %>
<%=Indent(i)%>if (fetchChildrenCompleteDelegate isnot nothing) then
<%=Indent(i+1)%>fetchChildrenCompleteDelegate(dr)
<%=Indent(i)%>end if
<% i-=1 %>
<%=Indent(i)%>End Sub

#End Region
<% End If %>
<% i-=1 %>
<%=Indent(i)%>End Class
<% If ClassNamespace IsNot Nothing AndAlso ClassNamespace.Length > 0 Then%>End Namespace<% End If %>
