<%@ CodeTemplate Src="TemplateBase.vb" Inherits="CodeSmith.Csla.TemplateBase" Language="VB" TargetLanguage="VB" Description="Generates a CSLA Read Only Child Collection Object." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Property Name="ObjectName" Type="System.String" Optional="true" Category="1. Object" Description="Required - The Name of the Business Object Collection Class to Generate." %>
<%@ Property Name="ChildName" Type="System.String" Optional="true" Category="1. Object" Description="Required - The Name of the Business Object Element of the Collection." %>
<%@ Property Name="RootCommand" Type="CommandSchema" Optional="true" Category="2. Data Source" Description="Required - The stored procedure that the object is based on. Must select RootTable,  RootView, or RootCommand." %>
<%@ Property Name="RootTable" Type="TableSchema" Optional="true" Category="2. Data Source" Description="Required - The Root Table that the object is based on. Must select RootTable,  RootView, or RootCommand." %>
<%@ Property Name="RootView" Type="ViewSchema" Optional="true" Category="2. Data Source" Description="Required - The Root View that the object is based on. Must select RootTable,  RootView, or RootCommand." %>
<%@ Property Name="ResultSetIndex" Type="System.Int32" Default="1" Optional="true" Category="2. Data Source" Description="Result set index indicates which result set to use from the stored procedure. Required when using RootCommand." %>

<%-- Generic Variables for code to use  --%>
<% 
   Dim i As Integer = BaseIndentLevel
   Dim objInfo As ObjectInfo = New ObjectInfo(Me)
%>
<!-- #INCLUDE FILE="AutoGenWarning.inc" -->
Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports Csla
Imports Csla.Data

<% If Not ClassNamespace Is Nothing AndAlso ClassNamespace.Length > 0 Then %>Namespace <%= ClassNamespace %>
<% i+=1 %>
<% End If %> 
<% If Not objInfo.IsUserPartial Then %>
<%=Indent(i)%><Serializable()> _
<% End If %>
<%=Indent(i)%><%= objInfo.Modifiers %> Class <%=objInfo.NameAndSuffix%>
<%=Indent(i+1)%>Inherits <%=objInfo.Inherits%>
<% If objInfo.IsGeneratedBase Then %>
<%=GetConstraint(objInfo, i+1)%>
<% End If %>
<% i+=1 %>
<!-- #INCLUDE FILE="ChildFactoryMethods.inc" -->

<% If objInfo.IsGeneratedClass Then %>

#Region " Data Access "
<% If objInfo.IsGeneratedBase Then%>
<%=Indent(i)%><RunLocal> _
<%=Indent(i)%>Private Overloads Sub DataPortal_Create(ByVal criteria As Object)
<%=Indent(i)%>End Sub

<% End If %>
<%=Indent(i)%><%=objInfo.LocalMethodModifiers%> Sub Fetch(ByVal dr As SafeDataReader)
<% i+=1 %>
<%=Indent(i)%>RaiseListChangedEvents = False
<%=Indent(i)%>IsReadOnly = False

<%=Indent(i)%>While dr.Read()
<%=Indent(i+1)%>Me.Add(<%=objInfo.Child%><%If objInfo.IsGeneratedBase Then%>(Of <%=GenericTypeChildParameter%>)<%End If%>.<%=objInfo.GetChildMethodName%>(dr))

<%=Indent(i)%>IsReadOnly = True
<%=Indent(i)%>RaiseListChangedEvents = True
<% i-=1 %>
<%=Indent(i)%>End Sub

#End Region<% End If %>

<% i+=1 %>
<%=Indent(i)%>End Class

<% If Not ClassNamespace Is Nothing AndAlso ClassNamespace.Length > 0 Then%>End Namespace<% End If %>