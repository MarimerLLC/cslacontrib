<%@ CodeTemplate Src="TemplateBase.cs" Inherits="CodeSmith.Csla.TemplateBase" Language="C#" TargetLanguage="C#" Description="Generates a CSLA Editable Child Collection Object." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Property Name="ObjectName" Type="System.String" Optional="true" Category="1. Object" Description="Required - The Name of the Business Object Class to Generate." %>
<%@ Property Name="RootCommand" Type="CommandSchema" Optional="true" Category="2. Data Source" Description="Required - The stored procedure that the object is based on. Must select RootTable,  RootView, or RootCommand." %>
<%@ Property Name="RootTable" Type="TableSchema" Optional="true" Category="2. Data Source" Description="Required - The Root Table that the object is based on. Must select RootTable,  RootView, or RootCommand." %>
<%@ Property Name="RootView" Type="ViewSchema" Optional="true" Category="2. Data Source" Description="Required - The Root View that the object is based on. Must select RootTable,  RootView, or RootCommand." %>
<%@ Property Name="ResultSetIndex" Type="System.Int32" Default="1" Optional="true" Category="2. Data Source" Description="Result set index indicates which result set to use from the stored procedure. Required when using RootCommand." %>
<%@ Property Name="UniqueColumnNames" Type="CodeSmith.CustomProperties.StringCollection" Optional="true" Category="2. Data Source" Description="Unique columns. Required when using RootView or when ResultSetIndex > 0." %>
<%@ Property Name="ChildCollectionTypes" Type="CodeSmith.CustomProperties.StringCollection" Optional="true" Category="1a. Child Collection Object" Description="The Child Collection's Name. Used for the memeber variable and collection name." %>
<%@ Property Name="ChildPropertyNames" Type="CodeSmith.CustomProperties.StringCollection" Optional="true" Category="1a. Child Collection Object" Description="The Child Collection's member variable name." %>

<%-- Generic Variables for code to use  --%>
<% 
   int i = BaseIndentLevel; 
   ObjectInfo objInfo = new ObjectInfo(this);
%>
<!-- #INCLUDE FILE="AutoGenWarning.inc" -->
using System;

<% if (objInfo.Namespace.Length > 0) { %>namespace <%= objInfo.Namespace %>
<%=Indent(i++)%>{ 
<% } %> 
<% if(!objInfo.IsUserPartial) {%>
<%=Indent(i)%>[Serializable()] 
<%}%>
<%=Indent(i)%><%= objInfo.Modifiers %> class <%=objInfo.Name%><%=objInfo.Inherits%>
<%=Indent(i++)%>{
<!-- #INCLUDE FILE="ReadOnlyProperties.inc" -->

<% if(objInfo.IsGeneratedClass) {%>
<%-- Factory Methods  --%>

<%=Indent(i, true)%>internal static <%=objInfo.Type%> <%=objInfo.GetMethodName%>(<%=objInfo.DalNamespace%>.<%=CsHelper.ConvertToSingular(objInfo.EntityName)%> data)
<%=Indent(i++)%>{
<%=Indent(i)%><%=objInfo.Type%> item = new <%=objInfo.Type%>();
<%=Indent(i)%>item.Fetch(data);
<%=Indent(i)%>return item;
<%=Indent(--i)%>}
<% if(objInfo.IsSingle || objInfo.IsGeneratedPartial) {%>

<%=Indent(i)%>private <%=objInfo.Name%>()
<%=Indent(i)%>{ /* require use of factory method */ }
<%}%>
<%=Indent(i, true)%>#region Data Access
<%=Indent(i)%><%=objInfo.LocalMethodModifiers%> void Fetch(<%=objInfo.DalNamespace%>.<%=CsHelper.ConvertToSingular(objInfo.EntityName)%> data)
<%=Indent(i++)%>{
<%if(objInfo.IsGeneratedPartial) {%>
<%=Indent(i)%>bool cancel = false;
<%=Indent(i)%>OnFetching(ref cancel);
<%=Indent(i)%>if (cancel) return;

<%}%>
<% foreach(PropertyInfo prop in objInfo.Properties) {
	if (!prop.HasDbColumn || prop.IsTimestamp) continue; %>
<%=Indent(i)%><%=prop.Name%> = data.<%=prop.DbColumnName%>;
<% } %>
<%if(objInfo.ChildCollection.Count>0) {%>

<%=Indent(i)%>//Load child object(s)
<%}%>
<%  foreach (PropertyInfo prop in objInfo.ChildCollection) { %>
<%=Indent(i)%><%=prop.Name%> = <%=prop.Type%>.Get<%=prop.Type%>(data.<%=prop.DbRefTableName%>);
<% } %>
<%if(objInfo.IsGeneratedPartial) {%>

<%=Indent(i)%>OnFetched();
<%}%>
<%=Indent(--i)%>}
<%if(objInfo.IsGeneratedPartial) {%>

<%=Indent(i)%>partial void OnFetching(ref bool cancel);
<%=Indent(i)%>partial void OnFetched();
<%}%>
<%=Indent(i)%>#endregion //Data Access
<%}%>
<%=Indent(--i)%>}
<% if(objInfo.Namespace.Length > 0) {%>}<%}%>
