
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using System.Configuration;
using System.IO;
using System.ComponentModel;
using System.Collections.Generic;
using Csla.Validation;
namespace Northwind.CSLA.Library
{
	/// <summary>
	///	Employee Generated by MyGeneration using the CSLA Object Mapping template
	/// </summary>
	[Serializable()]
	[TypeConverter(typeof(EmployeeConverter))]
	public partial class Employee : BusinessBase<Employee>, IDisposable, IVEHasBrokenRules
	{
		#region Refresh
		private List<Employee> _RefreshEmployees = new List<Employee>();
		private List<EmployeeEmployeeTerritory> _RefreshEmployeeEmployeeTerritories = new List<EmployeeEmployeeTerritory>();
		private List<EmployeeOrder> _RefreshEmployeeOrders = new List<EmployeeOrder>();
		private void AddToRefreshList(List<Employee> refreshEmployees, List<EmployeeEmployeeTerritory> refreshEmployeeEmployeeTerritories, List<EmployeeOrder> refreshEmployeeOrders)
		{
			if (IsDirty)
				refreshEmployees.Add(this);
			if (_ChildEmployees != null && _ChildEmployees.IsDirty)
			{
				foreach (Employee tmp in _ChildEmployees)
				{
					tmp.AddToRefreshList(refreshEmployees, refreshEmployeeEmployeeTerritories, refreshEmployeeOrders);
				}
			}
			if (_EmployeeEmployeeTerritories != null && _EmployeeEmployeeTerritories.IsDirty)
			{
				foreach (EmployeeEmployeeTerritory tmp in _EmployeeEmployeeTerritories)
				{
					if(tmp.IsDirty)refreshEmployeeEmployeeTerritories.Add(tmp);
				}
			}
			if (_EmployeeOrders != null && _EmployeeOrders.IsDirty)
			{
				foreach (EmployeeOrder tmp in _EmployeeOrders)
				{
					if(tmp.IsDirty)refreshEmployeeOrders.Add(tmp);
				}
			}
		}
		private void BuildRefreshList()
		{
			_RefreshEmployees = new List<Employee>();
			_RefreshEmployeeEmployeeTerritories = new List<EmployeeEmployeeTerritory>();
			_RefreshEmployeeOrders = new List<EmployeeOrder>();
			AddToRefreshList(_RefreshEmployees, _RefreshEmployeeEmployeeTerritories, _RefreshEmployeeOrders);
		}
		private void ProcessRefreshList()
		{
			foreach (Employee tmp in _RefreshEmployees)
			{
				EmployeeInfo.Refresh(tmp);
			}
			foreach (EmployeeEmployeeTerritory tmp in _RefreshEmployeeEmployeeTerritories)
			{
				EmployeeTerritoryInfo.Refresh(this, tmp);
			}
			foreach (EmployeeOrder tmp in _RefreshEmployeeOrders)
			{
				OrderInfo.Refresh(tmp);
			}
		}
		#endregion
		#region Collection
		protected static List<Employee> _AllList = new List<Employee>();
		private static Dictionary<string, Employee> _AllByPrimaryKey = new Dictionary<string, Employee>();
		private static void ConvertListToDictionary()
		{
			List<Employee> remove = new List<Employee>();
			foreach (Employee tmp in _AllList)
			{
				_AllByPrimaryKey[tmp.EmployeeID.ToString()]=tmp; // Primary Key
				remove.Add(tmp);
			}
			foreach (Employee tmp in remove)
				_AllList.Remove(tmp);
		}
		public static Employee GetExistingByPrimaryKey(int employeeID)
		{
			ConvertListToDictionary();
			string key = employeeID.ToString();
			if (_AllByPrimaryKey.ContainsKey(key)) return _AllByPrimaryKey[key]; 
			return null;
		}
		#endregion
		#region Business Methods
		private string _ErrorMessage = string.Empty;
		public string ErrorMessage
		{
			get { return _ErrorMessage; }
		}
		private static int _nextEmployeeID = -1;
		public static int NextEmployeeID
		{
			get { return _nextEmployeeID--; }
		}
		private int _EmployeeID;
		[System.ComponentModel.DataObjectField(true, true)]
		public int EmployeeID
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _EmployeeID;
			}
		}
		private string _LastName = string.Empty;
		public string LastName
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _LastName;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (value == null) value = string.Empty;
				if (_LastName != value)
				{
					_LastName = value;
					PropertyHasChanged();
				}
			}
		}
		private string _FirstName = string.Empty;
		public string FirstName
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _FirstName;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (value == null) value = string.Empty;
				if (_FirstName != value)
				{
					_FirstName = value;
					PropertyHasChanged();
				}
			}
		}
		private string _Title = string.Empty;
		public string Title
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Title;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (value == null) value = string.Empty;
				if (_Title != value)
				{
					_Title = value;
					PropertyHasChanged();
				}
			}
		}
		private string _TitleOfCourtesy = string.Empty;
		public string TitleOfCourtesy
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _TitleOfCourtesy;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (value == null) value = string.Empty;
				if (_TitleOfCourtesy != value)
				{
					_TitleOfCourtesy = value;
					PropertyHasChanged();
				}
			}
		}
		private string _BirthDate = string.Empty;
		public string BirthDate
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _BirthDate;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (value == null) value = string.Empty;
				_BirthDate = value;
				try
				{
					SmartDate tmp = new SmartDate(value);
					if (_BirthDate != tmp.ToString())
					{
						_BirthDate = tmp.ToString();
						// TODO: Any Cross Property Validation
					}
				}
				catch
				{
				}
				PropertyHasChanged();
			}
		}
		private string _HireDate = string.Empty;
		public string HireDate
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _HireDate;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (value == null) value = string.Empty;
				_HireDate = value;
				try
				{
					SmartDate tmp = new SmartDate(value);
					if (_HireDate != tmp.ToString())
					{
						_HireDate = tmp.ToString();
						// TODO: Any Cross Property Validation
					}
				}
				catch
				{
				}
				PropertyHasChanged();
			}
		}
		private string _Address = string.Empty;
		public string Address
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Address;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (value == null) value = string.Empty;
				if (_Address != value)
				{
					_Address = value;
					PropertyHasChanged();
				}
			}
		}
		private string _City = string.Empty;
		public string City
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _City;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (value == null) value = string.Empty;
				if (_City != value)
				{
					_City = value;
					PropertyHasChanged();
				}
			}
		}
		private string _Region = string.Empty;
		public string Region
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Region;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (value == null) value = string.Empty;
				if (_Region != value)
				{
					_Region = value;
					PropertyHasChanged();
				}
			}
		}
		private string _PostalCode = string.Empty;
		public string PostalCode
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _PostalCode;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (value == null) value = string.Empty;
				if (_PostalCode != value)
				{
					_PostalCode = value;
					PropertyHasChanged();
				}
			}
		}
		private string _Country = string.Empty;
		public string Country
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Country;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (value == null) value = string.Empty;
				if (_Country != value)
				{
					_Country = value;
					PropertyHasChanged();
				}
			}
		}
		private string _HomePhone = string.Empty;
		public string HomePhone
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _HomePhone;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (value == null) value = string.Empty;
				if (_HomePhone != value)
				{
					_HomePhone = value;
					PropertyHasChanged();
				}
			}
		}
		private string _Extension = string.Empty;
		public string Extension
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Extension;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (value == null) value = string.Empty;
				if (_Extension != value)
				{
					_Extension = value;
					PropertyHasChanged();
				}
			}
		}
		private byte[] _Photo;
		public byte[] Photo
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Photo;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (_Photo != value)
				{
					_Photo = value;
					PropertyHasChanged();
				}
			}
		}
		private string _Notes = string.Empty;
		public string Notes
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Notes;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (value == null) value = string.Empty;
				if (_Notes != value)
				{
					_Notes = value;
					PropertyHasChanged();
				}
			}
		}
		private int? _ReportsTo;
		public int? ReportsTo
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyParent != null) _ReportsTo = _MyParent.EmployeeID;
				return _ReportsTo;
			}
		}
		private Employee _MyParent;
		public Employee MyParent
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyParent == null && _ReportsTo != null) _MyParent = Employee.Get((int)_ReportsTo);
				return _MyParent;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (_MyParent != value)
				{
					_MyParent = value;
					_ReportsTo = (value == null ? null : (int?) value.EmployeeID);
					PropertyHasChanged();
				}
			}
		}
		private string _PhotoPath = string.Empty;
		public string PhotoPath
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _PhotoPath;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (value == null) value = string.Empty;
				if (_PhotoPath != value)
				{
					_PhotoPath = value;
					PropertyHasChanged();
				}
			}
		}
		private int _ChildEmployeeCount = 0;
		/// <summary>
		/// Count of ChildEmployees for this Employee
		/// </summary>
		public int ChildEmployeeCount
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _ChildEmployeeCount;
			}
		}
		private ChildEmployees _ChildEmployees = null;
		/// <summary>
		/// Related Field
		/// </summary>
		[TypeConverter(typeof(ChildEmployeesConverter))]
		public ChildEmployees ChildEmployees
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if(_ChildEmployeeCount > 0 && _ChildEmployees == null)
					_ChildEmployees = ChildEmployees.GetByReportsTo(EmployeeID);
				else if(_ChildEmployees == null)
					_ChildEmployees = ChildEmployees.New();
				return _ChildEmployees;
			}
		}
		private int _EmployeeEmployeeTerritoryCount = 0;
		/// <summary>
		/// Count of EmployeeEmployeeTerritories for this Employee
		/// </summary>
		public int EmployeeEmployeeTerritoryCount
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _EmployeeEmployeeTerritoryCount;
			}
		}
		private EmployeeEmployeeTerritories _EmployeeEmployeeTerritories = null;
		/// <summary>
		/// Related Field
		/// </summary>
		[TypeConverter(typeof(EmployeeEmployeeTerritoriesConverter))]
		public EmployeeEmployeeTerritories EmployeeEmployeeTerritories
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if(_EmployeeEmployeeTerritoryCount > 0 && _EmployeeEmployeeTerritories == null)
					_EmployeeEmployeeTerritories = EmployeeEmployeeTerritories.GetByEmployeeID(EmployeeID);
				else if(_EmployeeEmployeeTerritories == null)
					_EmployeeEmployeeTerritories = EmployeeEmployeeTerritories.New();
				return _EmployeeEmployeeTerritories;
			}
		}
		private int _EmployeeOrderCount = 0;
		/// <summary>
		/// Count of EmployeeOrders for this Employee
		/// </summary>
		public int EmployeeOrderCount
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _EmployeeOrderCount;
			}
		}
		private EmployeeOrders _EmployeeOrders = null;
		/// <summary>
		/// Related Field
		/// </summary>
		[TypeConverter(typeof(EmployeeOrdersConverter))]
		public EmployeeOrders EmployeeOrders
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if(_EmployeeOrderCount > 0 && _EmployeeOrders == null)
					_EmployeeOrders = EmployeeOrders.GetByEmployeeID(EmployeeID);
				else if(_EmployeeOrders == null)
					_EmployeeOrders = EmployeeOrders.New();
				return _EmployeeOrders;
			}
		}
		public override bool IsDirty
		{
			get { return base.IsDirty || (_ChildEmployees == null? false : _ChildEmployees.IsDirty) || (_EmployeeEmployeeTerritories == null? false : _EmployeeEmployeeTerritories.IsDirty) || (_EmployeeOrders == null? false : _EmployeeOrders.IsDirty); }
		}
		public override bool IsValid
		{
			get { return (IsNew && !IsDirty ? true : base.IsValid) && (_ChildEmployees == null? true : _ChildEmployees.IsValid) && (_EmployeeEmployeeTerritories == null? true : _EmployeeEmployeeTerritories.IsValid) && (_EmployeeOrders == null? true : _EmployeeOrders.IsValid); }
		}
		// TODO: Replace base Employee.ToString function as necessary
		/// <summary>
		/// Overrides Base ToString
		/// </summary>
		/// <returns>A string representation of current Employee</returns>
		//public override string ToString()
		//{
		//  return base.ToString();
		//}
		// TODO: Check Employee.GetIdValue to assure that the ID returned is unique
		/// <summary>
		/// Overrides Base GetIdValue - Used internally by CSLA to determine equality
		/// </summary>
		/// <returns>A Unique ID for the current Employee</returns>
		protected override object GetIdValue()
		{
			return _EmployeeID;
		}
		#endregion
		#region ValidationRules
		[NonSerialized]
		private bool _CheckingBrokenRules=false;
		public IVEHasBrokenRules HasBrokenRules
		{
			get {
				if(_CheckingBrokenRules)return null;
				if ((IsDirty || !IsNew) && BrokenRulesCollection.Count > 0) return this;
				try
				{
					_CheckingBrokenRules=true;
					IVEHasBrokenRules hasBrokenRules = null;
				if (_EmployeeOrders != null && (hasBrokenRules = _EmployeeOrders.HasBrokenRules) != null) return hasBrokenRules;
				if (_ChildEmployees != null && (hasBrokenRules = _ChildEmployees.HasBrokenRules) != null) return hasBrokenRules;
				if (_EmployeeEmployeeTerritories != null && (hasBrokenRules = _EmployeeEmployeeTerritories.HasBrokenRules) != null) return hasBrokenRules;
					return hasBrokenRules;
				}
				finally
				{
					_CheckingBrokenRules=false;
				}
			}
		}
		public BrokenRulesCollection BrokenRules
		{
			get
			{
				IVEHasBrokenRules hasBrokenRules = HasBrokenRules;
				if (this.Equals(hasBrokenRules)) return BrokenRulesCollection;
				return (hasBrokenRules != null ? hasBrokenRules.BrokenRules : null);
			}
		}
		protected override void AddBusinessRules()
		{
			ValidationRules.AddRule(
				Csla.Validation.CommonRules.StringRequired, "LastName");
			ValidationRules.AddRule(
				Csla.Validation.CommonRules.StringMaxLength,
				new Csla.Validation.CommonRules.MaxLengthRuleArgs("LastName", 20));
			ValidationRules.AddRule(
				Csla.Validation.CommonRules.StringRequired, "FirstName");
			ValidationRules.AddRule(
				Csla.Validation.CommonRules.StringMaxLength,
				new Csla.Validation.CommonRules.MaxLengthRuleArgs("FirstName", 10));
			ValidationRules.AddRule(
				Csla.Validation.CommonRules.StringMaxLength,
				new Csla.Validation.CommonRules.MaxLengthRuleArgs("Title", 30));
			ValidationRules.AddRule(
				Csla.Validation.CommonRules.StringMaxLength,
				new Csla.Validation.CommonRules.MaxLengthRuleArgs("TitleOfCourtesy", 25));
			ValidationRules.AddRule<Employee>(BirthDateValid, "BirthDate");
			ValidationRules.AddRule<Employee>(HireDateValid, "HireDate");
			ValidationRules.AddRule(
				Csla.Validation.CommonRules.StringMaxLength,
				new Csla.Validation.CommonRules.MaxLengthRuleArgs("Address", 60));
			ValidationRules.AddRule(
				Csla.Validation.CommonRules.StringMaxLength,
				new Csla.Validation.CommonRules.MaxLengthRuleArgs("City", 15));
			ValidationRules.AddRule(
				Csla.Validation.CommonRules.StringMaxLength,
				new Csla.Validation.CommonRules.MaxLengthRuleArgs("Region", 15));
			ValidationRules.AddRule(
				Csla.Validation.CommonRules.StringMaxLength,
				new Csla.Validation.CommonRules.MaxLengthRuleArgs("PostalCode", 10));
			ValidationRules.AddRule(
				Csla.Validation.CommonRules.StringMaxLength,
				new Csla.Validation.CommonRules.MaxLengthRuleArgs("Country", 15));
			ValidationRules.AddRule(
				Csla.Validation.CommonRules.StringMaxLength,
				new Csla.Validation.CommonRules.MaxLengthRuleArgs("HomePhone", 24));
			ValidationRules.AddRule(
				Csla.Validation.CommonRules.StringMaxLength,
				new Csla.Validation.CommonRules.MaxLengthRuleArgs("Extension", 4));
			ValidationRules.AddRule(
				Csla.Validation.CommonRules.StringMaxLength,
				new Csla.Validation.CommonRules.MaxLengthRuleArgs("Notes", 1073741823));
			ValidationRules.AddRule(
				Csla.Validation.CommonRules.StringMaxLength,
				new Csla.Validation.CommonRules.MaxLengthRuleArgs("PhotoPath", 255));
			//ValidationRules.AddDependantProperty("x", "y");
			_EmployeeExtension.AddValidationRules(ValidationRules);
			// TODO:  Add other validation rules
		}
		protected override void AddInstanceBusinessRules()
		{
			_EmployeeExtension.AddInstanceValidationRules(ValidationRules);
			// TODO:  Add other validation rules
		}
		private static bool BirthDateValid(Employee target, Csla.Validation.RuleArgs e)
		{
			try
			{
				DateTime tmp = SmartDate.StringToDate(target._BirthDate);
			}
			catch
			{
				e.Description = "Invalid Date";
				return false;
			}
			return true;
		}
		private static bool HireDateValid(Employee target, Csla.Validation.RuleArgs e)
		{
			try
			{
				DateTime tmp = SmartDate.StringToDate(target._HireDate);
			}
			catch
			{
				e.Description = "Invalid Date";
				return false;
			}
			return true;
		}
		// Sample data comparison validation rule
		//private bool StartDateGTEndDate(object target, Csla.Validation.RuleArgs e)
		//{
		//	if (_started > _ended)
		//	{
		//		e.Description = "Start date can't be after end date";
		//		return false;
		//	}
		//	else
		//		return true;
		//}
		#endregion
		#region Authorization Rules
		protected override void AddAuthorizationRules()
		{
			//TODO: Who can read/write which fields
			//AuthorizationRules.AllowRead(EmployeeID, "<Role(s)>");
			//AuthorizationRules.AllowRead(LastName, "<Role(s)>");
			//AuthorizationRules.AllowRead(FirstName, "<Role(s)>");
			//AuthorizationRules.AllowRead(Title, "<Role(s)>");
			//AuthorizationRules.AllowRead(TitleOfCourtesy, "<Role(s)>");
			//AuthorizationRules.AllowRead(BirthDate, "<Role(s)>");
			//AuthorizationRules.AllowRead(HireDate, "<Role(s)>");
			//AuthorizationRules.AllowRead(Address, "<Role(s)>");
			//AuthorizationRules.AllowRead(City, "<Role(s)>");
			//AuthorizationRules.AllowRead(Region, "<Role(s)>");
			//AuthorizationRules.AllowRead(PostalCode, "<Role(s)>");
			//AuthorizationRules.AllowRead(Country, "<Role(s)>");
			//AuthorizationRules.AllowRead(HomePhone, "<Role(s)>");
			//AuthorizationRules.AllowRead(Extension, "<Role(s)>");
			//AuthorizationRules.AllowRead(Photo, "<Role(s)>");
			//AuthorizationRules.AllowRead(Notes, "<Role(s)>");
			//AuthorizationRules.AllowRead(ReportsTo, "<Role(s)>");
			//AuthorizationRules.AllowRead(PhotoPath, "<Role(s)>");
			//AuthorizationRules.AllowWrite(LastName, "<Role(s)>");
			//AuthorizationRules.AllowWrite(FirstName, "<Role(s)>");
			//AuthorizationRules.AllowWrite(Title, "<Role(s)>");
			//AuthorizationRules.AllowWrite(TitleOfCourtesy, "<Role(s)>");
			//AuthorizationRules.AllowWrite(BirthDate, "<Role(s)>");
			//AuthorizationRules.AllowWrite(HireDate, "<Role(s)>");
			//AuthorizationRules.AllowWrite(Address, "<Role(s)>");
			//AuthorizationRules.AllowWrite(City, "<Role(s)>");
			//AuthorizationRules.AllowWrite(Region, "<Role(s)>");
			//AuthorizationRules.AllowWrite(PostalCode, "<Role(s)>");
			//AuthorizationRules.AllowWrite(Country, "<Role(s)>");
			//AuthorizationRules.AllowWrite(HomePhone, "<Role(s)>");
			//AuthorizationRules.AllowWrite(Extension, "<Role(s)>");
			//AuthorizationRules.AllowWrite(Photo, "<Role(s)>");
			//AuthorizationRules.AllowWrite(Notes, "<Role(s)>");
			//AuthorizationRules.AllowWrite(ReportsTo, "<Role(s)>");
			//AuthorizationRules.AllowWrite(PhotoPath, "<Role(s)>");
			_EmployeeExtension.AddAuthorizationRules(AuthorizationRules);
		}
		protected override void AddInstanceAuthorizationRules()
		{
			//TODO: Who can read/write which fields
			_EmployeeExtension.AddInstanceAuthorizationRules(AuthorizationRules);
		}
		public static bool CanAddObject()
		{
			// TODO: Can Add Authorization
			//return Csla.ApplicationContext.User.IsInRole("ProjectManager");
			return true;
		}
		public static bool CanGetObject()
		{
			// TODO: CanGet Authorization
			return true;
		}
		public static bool CanDeleteObject()
		{
			// TODO: CanDelete Authorization
			//bool result = false;
			//if (Csla.ApplicationContext.User.IsInRole("ProjectManager"))result = true;
			//if (Csla.ApplicationContext.User.IsInRole("Administrator"))result = true;
			//return result;
			return true;
		}
		public static bool CanEditObject()
		{
			// TODO: CanEdit Authorization
			//return Csla.ApplicationContext.User.IsInRole("ProjectManager");
			return true;
		}
		#endregion
		#region Factory Methods
		public int CurrentEditLevel
		{ get { return EditLevel; } }
		protected Employee()
		{/* require use of factory methods */
			_AllList.Add(this);
		}
		public void Dispose()
		{
			_AllList.Remove(this);
			_AllByPrimaryKey.Remove(EmployeeID.ToString());
		}
		public static Employee New()
		{
			if (!CanAddObject())
				throw new System.Security.SecurityException("User not authorized to add a Employee");
			try
			{
				return DataPortal.Create<Employee>();
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on Employee.New", ex);
			}
		}
		public static Employee New(string lastName, string firstName)
		{
			Employee tmp = Employee.New();
			tmp.LastName = lastName;
			tmp.FirstName = firstName;
			return tmp;
		}
		public static Employee New(string lastName, string firstName, string title, string titleOfCourtesy, string birthDate, string hireDate, string address, string city, string region, string postalCode, string country, string homePhone, string extension, byte[] photo, string notes, Employee myParent, string photoPath)
		{
			Employee tmp = Employee.New();
			tmp.LastName = lastName;
			tmp.FirstName = firstName;
			tmp.Title = title;
			tmp.TitleOfCourtesy = titleOfCourtesy;
			tmp.BirthDate = birthDate;
			tmp.HireDate = hireDate;
			tmp.Address = address;
			tmp.City = city;
			tmp.Region = region;
			tmp.PostalCode = postalCode;
			tmp.Country = country;
			tmp.HomePhone = homePhone;
			tmp.Extension = extension;
			tmp.Photo = photo;
			tmp.Notes = notes;
			tmp.MyParent = myParent;
			tmp.PhotoPath = photoPath;
			return tmp;
		}
		public static Employee MakeEmployee(string lastName, string firstName, string title, string titleOfCourtesy, string birthDate, string hireDate, string address, string city, string region, string postalCode, string country, string homePhone, string extension, byte[] photo, string notes, Employee myParent, string photoPath)
		{
			Employee tmp = Employee.New(lastName, firstName, title, titleOfCourtesy, birthDate, hireDate, address, city, region, postalCode, country, homePhone, extension, photo, notes, myParent, photoPath);
			if (tmp.IsSavable)
				tmp = tmp.Save();
			else
			{
				Csla.Validation.BrokenRulesCollection brc = tmp.ValidationRules.GetBrokenRules();
				tmp._ErrorMessage = "Failed Validation:";
				foreach (Csla.Validation.BrokenRule br in brc)
				{
					tmp._ErrorMessage += "\r\n\tFailure: " + br.RuleName;
				}
			}
			return tmp;
		}
		public static Employee Get(int employeeID)
		{
			if (!CanGetObject())
				throw new System.Security.SecurityException("User not authorized to view a Employee");
			try
			{
				Employee tmp = GetExistingByPrimaryKey(employeeID);
				if (tmp == null)
				{
					tmp = DataPortal.Fetch<Employee>(new PKCriteria(employeeID));
					_AllList.Add(tmp);
				}
				if (tmp.ErrorMessage == "No Record Found") tmp = null;
				return tmp;
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on Employee.Get", ex);
			}
		}
		public static Employee Get(SafeDataReader dr, Employee parent)
		{
			if (dr.Read()) return new Employee(dr, parent);
			return null;
		}
		internal Employee(SafeDataReader dr)
		{
			ReadData(dr);
		}
		private Employee(SafeDataReader dr, Employee parent)
		{
			ReadData(dr);
			MarkAsChild();
		}
		public static void Delete(int employeeID)
		{
			if (!CanDeleteObject())
				throw new System.Security.SecurityException("User not authorized to remove a Employee");
			try
			{
				DataPortal.Delete(new PKCriteria(employeeID));
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on Employee.Delete", ex);
			}
		}
		public override Employee Save()
		{
			if (IsDeleted && !CanDeleteObject())
				throw new System.Security.SecurityException("User not authorized to remove a Employee");
			else if (IsNew && !CanAddObject())
				throw new System.Security.SecurityException("User not authorized to add a Employee");
			else if (!CanEditObject())
				throw new System.Security.SecurityException("User not authorized to update a Employee");
			try
			{
				BuildRefreshList();
				Employee employee = base.Save();
				_AllList.Add(employee);//Refresh the item in AllList
				ProcessRefreshList();
				return employee;
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on CSLA Save", ex);
			}
		}
		#endregion
		#region Data Access Portal
		[Serializable()]
		protected class PKCriteria
		{
			private int _EmployeeID;
			public int EmployeeID
			{ get { return _EmployeeID; } }
			public PKCriteria(int employeeID)
			{
				_EmployeeID = employeeID;
			}
		}
		// TODO: If Create needs to access DB - It should not be marked RunLocal
		[RunLocal()]
		private new void DataPortal_Create()
		{
			_EmployeeID = NextEmployeeID;
			// Database Defaults

			// TODO: Add any defaults that are necessary
			ValidationRules.CheckRules();
		}
		private void ReadData(SafeDataReader dr)
		{
			Database.LogInfo("Employee.ReadData", GetHashCode());
			try
			{
				_EmployeeID = dr.GetInt32("EmployeeID");
				_LastName = dr.GetString("LastName");
				_FirstName = dr.GetString("FirstName");
				_Title = dr.GetString("Title");
				_TitleOfCourtesy = dr.GetString("TitleOfCourtesy");
				_BirthDate = dr.GetSmartDate("BirthDate").Text;
				_HireDate = dr.GetSmartDate("HireDate").Text;
				_Address = dr.GetString("Address");
				_City = dr.GetString("City");
				_Region = dr.GetString("Region");
				_PostalCode = dr.GetString("PostalCode");
				_Country = dr.GetString("Country");
				_HomePhone = dr.GetString("HomePhone");
				_Extension = dr.GetString("Extension");
				_Photo = (byte[])dr.GetValue("Photo");
				_Notes = dr.GetString("Notes");
				_ReportsTo = (int?)dr.GetValue("ReportsTo");
				_PhotoPath = dr.GetString("PhotoPath");
				_ChildEmployeeCount = dr.GetInt32("ChildCount");
				_EmployeeEmployeeTerritoryCount = dr.GetInt32("EmployeeTerritoryCount");
				_EmployeeOrderCount = dr.GetInt32("OrderCount");
				MarkOld();
			}
			catch (Exception ex)
			{
				Database.LogException("Employee.ReadData", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("Employee.ReadData", ex);
			}
		}
		private void DataPortal_Fetch(PKCriteria criteria)
		{
			Database.LogInfo("Employee.DataPortal_Fetch", GetHashCode());
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					ApplicationContext.LocalContext["cn"] = cn;
					using (SqlCommand cm = cn.CreateCommand())
					{
						cm.CommandType = CommandType.StoredProcedure;
						cm.CommandText = "getEmployee";
						cm.Parameters.AddWithValue("@EmployeeID", criteria.EmployeeID);
						using (SafeDataReader dr = new SafeDataReader(cm.ExecuteReader()))
						{
							if (!dr.Read())
							{
								_ErrorMessage = "No Record Found";
								return;
							}
							ReadData(dr);
							// load child objects
							dr.NextResult();
							_EmployeeEmployeeTerritories = EmployeeEmployeeTerritories.Get(dr);
							// load child objects
							dr.NextResult();
							_EmployeeOrders = EmployeeOrders.Get(dr);
						}
					}
					// removing of item only needed for local data portal
					if (ApplicationContext.ExecutionLocation == ApplicationContext.ExecutionLocations.Client)
						ApplicationContext.LocalContext.Remove("cn");
				}
			}
			catch (Exception ex)
			{
				Database.LogException("Employee.DataPortal_Fetch", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("Employee.DataPortal_Fetch", ex);
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		protected override void DataPortal_Insert()
		{
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					ApplicationContext.LocalContext["cn"] = cn;
					SQLInsert();
					// removing of item only needed for local data portal
					if (ApplicationContext.ExecutionLocation == ApplicationContext.ExecutionLocations.Client)
						ApplicationContext.LocalContext.Remove("cn");
				}
			}
			catch (Exception ex)
			{
				Database.LogException("Employee.DataPortal_Insert", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("Employee.DataPortal_Insert", ex);
			}
			finally
			{
				Database.LogInfo("Employee.DataPortal_Insert", GetHashCode());
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		internal void SQLInsert()
		{
			if (!this.IsDirty) return;
			try
			{
				SqlConnection cn = (SqlConnection)ApplicationContext.LocalContext["cn"];
				using (SqlCommand cm = cn.CreateCommand())
				{
					cm.CommandType = CommandType.StoredProcedure;
					cm.CommandText = "addEmployee";
					// Input All Fields - Except Calculated Columns
					cm.Parameters.AddWithValue("@LastName", _LastName);
					cm.Parameters.AddWithValue("@FirstName", _FirstName);
					cm.Parameters.AddWithValue("@Title", _Title);
					cm.Parameters.AddWithValue("@TitleOfCourtesy", _TitleOfCourtesy);
					cm.Parameters.AddWithValue("@BirthDate", new SmartDate(_BirthDate).DBValue);
					cm.Parameters.AddWithValue("@HireDate", new SmartDate(_HireDate).DBValue);
					cm.Parameters.AddWithValue("@Address", _Address);
					cm.Parameters.AddWithValue("@City", _City);
					cm.Parameters.AddWithValue("@Region", _Region);
					cm.Parameters.AddWithValue("@PostalCode", _PostalCode);
					cm.Parameters.AddWithValue("@Country", _Country);
					cm.Parameters.AddWithValue("@HomePhone", _HomePhone);
					cm.Parameters.AddWithValue("@Extension", _Extension);
					cm.Parameters.AddWithValue("@Photo", _Photo);
					cm.Parameters.AddWithValue("@Notes", _Notes);
					cm.Parameters.AddWithValue("@ReportsTo", ReportsTo);
					cm.Parameters.AddWithValue("@PhotoPath", _PhotoPath);
					// Output Calculated Columns
					SqlParameter param_EmployeeID = new SqlParameter("@newEmployeeID", SqlDbType.Int);
					param_EmployeeID.Direction = ParameterDirection.Output;
					cm.Parameters.Add(param_EmployeeID);
					// TODO: Define any additional output parameters
					cm.ExecuteNonQuery();
					// Save all values being returned from the Procedure
					_EmployeeID = (int)cm.Parameters["@newEmployeeID"].Value;
				}
				MarkOld();
				// update child objects
				if (_EmployeeOrders != null) _EmployeeOrders.Update(this);
				if (_ChildEmployees != null) _ChildEmployees.Update(this);
				if (_EmployeeEmployeeTerritories != null) _EmployeeEmployeeTerritories.Update(this);
				Database.LogInfo("Employee.SQLInsert", GetHashCode());
			}
			catch (Exception ex)
			{
				Database.LogException("Employee.SQLInsert", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("Employee.SQLInsert", ex);
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		public static void Add(SqlConnection cn, ref int employeeID, string lastName, string firstName, string title, string titleOfCourtesy, SmartDate birthDate, SmartDate hireDate, string address, string city, string region, string postalCode, string country, string homePhone, string extension, byte[] photo, string notes, Employee myParent, string photoPath)
		{
			Database.LogInfo("Employee.Add", 0);
			try
			{
				using (SqlCommand cm = cn.CreateCommand())
				{
					cm.CommandType = CommandType.StoredProcedure;
					cm.CommandText = "addEmployee";
					// Input All Fields - Except Calculated Columns
					cm.Parameters.AddWithValue("@LastName", lastName);
					cm.Parameters.AddWithValue("@FirstName", firstName);
					cm.Parameters.AddWithValue("@Title", title);
					cm.Parameters.AddWithValue("@TitleOfCourtesy", titleOfCourtesy);
					cm.Parameters.AddWithValue("@BirthDate", birthDate.DBValue);
					cm.Parameters.AddWithValue("@HireDate", hireDate.DBValue);
					cm.Parameters.AddWithValue("@Address", address);
					cm.Parameters.AddWithValue("@City", city);
					cm.Parameters.AddWithValue("@Region", region);
					cm.Parameters.AddWithValue("@PostalCode", postalCode);
					cm.Parameters.AddWithValue("@Country", country);
					cm.Parameters.AddWithValue("@HomePhone", homePhone);
					cm.Parameters.AddWithValue("@Extension", extension);
					cm.Parameters.AddWithValue("@Photo", photo);
					cm.Parameters.AddWithValue("@Notes", notes);
					if(myParent != null)cm.Parameters.AddWithValue("@ReportsTo", myParent.EmployeeID);
					cm.Parameters.AddWithValue("@PhotoPath", photoPath);
					// Output Calculated Columns
					SqlParameter param_EmployeeID = new SqlParameter("@newEmployeeID", SqlDbType.Int);
					param_EmployeeID.Direction = ParameterDirection.Output;
					cm.Parameters.Add(param_EmployeeID);
					// TODO: Define any additional output parameters
					cm.ExecuteNonQuery();
					// Save all values being returned from the Procedure
					employeeID = (int)cm.Parameters["@newEmployeeID"].Value;
			// No Timestamp value to return
				}
			}
			catch (Exception ex)
			{
				Database.LogException("Employee.Add", ex);
				throw new DbCslaException("Employee.Add", ex);
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		protected override void DataPortal_Update()
		{
			if (!IsDirty) return;	// If not dirty - nothing to do
			Database.LogInfo("Employee.DataPortal_Update", GetHashCode());
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					ApplicationContext.LocalContext["cn"] = cn;
					SQLUpdate();
					// removing of item only needed for local data portal
					if (ApplicationContext.ExecutionLocation == ApplicationContext.ExecutionLocations.Client)
						ApplicationContext.LocalContext.Remove("cn");
				}
			}
			catch (Exception ex)
			{
				Database.LogException("Employee.DataPortal_Update", ex);
				_ErrorMessage = ex.Message;
				if (!ex.Message.EndsWith("has been edited by another user.")) throw ex;
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		internal void SQLUpdate()
		{
			if (!IsDirty) return;	// If not dirty - nothing to do
			Database.LogInfo("Employee.SQLUpdate", GetHashCode());
			try
			{
				SqlConnection cn = (SqlConnection)ApplicationContext.LocalContext["cn"];
				if (base.IsDirty)
				{
					using (SqlCommand cm = cn.CreateCommand())
					{
						cm.CommandType = CommandType.StoredProcedure;
						cm.CommandText = "updateEmployee";
						// All Fields including Calculated Fields
						cm.Parameters.AddWithValue("@EmployeeID", _EmployeeID);
						cm.Parameters.AddWithValue("@LastName", _LastName);
						cm.Parameters.AddWithValue("@FirstName", _FirstName);
						cm.Parameters.AddWithValue("@Title", _Title);
						cm.Parameters.AddWithValue("@TitleOfCourtesy", _TitleOfCourtesy);
						cm.Parameters.AddWithValue("@BirthDate", new SmartDate(_BirthDate).DBValue);
						cm.Parameters.AddWithValue("@HireDate", new SmartDate(_HireDate).DBValue);
						cm.Parameters.AddWithValue("@Address", _Address);
						cm.Parameters.AddWithValue("@City", _City);
						cm.Parameters.AddWithValue("@Region", _Region);
						cm.Parameters.AddWithValue("@PostalCode", _PostalCode);
						cm.Parameters.AddWithValue("@Country", _Country);
						cm.Parameters.AddWithValue("@HomePhone", _HomePhone);
						cm.Parameters.AddWithValue("@Extension", _Extension);
						cm.Parameters.AddWithValue("@Photo", _Photo);
						cm.Parameters.AddWithValue("@Notes", _Notes);
						cm.Parameters.AddWithValue("@ReportsTo", ReportsTo);
						cm.Parameters.AddWithValue("@PhotoPath", _PhotoPath);
						// Output Calculated Columns
						// TODO: Define any additional output parameters
						cm.ExecuteNonQuery();
						// Save all values being returned from the Procedure
					}
				}
				MarkOld();
				// use the open connection to update child objects
				if (_EmployeeOrders != null) _EmployeeOrders.Update(this);
				if (_ChildEmployees != null) _ChildEmployees.Update(this);
				if (_EmployeeEmployeeTerritories != null) _EmployeeEmployeeTerritories.Update(this);
			}
			catch (Exception ex)
			{
				Database.LogException("Employee.SQLUpdate", ex);
				_ErrorMessage = ex.Message;
				if (!ex.Message.EndsWith("has been edited by another user.")) throw ex;
			}
		}
		internal void Update()
		{
			if (!this.IsDirty) return;
			if (base.IsDirty)
			{
				SqlConnection cn = (SqlConnection)ApplicationContext.LocalContext["cn"];
				if (IsNew)
					Employee.Add(cn, ref _EmployeeID, _LastName, _FirstName, _Title, _TitleOfCourtesy, new SmartDate(_BirthDate), new SmartDate(_HireDate), _Address, _City, _Region, _PostalCode, _Country, _HomePhone, _Extension, _Photo, _Notes, _MyParent, _PhotoPath);
				else
					Employee.Update(cn, ref _EmployeeID, _LastName, _FirstName, _Title, _TitleOfCourtesy, new SmartDate(_BirthDate), new SmartDate(_HireDate), _Address, _City, _Region, _PostalCode, _Country, _HomePhone, _Extension, _Photo, _Notes, _MyParent, _PhotoPath);
				MarkOld();
			}
			if (_EmployeeOrders != null) _EmployeeOrders.Update(this);
			if (_ChildEmployees != null) _ChildEmployees.Update(this);
			if (_EmployeeEmployeeTerritories != null) _EmployeeEmployeeTerritories.Update(this);
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		public static void Update(SqlConnection cn, ref int employeeID, string lastName, string firstName, string title, string titleOfCourtesy, SmartDate birthDate, SmartDate hireDate, string address, string city, string region, string postalCode, string country, string homePhone, string extension, byte[] photo, string notes, Employee myParent, string photoPath)
		{
			Database.LogInfo("Employee.Update", 0);
			try
			{
				using (SqlCommand cm = cn.CreateCommand())
				{
					cm.CommandType = CommandType.StoredProcedure;
					cm.CommandText = "updateEmployee";
					// Input All Fields - Except Calculated Columns
					cm.Parameters.AddWithValue("@EmployeeID", employeeID);
					cm.Parameters.AddWithValue("@LastName", lastName);
					cm.Parameters.AddWithValue("@FirstName", firstName);
					cm.Parameters.AddWithValue("@Title", title);
					cm.Parameters.AddWithValue("@TitleOfCourtesy", titleOfCourtesy);
					cm.Parameters.AddWithValue("@BirthDate", birthDate.DBValue);
					cm.Parameters.AddWithValue("@HireDate", hireDate.DBValue);
					cm.Parameters.AddWithValue("@Address", address);
					cm.Parameters.AddWithValue("@City", city);
					cm.Parameters.AddWithValue("@Region", region);
					cm.Parameters.AddWithValue("@PostalCode", postalCode);
					cm.Parameters.AddWithValue("@Country", country);
					cm.Parameters.AddWithValue("@HomePhone", homePhone);
					cm.Parameters.AddWithValue("@Extension", extension);
					cm.Parameters.AddWithValue("@Photo", photo);
					cm.Parameters.AddWithValue("@Notes", notes);
					if(myParent != null)cm.Parameters.AddWithValue("@ReportsTo", myParent.EmployeeID);
					cm.Parameters.AddWithValue("@PhotoPath", photoPath);
					// Output Calculated Columns
					// TODO: Define any additional output parameters
					cm.ExecuteNonQuery();
					// Save all values being returned from the Procedure
				// No Timestamp value to return
				}
			}
			catch (Exception ex)
			{
				Database.LogException("Employee.Update", ex);
				throw new DbCslaException("Employee.Update", ex);
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		protected override void DataPortal_DeleteSelf()
		{
			DataPortal_Delete(new PKCriteria(_EmployeeID));
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		private void DataPortal_Delete(PKCriteria criteria)
		{
			Database.LogInfo("Employee.DataPortal_Delete", GetHashCode());
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					using (SqlCommand cm = cn.CreateCommand())
					{
						cm.CommandType = CommandType.StoredProcedure;
						cm.CommandText = "deleteEmployee";
						cm.Parameters.AddWithValue("@EmployeeID", criteria.EmployeeID);
						cm.ExecuteNonQuery();
					}
				}
			}
			catch (Exception ex)
			{
				Database.LogException("Employee.DataPortal_Delete", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("Employee.DataPortal_Delete", ex);
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		public static void Remove(SqlConnection cn, int employeeID)
		{
			Database.LogInfo("Employee.Remove", 0);
			try
			{
				using (SqlCommand cm = cn.CreateCommand())
				{
					cm.CommandType = CommandType.StoredProcedure;
					cm.CommandText = "deleteEmployee";
					// Input PK Fields
					cm.Parameters.AddWithValue("@EmployeeID", employeeID);
					// TODO: Define any additional output parameters
					cm.ExecuteNonQuery();
				}
			}
			catch (Exception ex)
			{
				Database.LogException("Employee.Remove", ex);
				throw new DbCslaException("Employee.Remove", ex);
			}
		}
		#endregion
		#region Exists
		public static bool Exists(int employeeID)
		{
			ExistsCommand result;
			try
			{
				result = DataPortal.Execute<ExistsCommand>(new ExistsCommand(employeeID));
				return result.Exists;
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on Employee.Exists", ex);
			}
		}
		[Serializable()]
		private class ExistsCommand : CommandBase
		{
			private int _EmployeeID;
			private bool _exists;
			public bool Exists
			{
				get { return _exists; }
			}
			public ExistsCommand(int employeeID)
			{
				_EmployeeID = employeeID;
			}
			protected override void DataPortal_Execute()
			{
				Database.LogInfo("Employee.DataPortal_Execute", GetHashCode());
				try
				{
					using (SqlConnection cn = Database.Northwind_SqlConnection)
					{
						cn.Open();
						using (SqlCommand cm = cn.CreateCommand())
						{
							cm.CommandType = CommandType.StoredProcedure;
							cm.CommandText = "existsEmployee";
							cm.Parameters.AddWithValue("@EmployeeID", _EmployeeID);
							int count = (int)cm.ExecuteScalar();
							_exists = (count > 0);
						}
					}
				}
				catch (Exception ex)
				{
					Database.LogException("Employee.DataPortal_Execute", ex);
					throw new DbCslaException("Employee.DataPortal_Execute", ex);
				}
			}
		}
		#endregion
		// Standard Default Code
		#region extension
		EmployeeExtension _EmployeeExtension = new EmployeeExtension();
		[Serializable()]
		partial class EmployeeExtension : extensionBase
		{
		}
		[Serializable()]
		class extensionBase
		{
			// Default Values
			// Authorization Rules
			public virtual void AddAuthorizationRules(Csla.Security.AuthorizationRules rules)
			{
				// Needs to be overriden to add new authorization rules
			}
			// Instance Authorization Rules
			public virtual void AddInstanceAuthorizationRules(Csla.Security.AuthorizationRules rules)
			{
				// Needs to be overriden to add new authorization rules
			}
			// Validation Rules
			public virtual void AddValidationRules(Csla.Validation.ValidationRules rules)
			{
				// Needs to be overriden to add new validation rules
			}
			// InstanceValidation Rules
			public virtual void AddInstanceValidationRules(Csla.Validation.ValidationRules rules)
			{
				// Needs to be overriden to add new validation rules
			}
		}
		#endregion
	} // Class
	#region Converter
	internal class EmployeeConverter : ExpandableObjectConverter
	{
		public override object ConvertTo(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destType)
		{
			if (destType == typeof(string) && value is Employee)
			{
				// Return the ToString value
				return ((Employee)value).ToString();
			}
			return base.ConvertTo(context, culture, value, destType);
		}
	}
	#endregion
} // Namespace


//// The following is a sample Extension File.  You can use it to create EmployeeExt.cs
//using System;
//using System.Collections.Generic;
//using System.Text;
//using Csla;

//namespace Northwind.CSLA.Library
//{
//  public partial class Employee
//  {
//    partial class EmployeeExtension : extensionBase
//    {
//      // TODO: Override automatic defaults
//      public new void AddAuthorizationRules(Csla.Security.AuthorizationRules rules)
//      {
//        //rules.AllowRead(Dbid, "<Role(s)>");
//      }
//      public new void AddInstanceAuthorizationRules(Csla.Security.AuthorizationRules rules)
//      {
//        //rules.AllowInstanceRead(Dbid, "<Role(s)>");
//      }
//      public new void AddValidationRules(Csla.Validation.ValidationRules rules)
//      {
//        rules.AddRule(
//          Csla.Validation.CommonRules.StringMaxLength,
//          new Csla.Validation.CommonRules.MaxLengthRuleArgs("Name", 100));
//      }
//      public new void AddInstanceValidationRules(Csla.Validation.ValidationRules rules)
//      {
//        rules.AddInstanceRule(/* Instance Validation Rule */);
//      }
//    }
//  }
//}
