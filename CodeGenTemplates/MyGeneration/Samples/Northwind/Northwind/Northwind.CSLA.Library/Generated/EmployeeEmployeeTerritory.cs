
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using System.Configuration;
using System.IO;
using System.ComponentModel;
using Csla.Validation;
namespace Northwind.CSLA.Library
{
	/// <summary>
	///	EmployeeEmployeeTerritory Generated by MyGeneration using the CSLA Object Mapping template
	/// </summary>
	[Serializable()]
	[TypeConverter(typeof(EmployeeEmployeeTerritoryConverter))]
	public partial class EmployeeEmployeeTerritory : BusinessBase<EmployeeEmployeeTerritory>, IVEHasBrokenRules
	{
		#region Business Methods
		private string _ErrorMessage = string.Empty;
		public string ErrorMessage
		{
			get { return _ErrorMessage; }
		}
		private string _TerritoryID = string.Empty;
		[System.ComponentModel.DataObjectField(true, true)]
		public string TerritoryID
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyTerritory != null) _TerritoryID = _MyTerritory.TerritoryID;
				return _TerritoryID;
			}
		}
		private Territory _MyTerritory;
		[System.ComponentModel.DataObjectField(true, true)]
		public Territory MyTerritory
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyTerritory == null && _TerritoryID != null) _MyTerritory = Territory.Get(_TerritoryID);
				return _MyTerritory;
			}
		}
		private string _Territory_TerritoryDescription = string.Empty;
		public string Territory_TerritoryDescription
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Territory_TerritoryDescription;
			}
		}
		private int _Territory_RegionID;
		public int Territory_RegionID
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Territory_RegionID;
			}
		}
		// TODO: Check EmployeeEmployeeTerritory.GetIdValue to assure that the ID returned is unique
		/// <summary>
		/// Overrides Base GetIdValue - Used internally by CSLA to determine equality
		/// </summary>
		/// <returns>A Unique ID for the current EmployeeEmployeeTerritory</returns>
		protected override object GetIdValue()
		{
			return _TerritoryID;
		}
		// TODO: Replace base EmployeeEmployeeTerritory.ToString function as necessary
		/// <summary>
		/// Overrides Base ToString
		/// </summary>
		/// <returns>A string representation of current EmployeeEmployeeTerritory</returns>
		//public override string ToString()
		//{
		//  return base.ToString();
		//}
		#endregion
		#region ValidationRules
		[NonSerialized]
		private bool _CheckingBrokenRules=false;
		public IVEHasBrokenRules HasBrokenRules
		{
			get
			{
				if(_CheckingBrokenRules)return null;
				if (BrokenRulesCollection.Count > 0) return this;
				try
				{
					_CheckingBrokenRules=true;
				 IVEHasBrokenRules hasBrokenRules = null;
				 return hasBrokenRules;
				}
				finally
				{
					_CheckingBrokenRules=false;
				}
			}
		}
		public BrokenRulesCollection BrokenRules
		{
			get
			{
				IVEHasBrokenRules hasBrokenRules = HasBrokenRules;
				if (this.Equals(hasBrokenRules)) return BrokenRulesCollection;
				return (hasBrokenRules != null ? hasBrokenRules.BrokenRules : null);
			}
		}
		protected override void AddBusinessRules()
		{
			// TODO:  Add other validation rules
		}
		// Sample data comparison validation rule
		//private bool StartDateGTEndDate(object target, Csla.Validation.RuleArgs e)
		//{
		//	if (_started > _ended)
		//	{
		//		e.Description = "Start date can't be after end date";
		//		return false;
		//	}
		//	else
		//		return true;
		//}
		#endregion
		#region Authorization Rules
		protected override void AddAuthorizationRules()
		{
			//TODO: Who can read/write which fields
			//AuthorizationRules.AllowRead(TerritoryID, "<Role(s)>");
		}
		public static bool CanAddObject()
		{
			// TODO: Can Add Authorization
			//return Csla.ApplicationContext.User.IsInRole("ProjectManager");
			return true;
		}
		public static bool CanGetObject()
		{
			// TODO: CanGet Authorization
			return true;
		}
		public static bool CanDeleteObject()
		{
			// TODO: CanDelete Authorization
			//bool result = false;
			//if (Csla.ApplicationContext.User.IsInRole("ProjectManager"))result = true;
			//if (Csla.ApplicationContext.User.IsInRole("Administrator"))result = true;
			//return result;
			return true;
		}
		public static bool CanEditObject()
		{
			// TODO: CanEdit Authorization
			//return Csla.ApplicationContext.User.IsInRole("ProjectManager");
			return true;
		}
		#endregion
		#region Factory Methods
		public int CurrentEditLevel
		{ get { return EditLevel; } }
		internal static EmployeeEmployeeTerritory New(Territory myTerritory)
		{
			return new EmployeeEmployeeTerritory(myTerritory);
		}
		internal static EmployeeEmployeeTerritory Get(SafeDataReader dr)
		{
			return new EmployeeEmployeeTerritory(dr);
		}
		public EmployeeEmployeeTerritory()
		{
			MarkAsChild();


			ValidationRules.CheckRules();
		}
		private EmployeeEmployeeTerritory(Territory myTerritory)
		{
			MarkAsChild();
			// TODO: Add any initialization & defaults

			_MyTerritory  = myTerritory;
			ValidationRules.CheckRules();
		}
		internal EmployeeEmployeeTerritory(SafeDataReader dr)
		{
			MarkAsChild();
			Fetch(dr);
		}
		#endregion
		#region Data Access Portal
		private void Fetch(SafeDataReader dr)
		{
			Database.LogInfo("EmployeeEmployeeTerritory.FetchDR", GetHashCode());
			try
			{
				_TerritoryID = dr.GetString("TerritoryID");
				_Territory_TerritoryDescription = dr.GetString("Territory_TerritoryDescription");
				_Territory_RegionID = dr.GetInt32("Territory_RegionID");
			}
			catch (Exception ex) // FKItem Fetch
			{
				Database.LogException("EmployeeEmployeeTerritory.FetchDR", ex);
				throw new DbCslaException("EmployeeEmployeeTerritory.Fetch", ex);
			}
			MarkOld();
		}
		internal void Insert(Employee myEmployee)
		{
			// if we're not dirty then don't update the database
			if (!this.IsDirty) return;
			SqlConnection cn = (SqlConnection)ApplicationContext.LocalContext["cn"];
			EmployeeTerritory.Add(cn, myEmployee, _MyTerritory);
			MarkOld();
		}
		internal void Update(Employee myEmployee)
		{
			// if we're not dirty then don't update the database
			if (!this.IsDirty) return;
			SqlConnection cn = (SqlConnection)ApplicationContext.LocalContext["cn"];
			EmployeeTerritory.Update(cn, myEmployee, _MyTerritory);
			MarkOld();
		}
		internal void DeleteSelf(Employee myEmployee)
		{
			// if we're not dirty then don't update the database
			if (!this.IsDirty) return;
			// if we're new then don't update the database
			if (this.IsNew) return;
			SqlConnection cn = (SqlConnection)ApplicationContext.LocalContext["cn"];
			EmployeeTerritory.Remove(cn, myEmployee.EmployeeID, _TerritoryID);
			MarkNew();
		}
		#endregion
		// Standard Default Code
		#region extension
		EmployeeEmployeeTerritoryExtension _EmployeeEmployeeTerritoryExtension = new EmployeeEmployeeTerritoryExtension();
		[Serializable()]
		partial class EmployeeEmployeeTerritoryExtension : extensionBase
		{
		}
		[Serializable()]
		class extensionBase
		{
			// Default Values
			// Authorization Rules
			public virtual void AddAuthorizationRules(Csla.Security.AuthorizationRules rules)
			{
				// Needs to be overriden to add new authorization rules
			}
			// Instance Authorization Rules
			public virtual void AddInstanceAuthorizationRules(Csla.Security.AuthorizationRules rules)
			{
				// Needs to be overriden to add new authorization rules
			}
			// Validation Rules
			public virtual void AddValidationRules(Csla.Validation.ValidationRules rules)
			{
				// Needs to be overriden to add new validation rules
			}
			// InstanceValidation Rules
			public virtual void AddInstanceValidationRules(Csla.Validation.ValidationRules rules)
			{
				// Needs to be overriden to add new validation rules
			}
		}
		#endregion
	} // Class
	#region Converter
	internal class EmployeeEmployeeTerritoryConverter : ExpandableObjectConverter
	{
		public override object ConvertTo(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destType)
		{
			if (destType == typeof(string) && value is EmployeeEmployeeTerritory)
			{
				// Return the ToString value
				return ((EmployeeEmployeeTerritory)value).ToString();
			}
			return base.ConvertTo(context, culture, value, destType);
		}
	}
	#endregion
} // Namespace


//// The following is a sample Extension File.  You can use it to create EmployeeEmployeeTerritoryExt.cs
//using System;
//using System.Collections.Generic;
//using System.Text;
//using Csla;

//namespace Northwind.CSLA.Library
//{
//  public partial class EmployeeEmployeeTerritory
//  {
//    partial class EmployeeEmployeeTerritoryExtension : extensionBase
//    {
//      // TODO: Override automatic defaults
//      public new void AddAuthorizationRules(Csla.Security.AuthorizationRules rules)
//      {
//        //rules.AllowRead(Dbid, "<Role(s)>");
//      }
//      public new void AddInstanceAuthorizationRules(Csla.Security.AuthorizationRules rules)
//      {
//        //rules.AllowInstanceRead(Dbid, "<Role(s)>");
//      }
//      public new void AddValidationRules(Csla.Validation.ValidationRules rules)
//      {
//        rules.AddRule(
//          Csla.Validation.CommonRules.StringMaxLength,
//          new Csla.Validation.CommonRules.MaxLengthRuleArgs("Name", 100));
//      }
//      public new void AddInstanceValidationRules(Csla.Validation.ValidationRules rules)
//      {
//        rules.AddInstanceRule(/* Instance Validation Rule */);
//      }
//    }
//  }
//}
