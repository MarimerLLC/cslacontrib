
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using System.Configuration;
using System.IO;
using System.ComponentModel;
using System.Collections.Generic;
using Csla.Validation;
namespace Northwind.CSLA.Library
{
	/// <summary>
	///	OrderDetail Generated by MyGeneration using the CSLA Object Mapping template
	/// </summary>
	[Serializable()]
	[TypeConverter(typeof(OrderDetailConverter))]
	public partial class OrderDetail : BusinessBase<OrderDetail>, IDisposable, IVEHasBrokenRules
	{
		#region Refresh
		private List<OrderDetail> _RefreshOrderDetails = new List<OrderDetail>();
		private void AddToRefreshList(List<OrderDetail> refreshOrderDetails)
		{
			if (IsDirty)
				refreshOrderDetails.Add(this);
		}
		private void BuildRefreshList()
		{
			_RefreshOrderDetails = new List<OrderDetail>();
			AddToRefreshList(_RefreshOrderDetails);
		}
		private void ProcessRefreshList()
		{
			foreach (OrderDetail tmp in _RefreshOrderDetails)
			{
				OrderDetailInfo.Refresh(tmp);
				if(tmp._MyOrder != null) OrderInfo.Refresh(tmp._MyOrder);
				if(tmp._MyProduct != null) ProductInfo.Refresh(tmp._MyProduct);
			}
		}
		#endregion
		#region Collection
		protected static List<OrderDetail> _AllList = new List<OrderDetail>();
		private static Dictionary<string, OrderDetail> _AllByPrimaryKey = new Dictionary<string, OrderDetail>();
		private static void ConvertListToDictionary()
		{
			List<OrderDetail> remove = new List<OrderDetail>();
			foreach (OrderDetail tmp in _AllList)
			{
				_AllByPrimaryKey[tmp.OrderID.ToString() + "_" + tmp.ProductID.ToString()]=tmp; // Primary Key
				remove.Add(tmp);
			}
			foreach (OrderDetail tmp in remove)
				_AllList.Remove(tmp);
		}
		public static OrderDetail GetExistingByPrimaryKey(int orderID, int productID)
		{
			ConvertListToDictionary();
			string key = orderID.ToString() + "_" + productID.ToString();
			if (_AllByPrimaryKey.ContainsKey(key)) return _AllByPrimaryKey[key]; 
			return null;
		}
		#endregion
		#region Business Methods
		private string _ErrorMessage = string.Empty;
		public string ErrorMessage
		{
			get { return _ErrorMessage; }
		}
		private int _OrderID;
		[System.ComponentModel.DataObjectField(true, true)]
		public int OrderID
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyOrder != null) _OrderID = _MyOrder.OrderID;
				return _OrderID;
			}
		}
		private Order _MyOrder;
		[System.ComponentModel.DataObjectField(true, true)]
		public Order MyOrder
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyOrder == null && _OrderID != 0) _MyOrder = Order.Get(_OrderID);
				return _MyOrder;
			}
		}
		private int _ProductID;
		[System.ComponentModel.DataObjectField(true, true)]
		public int ProductID
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyProduct != null) _ProductID = _MyProduct.ProductID;
				return _ProductID;
			}
		}
		private Product _MyProduct;
		[System.ComponentModel.DataObjectField(true, true)]
		public Product MyProduct
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyProduct == null && _ProductID != 0) _MyProduct = Product.Get(_ProductID);
				return _MyProduct;
			}
		}
		private decimal _UnitPrice;
		public decimal UnitPrice
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _UnitPrice;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (_UnitPrice != value)
				{
					_UnitPrice = value;
					PropertyHasChanged();
				}
			}
		}
		private Int16 _Quantity;
		public Int16 Quantity
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Quantity;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (_Quantity != value)
				{
					_Quantity = value;
					PropertyHasChanged();
				}
			}
		}
		private float _Discount;
		public float Discount
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Discount;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (_Discount != value)
				{
					_Discount = value;
					PropertyHasChanged();
				}
			}
		}
		public override bool IsDirty
		{
			get { return base.IsDirty || (_MyOrder == null? false : _MyOrder.IsDirty) || (_MyProduct == null? false : _MyProduct.IsDirty); }
		}
		public override bool IsValid
		{
			get { return (IsNew && !IsDirty ? true : base.IsValid) && (_MyOrder == null? true : _MyOrder.IsValid) && (_MyProduct == null? true : _MyProduct.IsValid); }
		}
		// TODO: Replace base OrderDetail.ToString function as necessary
		/// <summary>
		/// Overrides Base ToString
		/// </summary>
		/// <returns>A string representation of current OrderDetail</returns>
		//public override string ToString()
		//{
		//  return base.ToString();
		//}
		// TODO: Check OrderDetail.GetIdValue to assure that the ID returned is unique
		/// <summary>
		/// Overrides Base GetIdValue - Used internally by CSLA to determine equality
		/// </summary>
		/// <returns>A Unique ID for the current OrderDetail</returns>
		protected override object GetIdValue()
		{
			return (_OrderID.ToString()+"."+_ProductID.ToString()).GetHashCode();
		}
		#endregion
		#region ValidationRules
		[NonSerialized]
		private bool _CheckingBrokenRules=false;
		public IVEHasBrokenRules HasBrokenRules
		{
			get {
				if(_CheckingBrokenRules)return null;
				if ((IsDirty || !IsNew) && BrokenRulesCollection.Count > 0) return this;
				try
				{
					_CheckingBrokenRules=true;
					IVEHasBrokenRules hasBrokenRules = null;
					return hasBrokenRules;
				}
				finally
				{
					_CheckingBrokenRules=false;
				}
			}
		}
		public BrokenRulesCollection BrokenRules
		{
			get
			{
				IVEHasBrokenRules hasBrokenRules = HasBrokenRules;
				if (this.Equals(hasBrokenRules)) return BrokenRulesCollection;
				return (hasBrokenRules != null ? hasBrokenRules.BrokenRules : null);
			}
		}
		protected override void AddBusinessRules()
		{
			//ValidationRules.AddDependantProperty("x", "y");
			_OrderDetailExtension.AddValidationRules(ValidationRules);
			// TODO:  Add other validation rules
		}
		protected override void AddInstanceBusinessRules()
		{
			_OrderDetailExtension.AddInstanceValidationRules(ValidationRules);
			// TODO:  Add other validation rules
		}
		// Sample data comparison validation rule
		//private bool StartDateGTEndDate(object target, Csla.Validation.RuleArgs e)
		//{
		//	if (_started > _ended)
		//	{
		//		e.Description = "Start date can't be after end date";
		//		return false;
		//	}
		//	else
		//		return true;
		//}
		#endregion
		#region Authorization Rules
		protected override void AddAuthorizationRules()
		{
			//TODO: Who can read/write which fields
			//AuthorizationRules.AllowRead(OrderID, "<Role(s)>");
			//AuthorizationRules.AllowRead(ProductID, "<Role(s)>");
			//AuthorizationRules.AllowRead(UnitPrice, "<Role(s)>");
			//AuthorizationRules.AllowRead(Quantity, "<Role(s)>");
			//AuthorizationRules.AllowRead(Discount, "<Role(s)>");
			//AuthorizationRules.AllowWrite(UnitPrice, "<Role(s)>");
			//AuthorizationRules.AllowWrite(Quantity, "<Role(s)>");
			//AuthorizationRules.AllowWrite(Discount, "<Role(s)>");
			_OrderDetailExtension.AddAuthorizationRules(AuthorizationRules);
		}
		protected override void AddInstanceAuthorizationRules()
		{
			//TODO: Who can read/write which fields
			_OrderDetailExtension.AddInstanceAuthorizationRules(AuthorizationRules);
		}
		public static bool CanAddObject()
		{
			// TODO: Can Add Authorization
			//return Csla.ApplicationContext.User.IsInRole("ProjectManager");
			return true;
		}
		public static bool CanGetObject()
		{
			// TODO: CanGet Authorization
			return true;
		}
		public static bool CanDeleteObject()
		{
			// TODO: CanDelete Authorization
			//bool result = false;
			//if (Csla.ApplicationContext.User.IsInRole("ProjectManager"))result = true;
			//if (Csla.ApplicationContext.User.IsInRole("Administrator"))result = true;
			//return result;
			return true;
		}
		public static bool CanEditObject()
		{
			// TODO: CanEdit Authorization
			//return Csla.ApplicationContext.User.IsInRole("ProjectManager");
			return true;
		}
		#endregion
		#region Factory Methods
		public int CurrentEditLevel
		{ get { return EditLevel; } }
		protected OrderDetail()
		{/* require use of factory methods */
			_AllList.Add(this);
		}
		public void Dispose()
		{
			_AllList.Remove(this);
			_AllByPrimaryKey.Remove(OrderID.ToString() + "_" + ProductID.ToString());
		}
		public static OrderDetail New()
		{
			if (!CanAddObject())
				throw new System.Security.SecurityException("User not authorized to add a OrderDetail");
			try
			{
				return DataPortal.Create<OrderDetail>();
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on OrderDetail.New", ex);
			}
		}
		public static OrderDetail New(Order myOrder, Product myProduct)
		{
			OrderDetail tmp = OrderDetail.New();
			tmp._MyOrder = myOrder;
			tmp._MyProduct = myProduct;
			return tmp;
		}
		public static OrderDetail New(Order myOrder, Product myProduct, decimal unitPrice, Int16 quantity, float discount)
		{
			OrderDetail tmp = OrderDetail.New();
			tmp._MyOrder = myOrder;
			tmp._MyProduct = myProduct;
			tmp.UnitPrice = unitPrice;
			tmp.Quantity = quantity;
			tmp.Discount = discount;
			return tmp;
		}
		public static OrderDetail MakeOrderDetail(Order myOrder, Product myProduct, decimal unitPrice, Int16 quantity, float discount)
		{
			OrderDetail tmp = OrderDetail.New(myOrder, myProduct, unitPrice, quantity, discount);
			if (tmp.IsSavable)
				tmp = tmp.Save();
			else
			{
				Csla.Validation.BrokenRulesCollection brc = tmp.ValidationRules.GetBrokenRules();
				tmp._ErrorMessage = "Failed Validation:";
				foreach (Csla.Validation.BrokenRule br in brc)
				{
					tmp._ErrorMessage += "\r\n\tFailure: " + br.RuleName;
				}
			}
			return tmp;
		}
		public static OrderDetail Get(int orderID, int productID)
		{
			if (!CanGetObject())
				throw new System.Security.SecurityException("User not authorized to view a OrderDetail");
			try
			{
				OrderDetail tmp = GetExistingByPrimaryKey(orderID, productID);
				if (tmp == null)
				{
					tmp = DataPortal.Fetch<OrderDetail>(new PKCriteria(orderID, productID));
					_AllList.Add(tmp);
				}
				if (tmp.ErrorMessage == "No Record Found") tmp = null;
				return tmp;
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on OrderDetail.Get", ex);
			}
		}
		public static OrderDetail Get(SafeDataReader dr)
		{
			if (dr.Read()) return new OrderDetail(dr);
			return null;
		}
		internal OrderDetail(SafeDataReader dr)
		{
			ReadData(dr);
		}
		public static void Delete(int orderID, int productID)
		{
			if (!CanDeleteObject())
				throw new System.Security.SecurityException("User not authorized to remove a OrderDetail");
			try
			{
				DataPortal.Delete(new PKCriteria(orderID, productID));
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on OrderDetail.Delete", ex);
			}
		}
		public override OrderDetail Save()
		{
			if (IsDeleted && !CanDeleteObject())
				throw new System.Security.SecurityException("User not authorized to remove a OrderDetail");
			else if (IsNew && !CanAddObject())
				throw new System.Security.SecurityException("User not authorized to add a OrderDetail");
			else if (!CanEditObject())
				throw new System.Security.SecurityException("User not authorized to update a OrderDetail");
			try
			{
				BuildRefreshList();
				OrderDetail orderDetail = base.Save();
				_AllList.Add(orderDetail);//Refresh the item in AllList
				ProcessRefreshList();
				return orderDetail;
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on CSLA Save", ex);
			}
		}
		#endregion
		#region Data Access Portal
		[Serializable()]
		protected class PKCriteria
		{
			private int _OrderID;
			public int OrderID
			{ get { return _OrderID; } }
			private int _ProductID;
			public int ProductID
			{ get { return _ProductID; } }
			public PKCriteria(int orderID, int productID)
			{
				_OrderID = orderID;
				_ProductID = productID;
			}
		}
		// TODO: If Create needs to access DB - It should not be marked RunLocal
		[RunLocal()]
		private new void DataPortal_Create()
		{

			// Database Defaults
			_UnitPrice = _OrderDetailExtension.DefaultUnitPrice;
			_Quantity = _OrderDetailExtension.DefaultQuantity;
			_Discount = _OrderDetailExtension.DefaultDiscount;
			// TODO: Add any defaults that are necessary
			ValidationRules.CheckRules();
		}
		private void ReadData(SafeDataReader dr)
		{
			Database.LogInfo("OrderDetail.ReadData", GetHashCode());
			try
			{
				_OrderID = dr.GetInt32("OrderID");
				_ProductID = dr.GetInt32("ProductID");
				_UnitPrice = dr.GetDecimal("UnitPrice");
				_Quantity = dr.GetInt16("Quantity");
				_Discount = dr.GetFloat("Discount");
				MarkOld();
			}
			catch (Exception ex)
			{
				Database.LogException("OrderDetail.ReadData", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("OrderDetail.ReadData", ex);
			}
		}
		private void DataPortal_Fetch(PKCriteria criteria)
		{
			Database.LogInfo("OrderDetail.DataPortal_Fetch", GetHashCode());
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					ApplicationContext.LocalContext["cn"] = cn;
					using (SqlCommand cm = cn.CreateCommand())
					{
						cm.CommandType = CommandType.StoredProcedure;
						cm.CommandText = "getOrderDetail";
						cm.Parameters.AddWithValue("@OrderID", criteria.OrderID);
						cm.Parameters.AddWithValue("@ProductID", criteria.ProductID);
						using (SafeDataReader dr = new SafeDataReader(cm.ExecuteReader()))
						{
							if (!dr.Read())
							{
								_ErrorMessage = "No Record Found";
								return;
							}
							ReadData(dr);
						}
					}
					// removing of item only needed for local data portal
					if (ApplicationContext.ExecutionLocation == ApplicationContext.ExecutionLocations.Client)
						ApplicationContext.LocalContext.Remove("cn");
				}
			}
			catch (Exception ex)
			{
				Database.LogException("OrderDetail.DataPortal_Fetch", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("OrderDetail.DataPortal_Fetch", ex);
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		protected override void DataPortal_Insert()
		{
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					ApplicationContext.LocalContext["cn"] = cn;
					SQLInsert();
					// removing of item only needed for local data portal
					if (ApplicationContext.ExecutionLocation == ApplicationContext.ExecutionLocations.Client)
						ApplicationContext.LocalContext.Remove("cn");
				}
			}
			catch (Exception ex)
			{
				Database.LogException("OrderDetail.DataPortal_Insert", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("OrderDetail.DataPortal_Insert", ex);
			}
			finally
			{
				Database.LogInfo("OrderDetail.DataPortal_Insert", GetHashCode());
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		internal void SQLInsert()
		{
			if (!this.IsDirty) return;
			try
			{
				if(_MyOrder != null) _MyOrder.Update();
				if(_MyProduct != null) _MyProduct.Update();
				SqlConnection cn = (SqlConnection)ApplicationContext.LocalContext["cn"];
				using (SqlCommand cm = cn.CreateCommand())
				{
					cm.CommandType = CommandType.StoredProcedure;
					cm.CommandText = "addOrderDetail";
					// Input All Fields - Except Calculated Columns
					cm.Parameters.AddWithValue("@OrderID", OrderID);
					cm.Parameters.AddWithValue("@ProductID", ProductID);
					cm.Parameters.AddWithValue("@UnitPrice", _UnitPrice);
					cm.Parameters.AddWithValue("@Quantity", _Quantity);
					cm.Parameters.AddWithValue("@Discount", _Discount);
					// Output Calculated Columns
					// TODO: Define any additional output parameters
					cm.ExecuteNonQuery();
					// Save all values being returned from the Procedure
				}
				MarkOld();
				// update child objects
				Database.LogInfo("OrderDetail.SQLInsert", GetHashCode());
			}
			catch (Exception ex)
			{
				Database.LogException("OrderDetail.SQLInsert", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("OrderDetail.SQLInsert", ex);
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		public static void Add(SqlConnection cn, Order myOrder, Product myProduct, decimal unitPrice, Int16 quantity, float discount)
		{
			Database.LogInfo("OrderDetail.Add", 0);
			try
			{
				using (SqlCommand cm = cn.CreateCommand())
				{
					cm.CommandType = CommandType.StoredProcedure;
					cm.CommandText = "addOrderDetail";
					// Input All Fields - Except Calculated Columns
					cm.Parameters.AddWithValue("@OrderID", myOrder.OrderID);
					cm.Parameters.AddWithValue("@ProductID", myProduct.ProductID);
					cm.Parameters.AddWithValue("@UnitPrice", unitPrice);
					cm.Parameters.AddWithValue("@Quantity", quantity);
					cm.Parameters.AddWithValue("@Discount", discount);
					// Output Calculated Columns
					// TODO: Define any additional output parameters
					cm.ExecuteNonQuery();
					// Save all values being returned from the Procedure
			// No Timestamp value to return
				}
			}
			catch (Exception ex)
			{
				Database.LogException("OrderDetail.Add", ex);
				throw new DbCslaException("OrderDetail.Add", ex);
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		protected override void DataPortal_Update()
		{
			if (!IsDirty) return;	// If not dirty - nothing to do
			Database.LogInfo("OrderDetail.DataPortal_Update", GetHashCode());
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					ApplicationContext.LocalContext["cn"] = cn;
					SQLUpdate();
					// removing of item only needed for local data portal
					if (ApplicationContext.ExecutionLocation == ApplicationContext.ExecutionLocations.Client)
						ApplicationContext.LocalContext.Remove("cn");
				}
			}
			catch (Exception ex)
			{
				Database.LogException("OrderDetail.DataPortal_Update", ex);
				_ErrorMessage = ex.Message;
				if (!ex.Message.EndsWith("has been edited by another user.")) throw ex;
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		internal void SQLUpdate()
		{
			if (!IsDirty) return;	// If not dirty - nothing to do
			Database.LogInfo("OrderDetail.SQLUpdate", GetHashCode());
			try
			{
				if(_MyOrder != null) _MyOrder.Update();
				if(_MyProduct != null) _MyProduct.Update();
				SqlConnection cn = (SqlConnection)ApplicationContext.LocalContext["cn"];
				if (base.IsDirty)
				{
					using (SqlCommand cm = cn.CreateCommand())
					{
						cm.CommandType = CommandType.StoredProcedure;
						cm.CommandText = "updateOrderDetail";
						// All Fields including Calculated Fields
						cm.Parameters.AddWithValue("@OrderID", OrderID);
						cm.Parameters.AddWithValue("@ProductID", ProductID);
						cm.Parameters.AddWithValue("@UnitPrice", _UnitPrice);
						cm.Parameters.AddWithValue("@Quantity", _Quantity);
						cm.Parameters.AddWithValue("@Discount", _Discount);
						// Output Calculated Columns
						// TODO: Define any additional output parameters
						cm.ExecuteNonQuery();
						// Save all values being returned from the Procedure
					}
				}
				MarkOld();
				// use the open connection to update child objects
			}
			catch (Exception ex)
			{
				Database.LogException("OrderDetail.SQLUpdate", ex);
				_ErrorMessage = ex.Message;
				if (!ex.Message.EndsWith("has been edited by another user.")) throw ex;
			}
		}
		internal void Update()
		{
			if (!this.IsDirty) return;
			if (base.IsDirty)
			{
				SqlConnection cn = (SqlConnection)ApplicationContext.LocalContext["cn"];
				if (IsNew)
					OrderDetail.Add(cn, _MyOrder, _MyProduct, _UnitPrice, _Quantity, _Discount);
				else
					OrderDetail.Update(cn, _MyOrder, _MyProduct, _UnitPrice, _Quantity, _Discount);
				MarkOld();
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		public static void Update(SqlConnection cn, Order myOrder, Product myProduct, decimal unitPrice, Int16 quantity, float discount)
		{
			Database.LogInfo("OrderDetail.Update", 0);
			try
			{
				using (SqlCommand cm = cn.CreateCommand())
				{
					cm.CommandType = CommandType.StoredProcedure;
					cm.CommandText = "updateOrderDetail";
					// Input All Fields - Except Calculated Columns
					cm.Parameters.AddWithValue("@OrderID", myOrder.OrderID);
					cm.Parameters.AddWithValue("@ProductID", myProduct.ProductID);
					cm.Parameters.AddWithValue("@UnitPrice", unitPrice);
					cm.Parameters.AddWithValue("@Quantity", quantity);
					cm.Parameters.AddWithValue("@Discount", discount);
					// Output Calculated Columns
					// TODO: Define any additional output parameters
					cm.ExecuteNonQuery();
					// Save all values being returned from the Procedure
				// No Timestamp value to return
				}
			}
			catch (Exception ex)
			{
				Database.LogException("OrderDetail.Update", ex);
				throw new DbCslaException("OrderDetail.Update", ex);
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		protected override void DataPortal_DeleteSelf()
		{
			DataPortal_Delete(new PKCriteria(_OrderID, _ProductID));
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		private void DataPortal_Delete(PKCriteria criteria)
		{
			Database.LogInfo("OrderDetail.DataPortal_Delete", GetHashCode());
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					using (SqlCommand cm = cn.CreateCommand())
					{
						cm.CommandType = CommandType.StoredProcedure;
						cm.CommandText = "deleteOrderDetail";
						cm.Parameters.AddWithValue("@OrderID", criteria.OrderID);
						cm.Parameters.AddWithValue("@ProductID", criteria.ProductID);
						cm.ExecuteNonQuery();
					}
				}
			}
			catch (Exception ex)
			{
				Database.LogException("OrderDetail.DataPortal_Delete", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("OrderDetail.DataPortal_Delete", ex);
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		public static void Remove(SqlConnection cn, int orderID, int productID)
		{
			Database.LogInfo("OrderDetail.Remove", 0);
			try
			{
				using (SqlCommand cm = cn.CreateCommand())
				{
					cm.CommandType = CommandType.StoredProcedure;
					cm.CommandText = "deleteOrderDetail";
					// Input PK Fields
					cm.Parameters.AddWithValue("@OrderID", orderID);
					cm.Parameters.AddWithValue("@ProductID", productID);
					// TODO: Define any additional output parameters
					cm.ExecuteNonQuery();
				}
			}
			catch (Exception ex)
			{
				Database.LogException("OrderDetail.Remove", ex);
				throw new DbCslaException("OrderDetail.Remove", ex);
			}
		}
		#endregion
		#region Exists
		public static bool Exists(int orderID, int productID)
		{
			ExistsCommand result;
			try
			{
				result = DataPortal.Execute<ExistsCommand>(new ExistsCommand(orderID, productID));
				return result.Exists;
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on OrderDetail.Exists", ex);
			}
		}
		[Serializable()]
		private class ExistsCommand : CommandBase
		{
			private int _OrderID;
			private int _ProductID;
			private bool _exists;
			public bool Exists
			{
				get { return _exists; }
			}
			public ExistsCommand(int orderID, int productID)
			{
				_OrderID = orderID;
				_ProductID = productID;
			}
			protected override void DataPortal_Execute()
			{
				Database.LogInfo("OrderDetail.DataPortal_Execute", GetHashCode());
				try
				{
					using (SqlConnection cn = Database.Northwind_SqlConnection)
					{
						cn.Open();
						using (SqlCommand cm = cn.CreateCommand())
						{
							cm.CommandType = CommandType.StoredProcedure;
							cm.CommandText = "existsOrderDetail";
							cm.Parameters.AddWithValue("@OrderID", _OrderID);
							cm.Parameters.AddWithValue("@ProductID", _ProductID);
							int count = (int)cm.ExecuteScalar();
							_exists = (count > 0);
						}
					}
				}
				catch (Exception ex)
				{
					Database.LogException("OrderDetail.DataPortal_Execute", ex);
					throw new DbCslaException("OrderDetail.DataPortal_Execute", ex);
				}
			}
		}
		#endregion
		// Standard Default Code
		#region extension
		OrderDetailExtension _OrderDetailExtension = new OrderDetailExtension();
		[Serializable()]
		partial class OrderDetailExtension : extensionBase
		{
		}
		[Serializable()]
		class extensionBase
		{
			// Default Values
			public virtual decimal DefaultUnitPrice
			{
				get { return 0; }
			}
			public virtual Int16 DefaultQuantity
			{
				get { return 1; }
			}
			public virtual float DefaultDiscount
			{
				get { return 0; }
			}
			// Authorization Rules
			public virtual void AddAuthorizationRules(Csla.Security.AuthorizationRules rules)
			{
				// Needs to be overriden to add new authorization rules
			}
			// Instance Authorization Rules
			public virtual void AddInstanceAuthorizationRules(Csla.Security.AuthorizationRules rules)
			{
				// Needs to be overriden to add new authorization rules
			}
			// Validation Rules
			public virtual void AddValidationRules(Csla.Validation.ValidationRules rules)
			{
				// Needs to be overriden to add new validation rules
			}
			// InstanceValidation Rules
			public virtual void AddInstanceValidationRules(Csla.Validation.ValidationRules rules)
			{
				// Needs to be overriden to add new validation rules
			}
		}
		#endregion
	} // Class
	#region Converter
	internal class OrderDetailConverter : ExpandableObjectConverter
	{
		public override object ConvertTo(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destType)
		{
			if (destType == typeof(string) && value is OrderDetail)
			{
				// Return the ToString value
				return ((OrderDetail)value).ToString();
			}
			return base.ConvertTo(context, culture, value, destType);
		}
	}
	#endregion
} // Namespace


//// The following is a sample Extension File.  You can use it to create OrderDetailExt.cs
//using System;
//using System.Collections.Generic;
//using System.Text;
//using Csla;

//namespace Northwind.CSLA.Library
//{
//  public partial class OrderDetail
//  {
//    partial class OrderDetailExtension : extensionBase
//    {
//      // TODO: Override automatic defaults
//      public virtual decimal DefaultUnitPrice
//      {
//        get { return 0; }
//      }
//      public virtual Int16 DefaultQuantity
//      {
//        get { return 1; }
//      }
//      public virtual float DefaultDiscount
//      {
//        get { return 0; }
//      }
//      public new void AddAuthorizationRules(Csla.Security.AuthorizationRules rules)
//      {
//        //rules.AllowRead(Dbid, "<Role(s)>");
//      }
//      public new void AddInstanceAuthorizationRules(Csla.Security.AuthorizationRules rules)
//      {
//        //rules.AllowInstanceRead(Dbid, "<Role(s)>");
//      }
//      public new void AddValidationRules(Csla.Validation.ValidationRules rules)
//      {
//        rules.AddRule(
//          Csla.Validation.CommonRules.StringMaxLength,
//          new Csla.Validation.CommonRules.MaxLengthRuleArgs("Name", 100));
//      }
//      public new void AddInstanceValidationRules(Csla.Validation.ValidationRules rules)
//      {
//        rules.AddInstanceRule(/* Instance Validation Rule */);
//      }
//    }
//  }
//}
