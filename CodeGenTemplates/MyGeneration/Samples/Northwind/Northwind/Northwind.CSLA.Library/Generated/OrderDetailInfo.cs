
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using System.Configuration;
using System.IO;
using System.ComponentModel;
using System.Collections.Generic;
namespace Northwind.CSLA.Library
{
	public delegate void OrderDetailInfoEvent(object sender);
	/// <summary>
	///	OrderDetailInfo Generated by MyGeneration using the CSLA Object Mapping template
	/// </summary>
	[Serializable()]
	[TypeConverter(typeof(OrderDetailInfoConverter))]
	public partial class OrderDetailInfo : ReadOnlyBase<OrderDetailInfo>, IDisposable
	{
		public event OrderDetailInfoEvent Changed;
		private void OnChange()
		{
			if (Changed != null) Changed(this);
		}
		#region Collection
		protected static List<OrderDetailInfo> _AllList = new List<OrderDetailInfo>();
		private static Dictionary<string, OrderDetailInfo> _AllByPrimaryKey = new Dictionary<string, OrderDetailInfo>();
		private static void ConvertListToDictionary()
		{
			List<OrderDetailInfo> remove = new List<OrderDetailInfo>();
			foreach (OrderDetailInfo tmp in _AllList)
			{
				_AllByPrimaryKey[tmp.OrderID.ToString() + "_" + tmp.ProductID.ToString()]=tmp; // Primary Key
				remove.Add(tmp);
			}
			foreach (OrderDetailInfo tmp in remove)
				_AllList.Remove(tmp);
		}
		internal static void AddList(OrderDetailInfoList lst)
		{
			foreach (OrderDetailInfo item in lst) _AllList.Add(item);
		}
		public static OrderDetailInfo GetExistingByPrimaryKey(int orderID, int productID)
		{
			ConvertListToDictionary();
			string key = orderID.ToString() + "_" + productID.ToString();
			if (_AllByPrimaryKey.ContainsKey(key)) return _AllByPrimaryKey[key]; 
			return null;
		}
		#endregion
		#region Business Methods
		private string _ErrorMessage = string.Empty;
		public string ErrorMessage
		{
			get { return _ErrorMessage; }
		}
		protected OrderDetail _Editable;
		private IVEHasBrokenRules HasBrokenRules
		{
			get
			{
				IVEHasBrokenRules hasBrokenRules = null;
				if (_Editable != null)
					hasBrokenRules = _Editable.HasBrokenRules;
				return hasBrokenRules;
			}
		}
		private int _OrderID;
		[System.ComponentModel.DataObjectField(true, true)]
		public int OrderID
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyOrder != null) _OrderID = _MyOrder.OrderID;
				return _OrderID;
			}
		}
		private OrderInfo _MyOrder;
		[System.ComponentModel.DataObjectField(true, true)]
		public OrderInfo MyOrder
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyOrder == null && _OrderID != 0) _MyOrder = OrderInfo.Get(_OrderID);
				return _MyOrder;
			}
		}
		private int _ProductID;
		[System.ComponentModel.DataObjectField(true, true)]
		public int ProductID
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyProduct != null) _ProductID = _MyProduct.ProductID;
				return _ProductID;
			}
		}
		private ProductInfo _MyProduct;
		[System.ComponentModel.DataObjectField(true, true)]
		public ProductInfo MyProduct
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyProduct == null && _ProductID != 0) _MyProduct = ProductInfo.Get(_ProductID);
				return _MyProduct;
			}
		}
		private decimal _UnitPrice;
		public decimal UnitPrice
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _UnitPrice;
			}
		}
		private Int16 _Quantity;
		public Int16 Quantity
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Quantity;
			}
		}
		private float _Discount;
		public float Discount
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Discount;
			}
		}
		// TODO: Replace base OrderDetailInfo.ToString function as necessary
		/// <summary>
		/// Overrides Base ToString
		/// </summary>
		/// <returns>A string representation of current OrderDetailInfo</returns>
		//public override string ToString()
		//{
		//  return base.ToString();
		//}
		// TODO: Check OrderDetailInfo.GetIdValue to assure that the ID returned is unique
		/// <summary>
		/// Overrides Base GetIdValue - Used internally by CSLA to determine equality
		/// </summary>
		/// <returns>A Unique ID for the current OrderDetailInfo</returns>
		protected override object GetIdValue()
		{
			return (_OrderID.ToString()+"."+_ProductID.ToString()).GetHashCode();
		}
		#endregion
		#region Factory Methods
		private OrderDetailInfo()
		{/* require use of factory methods */
			_AllList.Add(this);
		}
		public void Dispose()
		{
			_AllList.Remove(this);
			_AllByPrimaryKey.Remove(OrderID.ToString() + "_" + ProductID.ToString());
		}
		public virtual OrderDetail Get()
		{
			return _Editable = OrderDetail.Get(_OrderID, _ProductID);
		}
		public static void Refresh(OrderDetail tmp)
		{
			OrderDetailInfo tmpInfo = GetExistingByPrimaryKey(tmp.OrderID, tmp.ProductID);
			if (tmpInfo == null) return;
			tmpInfo.RefreshFields(tmp);
		}
		private void RefreshFields(OrderDetail tmp)
		{
			_UnitPrice = tmp.UnitPrice;
			_Quantity = tmp.Quantity;
			_Discount = tmp.Discount;
			_OrderDetailInfoExtension.Refresh(this);
			_MyOrder = null;
			_MyProduct = null;
			OnChange();// raise an event
		}
		public static void Refresh(Order myOrder, OrderOrderDetail tmp)
		{
			OrderDetailInfo tmpInfo = GetExistingByPrimaryKey(myOrder.OrderID, tmp.ProductID);
			if (tmpInfo == null) return;
			tmpInfo.RefreshFields(tmp);
		}
		private void RefreshFields(OrderOrderDetail tmp)
		{
			_UnitPrice = tmp.UnitPrice;
			_Quantity = tmp.Quantity;
			_Discount = tmp.Discount;
			_OrderDetailInfoExtension.Refresh(this);
			_MyOrder = null;
			_MyProduct = null;
			OnChange();// raise an event
		}
		public static void Refresh(Product myProduct, ProductOrderDetail tmp)
		{
			OrderDetailInfo tmpInfo = GetExistingByPrimaryKey(tmp.OrderID, myProduct.ProductID);
			if (tmpInfo == null) return;
			tmpInfo.RefreshFields(tmp);
		}
		private void RefreshFields(ProductOrderDetail tmp)
		{
			_UnitPrice = tmp.UnitPrice;
			_Quantity = tmp.Quantity;
			_Discount = tmp.Discount;
			_OrderDetailInfoExtension.Refresh(this);
			_MyOrder = null;
			_MyProduct = null;
			OnChange();// raise an event
		}
		public static OrderDetailInfo Get(int orderID, int productID)
		{
			//if (!CanGetObject())
			//  throw new System.Security.SecurityException("User not authorized to view a OrderDetail");
			try
			{
				OrderDetailInfo tmp = GetExistingByPrimaryKey(orderID, productID);
				if (tmp == null)
				{
					tmp = DataPortal.Fetch<OrderDetailInfo>(new PKCriteria(orderID, productID));
					_AllList.Add(tmp);
				}
				if (tmp.ErrorMessage == "No Record Found") tmp = null;
				return tmp;
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on OrderDetailInfo.Get", ex);
			}
		}
		#endregion
		#region Data Access Portal
		internal OrderDetailInfo(SafeDataReader dr)
		{
			Database.LogInfo("OrderDetailInfo.Constructor", GetHashCode());
			try
			{
				ReadData(dr);
			}
			catch (Exception ex)
			{
				Database.LogException("OrderDetailInfo.Constructor", ex);
				throw new DbCslaException("OrderDetailInfo.Constructor", ex);
			}
		}
		[Serializable()]
		protected class PKCriteria
		{
			private int _OrderID;
			public int OrderID
			{ get { return _OrderID; } }
			private int _ProductID;
			public int ProductID
			{ get { return _ProductID; } }
			public PKCriteria(int orderID, int productID)
			{
				_OrderID = orderID;
				_ProductID = productID;
			}
		}
		private void ReadData(SafeDataReader dr)
		{
			Database.LogInfo("OrderDetailInfo.ReadData", GetHashCode());
			try
			{
				_OrderID = dr.GetInt32("OrderID");
				_ProductID = dr.GetInt32("ProductID");
				_UnitPrice = dr.GetDecimal("UnitPrice");
				_Quantity = dr.GetInt16("Quantity");
				_Discount = dr.GetFloat("Discount");
			}
			catch (Exception ex)
			{
				Database.LogException("OrderDetailInfo.ReadData", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("OrderDetailInfo.ReadData", ex);
			}
		}
		private void DataPortal_Fetch(PKCriteria criteria)
		{
			Database.LogInfo("OrderDetailInfo.DataPortal_Fetch", GetHashCode());
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					ApplicationContext.LocalContext["cn"] = cn;
					using (SqlCommand cm = cn.CreateCommand())
					{
						cm.CommandType = CommandType.StoredProcedure;
						cm.CommandText = "getOrderDetail";
						cm.Parameters.AddWithValue("@OrderID", criteria.OrderID);
						cm.Parameters.AddWithValue("@ProductID", criteria.ProductID);
						using (SafeDataReader dr = new SafeDataReader(cm.ExecuteReader()))
						{
							if (!dr.Read())
							{
								_ErrorMessage = "No Record Found";
								return;
							}
							ReadData(dr);
						}
					}
					// removing of item only needed for local data portal
					if (ApplicationContext.ExecutionLocation == ApplicationContext.ExecutionLocations.Client)
						ApplicationContext.LocalContext.Remove("cn");
				}
			}
			catch (Exception ex)
			{
				Database.LogException("OrderDetailInfo.DataPortal_Fetch", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("OrderDetailInfo.DataPortal_Fetch", ex);
			}
		}
		#endregion
		// Standard Refresh
		#region extension
		OrderDetailInfoExtension _OrderDetailInfoExtension = new OrderDetailInfoExtension();
		[Serializable()]
		partial class OrderDetailInfoExtension : extensionBase {}
		[Serializable()]
		class extensionBase
		{
			// Default Refresh
			public virtual void Refresh(OrderDetailInfo tmp) { }
		}
		#endregion
	} // Class
	#region Converter
	internal class OrderDetailInfoConverter : ExpandableObjectConverter
	{
		public override object ConvertTo(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destType)
		{
			if (destType == typeof(string) && value is OrderDetailInfo)
			{
				// Return the ToString value
				return ((OrderDetailInfo)value).ToString();
			}
			return base.ConvertTo(context, culture, value, destType);
		}
	}
	#endregion
} // Namespace
