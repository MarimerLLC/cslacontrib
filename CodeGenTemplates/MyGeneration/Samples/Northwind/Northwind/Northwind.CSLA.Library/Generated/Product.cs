
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using System.Configuration;
using System.IO;
using System.ComponentModel;
using System.Collections.Generic;
using Csla.Validation;
namespace Northwind.CSLA.Library
{
	/// <summary>
	///	Product Generated by MyGeneration using the CSLA Object Mapping template
	/// </summary>
	[Serializable()]
	[TypeConverter(typeof(ProductConverter))]
	public partial class Product : BusinessBase<Product>, IDisposable, IVEHasBrokenRules
	{
		#region Refresh
		private List<Product> _RefreshProducts = new List<Product>();
		private List<ProductOrderDetail> _RefreshProductOrderDetails = new List<ProductOrderDetail>();
		private void AddToRefreshList(List<Product> refreshProducts, List<ProductOrderDetail> refreshProductOrderDetails)
		{
			if (IsDirty)
				refreshProducts.Add(this);
			if (_ProductOrderDetails != null && _ProductOrderDetails.IsDirty)
			{
				foreach (ProductOrderDetail tmp in _ProductOrderDetails)
				{
					if(tmp.IsDirty)refreshProductOrderDetails.Add(tmp);
				}
			}
		}
		private void BuildRefreshList()
		{
			_RefreshProducts = new List<Product>();
			_RefreshProductOrderDetails = new List<ProductOrderDetail>();
			AddToRefreshList(_RefreshProducts, _RefreshProductOrderDetails);
		}
		private void ProcessRefreshList()
		{
			foreach (Product tmp in _RefreshProducts)
			{
				ProductInfo.Refresh(tmp);
				if(tmp._MyCategory != null) CategoryInfo.Refresh(tmp._MyCategory);
				if(tmp._MySupplier != null) SupplierInfo.Refresh(tmp._MySupplier);
			}
			foreach (ProductOrderDetail tmp in _RefreshProductOrderDetails)
			{
				OrderDetailInfo.Refresh(this, tmp);
			}
		}
		#endregion
		#region Collection
		protected static List<Product> _AllList = new List<Product>();
		private static Dictionary<string, Product> _AllByPrimaryKey = new Dictionary<string, Product>();
		private static void ConvertListToDictionary()
		{
			List<Product> remove = new List<Product>();
			foreach (Product tmp in _AllList)
			{
				_AllByPrimaryKey[tmp.ProductID.ToString()]=tmp; // Primary Key
				remove.Add(tmp);
			}
			foreach (Product tmp in remove)
				_AllList.Remove(tmp);
		}
		public static Product GetExistingByPrimaryKey(int productID)
		{
			ConvertListToDictionary();
			string key = productID.ToString();
			if (_AllByPrimaryKey.ContainsKey(key)) return _AllByPrimaryKey[key]; 
			return null;
		}
		#endregion
		#region Business Methods
		private string _ErrorMessage = string.Empty;
		public string ErrorMessage
		{
			get { return _ErrorMessage; }
		}
		private static int _nextProductID = -1;
		public static int NextProductID
		{
			get { return _nextProductID--; }
		}
		private int _ProductID;
		[System.ComponentModel.DataObjectField(true, true)]
		public int ProductID
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _ProductID;
			}
		}
		private string _ProductName = string.Empty;
		public string ProductName
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _ProductName;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (value == null) value = string.Empty;
				if (_ProductName != value)
				{
					_ProductName = value;
					PropertyHasChanged();
				}
			}
		}
		private int? _SupplierID;
		public int? SupplierID
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MySupplier != null) _SupplierID = _MySupplier.SupplierID;
				return _SupplierID;
			}
		}
		private Supplier _MySupplier;
		public Supplier MySupplier
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MySupplier == null && _SupplierID != null) _MySupplier = Supplier.Get((int)_SupplierID);
				return _MySupplier;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (_MySupplier != value)
				{
					_MySupplier = value;
					_SupplierID = (value == null ? null : (int?) value.SupplierID);
					PropertyHasChanged();
				}
			}
		}
		private int? _CategoryID;
		public int? CategoryID
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyCategory != null) _CategoryID = _MyCategory.CategoryID;
				return _CategoryID;
			}
		}
		private Category _MyCategory;
		public Category MyCategory
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyCategory == null && _CategoryID != null) _MyCategory = Category.Get((int)_CategoryID);
				return _MyCategory;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (_MyCategory != value)
				{
					_MyCategory = value;
					_CategoryID = (value == null ? null : (int?) value.CategoryID);
					PropertyHasChanged();
				}
			}
		}
		private string _QuantityPerUnit = string.Empty;
		public string QuantityPerUnit
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _QuantityPerUnit;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (value == null) value = string.Empty;
				if (_QuantityPerUnit != value)
				{
					_QuantityPerUnit = value;
					PropertyHasChanged();
				}
			}
		}
		private decimal? _UnitPrice;
		public decimal? UnitPrice
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _UnitPrice;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (_UnitPrice != value)
				{
					_UnitPrice = value;
					PropertyHasChanged();
				}
			}
		}
		private Int16? _UnitsInStock;
		public Int16? UnitsInStock
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _UnitsInStock;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (_UnitsInStock != value)
				{
					_UnitsInStock = value;
					PropertyHasChanged();
				}
			}
		}
		private Int16? _UnitsOnOrder;
		public Int16? UnitsOnOrder
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _UnitsOnOrder;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (_UnitsOnOrder != value)
				{
					_UnitsOnOrder = value;
					PropertyHasChanged();
				}
			}
		}
		private Int16? _ReorderLevel;
		public Int16? ReorderLevel
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _ReorderLevel;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (_ReorderLevel != value)
				{
					_ReorderLevel = value;
					PropertyHasChanged();
				}
			}
		}
		private bool _Discontinued;
		public bool Discontinued
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Discontinued;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (_Discontinued != value)
				{
					_Discontinued = value;
					PropertyHasChanged();
				}
			}
		}
		private int _ProductOrderDetailCount = 0;
		/// <summary>
		/// Count of ProductOrderDetails for this Product
		/// </summary>
		public int ProductOrderDetailCount
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _ProductOrderDetailCount;
			}
		}
		private ProductOrderDetails _ProductOrderDetails = null;
		/// <summary>
		/// Related Field
		/// </summary>
		[TypeConverter(typeof(ProductOrderDetailsConverter))]
		public ProductOrderDetails ProductOrderDetails
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if(_ProductOrderDetailCount > 0 && _ProductOrderDetails == null)
					_ProductOrderDetails = ProductOrderDetails.GetByProductID(ProductID);
				else if(_ProductOrderDetails == null)
					_ProductOrderDetails = ProductOrderDetails.New();
				return _ProductOrderDetails;
			}
		}
		public override bool IsDirty
		{
			get { return base.IsDirty || (_ProductOrderDetails == null? false : _ProductOrderDetails.IsDirty) || (_MyCategory == null? false : _MyCategory.IsDirty) || (_MySupplier == null? false : _MySupplier.IsDirty); }
		}
		public override bool IsValid
		{
			get { return (IsNew && !IsDirty ? true : base.IsValid) && (_ProductOrderDetails == null? true : _ProductOrderDetails.IsValid) && (_MyCategory == null? true : _MyCategory.IsValid) && (_MySupplier == null? true : _MySupplier.IsValid); }
		}
		// TODO: Replace base Product.ToString function as necessary
		/// <summary>
		/// Overrides Base ToString
		/// </summary>
		/// <returns>A string representation of current Product</returns>
		//public override string ToString()
		//{
		//  return base.ToString();
		//}
		// TODO: Check Product.GetIdValue to assure that the ID returned is unique
		/// <summary>
		/// Overrides Base GetIdValue - Used internally by CSLA to determine equality
		/// </summary>
		/// <returns>A Unique ID for the current Product</returns>
		protected override object GetIdValue()
		{
			return _ProductID;
		}
		#endregion
		#region ValidationRules
		[NonSerialized]
		private bool _CheckingBrokenRules=false;
		public IVEHasBrokenRules HasBrokenRules
		{
			get {
				if(_CheckingBrokenRules)return null;
				if ((IsDirty || !IsNew) && BrokenRulesCollection.Count > 0) return this;
				try
				{
					_CheckingBrokenRules=true;
					IVEHasBrokenRules hasBrokenRules = null;
				if (_ProductOrderDetails != null && (hasBrokenRules = _ProductOrderDetails.HasBrokenRules) != null) return hasBrokenRules;
				if (_MySupplier != null && (hasBrokenRules = _MySupplier.HasBrokenRules) != null) return hasBrokenRules;
				if (_MyCategory != null && (hasBrokenRules = _MyCategory.HasBrokenRules) != null) return hasBrokenRules;
					return hasBrokenRules;
				}
				finally
				{
					_CheckingBrokenRules=false;
				}
			}
		}
		public BrokenRulesCollection BrokenRules
		{
			get
			{
				IVEHasBrokenRules hasBrokenRules = HasBrokenRules;
				if (this.Equals(hasBrokenRules)) return BrokenRulesCollection;
				return (hasBrokenRules != null ? hasBrokenRules.BrokenRules : null);
			}
		}
		protected override void AddBusinessRules()
		{
			ValidationRules.AddRule(
				Csla.Validation.CommonRules.StringRequired, "ProductName");
			ValidationRules.AddRule(
				Csla.Validation.CommonRules.StringMaxLength,
				new Csla.Validation.CommonRules.MaxLengthRuleArgs("ProductName", 40));
			ValidationRules.AddRule(
				Csla.Validation.CommonRules.StringMaxLength,
				new Csla.Validation.CommonRules.MaxLengthRuleArgs("QuantityPerUnit", 20));
			//ValidationRules.AddDependantProperty("x", "y");
			_ProductExtension.AddValidationRules(ValidationRules);
			// TODO:  Add other validation rules
		}
		protected override void AddInstanceBusinessRules()
		{
			_ProductExtension.AddInstanceValidationRules(ValidationRules);
			// TODO:  Add other validation rules
		}
		// Sample data comparison validation rule
		//private bool StartDateGTEndDate(object target, Csla.Validation.RuleArgs e)
		//{
		//	if (_started > _ended)
		//	{
		//		e.Description = "Start date can't be after end date";
		//		return false;
		//	}
		//	else
		//		return true;
		//}
		#endregion
		#region Authorization Rules
		protected override void AddAuthorizationRules()
		{
			//TODO: Who can read/write which fields
			//AuthorizationRules.AllowRead(ProductID, "<Role(s)>");
			//AuthorizationRules.AllowRead(ProductName, "<Role(s)>");
			//AuthorizationRules.AllowRead(SupplierID, "<Role(s)>");
			//AuthorizationRules.AllowRead(CategoryID, "<Role(s)>");
			//AuthorizationRules.AllowRead(QuantityPerUnit, "<Role(s)>");
			//AuthorizationRules.AllowRead(UnitPrice, "<Role(s)>");
			//AuthorizationRules.AllowRead(UnitsInStock, "<Role(s)>");
			//AuthorizationRules.AllowRead(UnitsOnOrder, "<Role(s)>");
			//AuthorizationRules.AllowRead(ReorderLevel, "<Role(s)>");
			//AuthorizationRules.AllowRead(Discontinued, "<Role(s)>");
			//AuthorizationRules.AllowWrite(ProductName, "<Role(s)>");
			//AuthorizationRules.AllowWrite(SupplierID, "<Role(s)>");
			//AuthorizationRules.AllowWrite(CategoryID, "<Role(s)>");
			//AuthorizationRules.AllowWrite(QuantityPerUnit, "<Role(s)>");
			//AuthorizationRules.AllowWrite(UnitPrice, "<Role(s)>");
			//AuthorizationRules.AllowWrite(UnitsInStock, "<Role(s)>");
			//AuthorizationRules.AllowWrite(UnitsOnOrder, "<Role(s)>");
			//AuthorizationRules.AllowWrite(ReorderLevel, "<Role(s)>");
			//AuthorizationRules.AllowWrite(Discontinued, "<Role(s)>");
			_ProductExtension.AddAuthorizationRules(AuthorizationRules);
		}
		protected override void AddInstanceAuthorizationRules()
		{
			//TODO: Who can read/write which fields
			_ProductExtension.AddInstanceAuthorizationRules(AuthorizationRules);
		}
		public static bool CanAddObject()
		{
			// TODO: Can Add Authorization
			//return Csla.ApplicationContext.User.IsInRole("ProjectManager");
			return true;
		}
		public static bool CanGetObject()
		{
			// TODO: CanGet Authorization
			return true;
		}
		public static bool CanDeleteObject()
		{
			// TODO: CanDelete Authorization
			//bool result = false;
			//if (Csla.ApplicationContext.User.IsInRole("ProjectManager"))result = true;
			//if (Csla.ApplicationContext.User.IsInRole("Administrator"))result = true;
			//return result;
			return true;
		}
		public static bool CanEditObject()
		{
			// TODO: CanEdit Authorization
			//return Csla.ApplicationContext.User.IsInRole("ProjectManager");
			return true;
		}
		#endregion
		#region Factory Methods
		public int CurrentEditLevel
		{ get { return EditLevel; } }
		protected Product()
		{/* require use of factory methods */
			_AllList.Add(this);
		}
		public void Dispose()
		{
			_AllList.Remove(this);
			_AllByPrimaryKey.Remove(ProductID.ToString());
		}
		public static Product New()
		{
			if (!CanAddObject())
				throw new System.Security.SecurityException("User not authorized to add a Product");
			try
			{
				return DataPortal.Create<Product>();
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on Product.New", ex);
			}
		}
		public static Product New(string productName)
		{
			Product tmp = Product.New();
			tmp.ProductName = productName;
			return tmp;
		}
		public static Product New(string productName, Supplier mySupplier, Category myCategory, string quantityPerUnit, decimal? unitPrice, Int16? unitsInStock, Int16? unitsOnOrder, Int16? reorderLevel, bool discontinued)
		{
			Product tmp = Product.New();
			tmp.ProductName = productName;
			tmp.MySupplier = mySupplier;
			tmp.MyCategory = myCategory;
			tmp.QuantityPerUnit = quantityPerUnit;
			tmp.UnitPrice = unitPrice;
			tmp.UnitsInStock = unitsInStock;
			tmp.UnitsOnOrder = unitsOnOrder;
			tmp.ReorderLevel = reorderLevel;
			tmp.Discontinued = discontinued;
			return tmp;
		}
		public static Product MakeProduct(string productName, Supplier mySupplier, Category myCategory, string quantityPerUnit, decimal? unitPrice, Int16? unitsInStock, Int16? unitsOnOrder, Int16? reorderLevel, bool discontinued)
		{
			Product tmp = Product.New(productName, mySupplier, myCategory, quantityPerUnit, unitPrice, unitsInStock, unitsOnOrder, reorderLevel, discontinued);
			if (tmp.IsSavable)
				tmp = tmp.Save();
			else
			{
				Csla.Validation.BrokenRulesCollection brc = tmp.ValidationRules.GetBrokenRules();
				tmp._ErrorMessage = "Failed Validation:";
				foreach (Csla.Validation.BrokenRule br in brc)
				{
					tmp._ErrorMessage += "\r\n\tFailure: " + br.RuleName;
				}
			}
			return tmp;
		}
		public static Product New(string productName, Supplier mySupplier, Category myCategory, string quantityPerUnit)
		{
			Product tmp = Product.New();
			tmp.ProductName = productName;
			tmp.MySupplier = mySupplier;
			tmp.MyCategory = myCategory;
			tmp.QuantityPerUnit = quantityPerUnit;
			return tmp;
		}
		public static Product MakeProduct(string productName, Supplier mySupplier, Category myCategory, string quantityPerUnit)
		{
			Product tmp = Product.New(productName, mySupplier, myCategory, quantityPerUnit);
			if (tmp.IsSavable)
				tmp = tmp.Save();
			else
			{
				Csla.Validation.BrokenRulesCollection brc = tmp.ValidationRules.GetBrokenRules();
				tmp._ErrorMessage = "Failed Validation:";
				foreach (Csla.Validation.BrokenRule br in brc)
				{
					tmp._ErrorMessage += "\r\n\tFailure: " + br.RuleName;
				}
			}
			return tmp;
		}
		public static Product Get(int productID)
		{
			if (!CanGetObject())
				throw new System.Security.SecurityException("User not authorized to view a Product");
			try
			{
				Product tmp = GetExistingByPrimaryKey(productID);
				if (tmp == null)
				{
					tmp = DataPortal.Fetch<Product>(new PKCriteria(productID));
					_AllList.Add(tmp);
				}
				if (tmp.ErrorMessage == "No Record Found") tmp = null;
				return tmp;
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on Product.Get", ex);
			}
		}
		public static Product Get(SafeDataReader dr)
		{
			if (dr.Read()) return new Product(dr);
			return null;
		}
		internal Product(SafeDataReader dr)
		{
			ReadData(dr);
		}
		public static void Delete(int productID)
		{
			if (!CanDeleteObject())
				throw new System.Security.SecurityException("User not authorized to remove a Product");
			try
			{
				DataPortal.Delete(new PKCriteria(productID));
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on Product.Delete", ex);
			}
		}
		public override Product Save()
		{
			if (IsDeleted && !CanDeleteObject())
				throw new System.Security.SecurityException("User not authorized to remove a Product");
			else if (IsNew && !CanAddObject())
				throw new System.Security.SecurityException("User not authorized to add a Product");
			else if (!CanEditObject())
				throw new System.Security.SecurityException("User not authorized to update a Product");
			try
			{
				BuildRefreshList();
				Product product = base.Save();
				_AllList.Add(product);//Refresh the item in AllList
				ProcessRefreshList();
				return product;
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on CSLA Save", ex);
			}
		}
		#endregion
		#region Data Access Portal
		[Serializable()]
		protected class PKCriteria
		{
			private int _ProductID;
			public int ProductID
			{ get { return _ProductID; } }
			public PKCriteria(int productID)
			{
				_ProductID = productID;
			}
		}
		// TODO: If Create needs to access DB - It should not be marked RunLocal
		[RunLocal()]
		private new void DataPortal_Create()
		{
			_ProductID = NextProductID;
			// Database Defaults
			_UnitPrice = _ProductExtension.DefaultUnitPrice;
			_UnitsInStock = _ProductExtension.DefaultUnitsInStock;
			_UnitsOnOrder = _ProductExtension.DefaultUnitsOnOrder;
			_ReorderLevel = _ProductExtension.DefaultReorderLevel;
			_Discontinued = _ProductExtension.DefaultDiscontinued;
			// TODO: Add any defaults that are necessary
			ValidationRules.CheckRules();
		}
		private void ReadData(SafeDataReader dr)
		{
			Database.LogInfo("Product.ReadData", GetHashCode());
			try
			{
				_ProductID = dr.GetInt32("ProductID");
				_ProductName = dr.GetString("ProductName");
				_SupplierID = (int?)dr.GetValue("SupplierID");
				_CategoryID = (int?)dr.GetValue("CategoryID");
				_QuantityPerUnit = dr.GetString("QuantityPerUnit");
				_UnitPrice = (decimal?)dr.GetValue("UnitPrice");
				_UnitsInStock = (Int16?)dr.GetValue("UnitsInStock");
				_UnitsOnOrder = (Int16?)dr.GetValue("UnitsOnOrder");
				_ReorderLevel = (Int16?)dr.GetValue("ReorderLevel");
				_Discontinued = dr.GetBoolean("Discontinued");
				_ProductOrderDetailCount = dr.GetInt32("OrderDetailCount");
				MarkOld();
			}
			catch (Exception ex)
			{
				Database.LogException("Product.ReadData", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("Product.ReadData", ex);
			}
		}
		private void DataPortal_Fetch(PKCriteria criteria)
		{
			Database.LogInfo("Product.DataPortal_Fetch", GetHashCode());
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					ApplicationContext.LocalContext["cn"] = cn;
					using (SqlCommand cm = cn.CreateCommand())
					{
						cm.CommandType = CommandType.StoredProcedure;
						cm.CommandText = "getProduct";
						cm.Parameters.AddWithValue("@ProductID", criteria.ProductID);
						using (SafeDataReader dr = new SafeDataReader(cm.ExecuteReader()))
						{
							if (!dr.Read())
							{
								_ErrorMessage = "No Record Found";
								return;
							}
							ReadData(dr);
							// load child objects
							dr.NextResult();
							_ProductOrderDetails = ProductOrderDetails.Get(dr);
						}
					}
					// removing of item only needed for local data portal
					if (ApplicationContext.ExecutionLocation == ApplicationContext.ExecutionLocations.Client)
						ApplicationContext.LocalContext.Remove("cn");
				}
			}
			catch (Exception ex)
			{
				Database.LogException("Product.DataPortal_Fetch", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("Product.DataPortal_Fetch", ex);
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		protected override void DataPortal_Insert()
		{
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					ApplicationContext.LocalContext["cn"] = cn;
					SQLInsert();
					// removing of item only needed for local data portal
					if (ApplicationContext.ExecutionLocation == ApplicationContext.ExecutionLocations.Client)
						ApplicationContext.LocalContext.Remove("cn");
				}
			}
			catch (Exception ex)
			{
				Database.LogException("Product.DataPortal_Insert", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("Product.DataPortal_Insert", ex);
			}
			finally
			{
				Database.LogInfo("Product.DataPortal_Insert", GetHashCode());
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		internal void SQLInsert()
		{
			if (!this.IsDirty) return;
			try
			{
				if(_MyCategory != null) _MyCategory.Update();
				if(_MySupplier != null) _MySupplier.Update();
				SqlConnection cn = (SqlConnection)ApplicationContext.LocalContext["cn"];
				using (SqlCommand cm = cn.CreateCommand())
				{
					cm.CommandType = CommandType.StoredProcedure;
					cm.CommandText = "addProduct";
					// Input All Fields - Except Calculated Columns
					cm.Parameters.AddWithValue("@ProductName", _ProductName);
					cm.Parameters.AddWithValue("@SupplierID", SupplierID);
					cm.Parameters.AddWithValue("@CategoryID", CategoryID);
					cm.Parameters.AddWithValue("@QuantityPerUnit", _QuantityPerUnit);
					cm.Parameters.AddWithValue("@UnitPrice", _UnitPrice);
					cm.Parameters.AddWithValue("@UnitsInStock", _UnitsInStock);
					cm.Parameters.AddWithValue("@UnitsOnOrder", _UnitsOnOrder);
					cm.Parameters.AddWithValue("@ReorderLevel", _ReorderLevel);
					cm.Parameters.AddWithValue("@Discontinued", _Discontinued);
					// Output Calculated Columns
					SqlParameter param_ProductID = new SqlParameter("@newProductID", SqlDbType.Int);
					param_ProductID.Direction = ParameterDirection.Output;
					cm.Parameters.Add(param_ProductID);
					// TODO: Define any additional output parameters
					cm.ExecuteNonQuery();
					// Save all values being returned from the Procedure
					_ProductID = (int)cm.Parameters["@newProductID"].Value;
				}
				MarkOld();
				// update child objects
				if (_ProductOrderDetails != null) _ProductOrderDetails.Update(this);
				Database.LogInfo("Product.SQLInsert", GetHashCode());
			}
			catch (Exception ex)
			{
				Database.LogException("Product.SQLInsert", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("Product.SQLInsert", ex);
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		public static void Add(SqlConnection cn, ref int productID, string productName, Supplier mySupplier, Category myCategory, string quantityPerUnit, decimal? unitPrice, Int16? unitsInStock, Int16? unitsOnOrder, Int16? reorderLevel, bool discontinued)
		{
			Database.LogInfo("Product.Add", 0);
			try
			{
				using (SqlCommand cm = cn.CreateCommand())
				{
					cm.CommandType = CommandType.StoredProcedure;
					cm.CommandText = "addProduct";
					// Input All Fields - Except Calculated Columns
					cm.Parameters.AddWithValue("@ProductName", productName);
					if(mySupplier != null)cm.Parameters.AddWithValue("@SupplierID", mySupplier.SupplierID);
					if(myCategory != null)cm.Parameters.AddWithValue("@CategoryID", myCategory.CategoryID);
					cm.Parameters.AddWithValue("@QuantityPerUnit", quantityPerUnit);
					cm.Parameters.AddWithValue("@UnitPrice", unitPrice);
					cm.Parameters.AddWithValue("@UnitsInStock", unitsInStock);
					cm.Parameters.AddWithValue("@UnitsOnOrder", unitsOnOrder);
					cm.Parameters.AddWithValue("@ReorderLevel", reorderLevel);
					cm.Parameters.AddWithValue("@Discontinued", discontinued);
					// Output Calculated Columns
					SqlParameter param_ProductID = new SqlParameter("@newProductID", SqlDbType.Int);
					param_ProductID.Direction = ParameterDirection.Output;
					cm.Parameters.Add(param_ProductID);
					// TODO: Define any additional output parameters
					cm.ExecuteNonQuery();
					// Save all values being returned from the Procedure
					productID = (int)cm.Parameters["@newProductID"].Value;
			// No Timestamp value to return
				}
			}
			catch (Exception ex)
			{
				Database.LogException("Product.Add", ex);
				throw new DbCslaException("Product.Add", ex);
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		protected override void DataPortal_Update()
		{
			if (!IsDirty) return;	// If not dirty - nothing to do
			Database.LogInfo("Product.DataPortal_Update", GetHashCode());
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					ApplicationContext.LocalContext["cn"] = cn;
					SQLUpdate();
					// removing of item only needed for local data portal
					if (ApplicationContext.ExecutionLocation == ApplicationContext.ExecutionLocations.Client)
						ApplicationContext.LocalContext.Remove("cn");
				}
			}
			catch (Exception ex)
			{
				Database.LogException("Product.DataPortal_Update", ex);
				_ErrorMessage = ex.Message;
				if (!ex.Message.EndsWith("has been edited by another user.")) throw ex;
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		internal void SQLUpdate()
		{
			if (!IsDirty) return;	// If not dirty - nothing to do
			Database.LogInfo("Product.SQLUpdate", GetHashCode());
			try
			{
				if(_MyCategory != null) _MyCategory.Update();
				if(_MySupplier != null) _MySupplier.Update();
				SqlConnection cn = (SqlConnection)ApplicationContext.LocalContext["cn"];
				if (base.IsDirty)
				{
					using (SqlCommand cm = cn.CreateCommand())
					{
						cm.CommandType = CommandType.StoredProcedure;
						cm.CommandText = "updateProduct";
						// All Fields including Calculated Fields
						cm.Parameters.AddWithValue("@ProductID", _ProductID);
						cm.Parameters.AddWithValue("@ProductName", _ProductName);
						cm.Parameters.AddWithValue("@SupplierID", SupplierID);
						cm.Parameters.AddWithValue("@CategoryID", CategoryID);
						cm.Parameters.AddWithValue("@QuantityPerUnit", _QuantityPerUnit);
						cm.Parameters.AddWithValue("@UnitPrice", _UnitPrice);
						cm.Parameters.AddWithValue("@UnitsInStock", _UnitsInStock);
						cm.Parameters.AddWithValue("@UnitsOnOrder", _UnitsOnOrder);
						cm.Parameters.AddWithValue("@ReorderLevel", _ReorderLevel);
						cm.Parameters.AddWithValue("@Discontinued", _Discontinued);
						// Output Calculated Columns
						// TODO: Define any additional output parameters
						cm.ExecuteNonQuery();
						// Save all values being returned from the Procedure
					}
				}
				MarkOld();
				// use the open connection to update child objects
				if (_ProductOrderDetails != null) _ProductOrderDetails.Update(this);
			}
			catch (Exception ex)
			{
				Database.LogException("Product.SQLUpdate", ex);
				_ErrorMessage = ex.Message;
				if (!ex.Message.EndsWith("has been edited by another user.")) throw ex;
			}
		}
		internal void Update()
		{
			if (!this.IsDirty) return;
			if (base.IsDirty)
			{
				SqlConnection cn = (SqlConnection)ApplicationContext.LocalContext["cn"];
				if (IsNew)
					Product.Add(cn, ref _ProductID, _ProductName, _MySupplier, _MyCategory, _QuantityPerUnit, _UnitPrice, _UnitsInStock, _UnitsOnOrder, _ReorderLevel, _Discontinued);
				else
					Product.Update(cn, ref _ProductID, _ProductName, _MySupplier, _MyCategory, _QuantityPerUnit, _UnitPrice, _UnitsInStock, _UnitsOnOrder, _ReorderLevel, _Discontinued);
				MarkOld();
			}
			if (_ProductOrderDetails != null) _ProductOrderDetails.Update(this);
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		public static void Update(SqlConnection cn, ref int productID, string productName, Supplier mySupplier, Category myCategory, string quantityPerUnit, decimal? unitPrice, Int16? unitsInStock, Int16? unitsOnOrder, Int16? reorderLevel, bool discontinued)
		{
			Database.LogInfo("Product.Update", 0);
			try
			{
				using (SqlCommand cm = cn.CreateCommand())
				{
					cm.CommandType = CommandType.StoredProcedure;
					cm.CommandText = "updateProduct";
					// Input All Fields - Except Calculated Columns
					cm.Parameters.AddWithValue("@ProductID", productID);
					cm.Parameters.AddWithValue("@ProductName", productName);
					if(mySupplier != null)cm.Parameters.AddWithValue("@SupplierID", mySupplier.SupplierID);
					if(myCategory != null)cm.Parameters.AddWithValue("@CategoryID", myCategory.CategoryID);
					cm.Parameters.AddWithValue("@QuantityPerUnit", quantityPerUnit);
					cm.Parameters.AddWithValue("@UnitPrice", unitPrice);
					cm.Parameters.AddWithValue("@UnitsInStock", unitsInStock);
					cm.Parameters.AddWithValue("@UnitsOnOrder", unitsOnOrder);
					cm.Parameters.AddWithValue("@ReorderLevel", reorderLevel);
					cm.Parameters.AddWithValue("@Discontinued", discontinued);
					// Output Calculated Columns
					// TODO: Define any additional output parameters
					cm.ExecuteNonQuery();
					// Save all values being returned from the Procedure
				// No Timestamp value to return
				}
			}
			catch (Exception ex)
			{
				Database.LogException("Product.Update", ex);
				throw new DbCslaException("Product.Update", ex);
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		protected override void DataPortal_DeleteSelf()
		{
			DataPortal_Delete(new PKCriteria(_ProductID));
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		private void DataPortal_Delete(PKCriteria criteria)
		{
			Database.LogInfo("Product.DataPortal_Delete", GetHashCode());
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					using (SqlCommand cm = cn.CreateCommand())
					{
						cm.CommandType = CommandType.StoredProcedure;
						cm.CommandText = "deleteProduct";
						cm.Parameters.AddWithValue("@ProductID", criteria.ProductID);
						cm.ExecuteNonQuery();
					}
				}
			}
			catch (Exception ex)
			{
				Database.LogException("Product.DataPortal_Delete", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("Product.DataPortal_Delete", ex);
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		public static void Remove(SqlConnection cn, int productID)
		{
			Database.LogInfo("Product.Remove", 0);
			try
			{
				using (SqlCommand cm = cn.CreateCommand())
				{
					cm.CommandType = CommandType.StoredProcedure;
					cm.CommandText = "deleteProduct";
					// Input PK Fields
					cm.Parameters.AddWithValue("@ProductID", productID);
					// TODO: Define any additional output parameters
					cm.ExecuteNonQuery();
				}
			}
			catch (Exception ex)
			{
				Database.LogException("Product.Remove", ex);
				throw new DbCslaException("Product.Remove", ex);
			}
		}
		#endregion
		#region Exists
		public static bool Exists(int productID)
		{
			ExistsCommand result;
			try
			{
				result = DataPortal.Execute<ExistsCommand>(new ExistsCommand(productID));
				return result.Exists;
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on Product.Exists", ex);
			}
		}
		[Serializable()]
		private class ExistsCommand : CommandBase
		{
			private int _ProductID;
			private bool _exists;
			public bool Exists
			{
				get { return _exists; }
			}
			public ExistsCommand(int productID)
			{
				_ProductID = productID;
			}
			protected override void DataPortal_Execute()
			{
				Database.LogInfo("Product.DataPortal_Execute", GetHashCode());
				try
				{
					using (SqlConnection cn = Database.Northwind_SqlConnection)
					{
						cn.Open();
						using (SqlCommand cm = cn.CreateCommand())
						{
							cm.CommandType = CommandType.StoredProcedure;
							cm.CommandText = "existsProduct";
							cm.Parameters.AddWithValue("@ProductID", _ProductID);
							int count = (int)cm.ExecuteScalar();
							_exists = (count > 0);
						}
					}
				}
				catch (Exception ex)
				{
					Database.LogException("Product.DataPortal_Execute", ex);
					throw new DbCslaException("Product.DataPortal_Execute", ex);
				}
			}
		}
		#endregion
		// Standard Default Code
		#region extension
		ProductExtension _ProductExtension = new ProductExtension();
		[Serializable()]
		partial class ProductExtension : extensionBase
		{
		}
		[Serializable()]
		class extensionBase
		{
			// Default Values
			public virtual decimal? DefaultUnitPrice
			{
				get { return 0; }
			}
			public virtual Int16? DefaultUnitsInStock
			{
				get { return 0; }
			}
			public virtual Int16? DefaultUnitsOnOrder
			{
				get { return 0; }
			}
			public virtual Int16? DefaultReorderLevel
			{
				get { return 0; }
			}
			public virtual bool DefaultDiscontinued
			{
				get { return Convert.ToBoolean(0); }
			}
			// Authorization Rules
			public virtual void AddAuthorizationRules(Csla.Security.AuthorizationRules rules)
			{
				// Needs to be overriden to add new authorization rules
			}
			// Instance Authorization Rules
			public virtual void AddInstanceAuthorizationRules(Csla.Security.AuthorizationRules rules)
			{
				// Needs to be overriden to add new authorization rules
			}
			// Validation Rules
			public virtual void AddValidationRules(Csla.Validation.ValidationRules rules)
			{
				// Needs to be overriden to add new validation rules
			}
			// InstanceValidation Rules
			public virtual void AddInstanceValidationRules(Csla.Validation.ValidationRules rules)
			{
				// Needs to be overriden to add new validation rules
			}
		}
		#endregion
	} // Class
	#region Converter
	internal class ProductConverter : ExpandableObjectConverter
	{
		public override object ConvertTo(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destType)
		{
			if (destType == typeof(string) && value is Product)
			{
				// Return the ToString value
				return ((Product)value).ToString();
			}
			return base.ConvertTo(context, culture, value, destType);
		}
	}
	#endregion
} // Namespace


//// The following is a sample Extension File.  You can use it to create ProductExt.cs
//using System;
//using System.Collections.Generic;
//using System.Text;
//using Csla;

//namespace Northwind.CSLA.Library
//{
//  public partial class Product
//  {
//    partial class ProductExtension : extensionBase
//    {
//      // TODO: Override automatic defaults
//      public virtual decimal? DefaultUnitPrice
//      {
//        get { return 0; }
//      }
//      public virtual Int16? DefaultUnitsInStock
//      {
//        get { return 0; }
//      }
//      public virtual Int16? DefaultUnitsOnOrder
//      {
//        get { return 0; }
//      }
//      public virtual Int16? DefaultReorderLevel
//      {
//        get { return 0; }
//      }
//      public virtual bool DefaultDiscontinued
//      {
//        get { return 0; }
//      }
//      public new void AddAuthorizationRules(Csla.Security.AuthorizationRules rules)
//      {
//        //rules.AllowRead(Dbid, "<Role(s)>");
//      }
//      public new void AddInstanceAuthorizationRules(Csla.Security.AuthorizationRules rules)
//      {
//        //rules.AllowInstanceRead(Dbid, "<Role(s)>");
//      }
//      public new void AddValidationRules(Csla.Validation.ValidationRules rules)
//      {
//        rules.AddRule(
//          Csla.Validation.CommonRules.StringMaxLength,
//          new Csla.Validation.CommonRules.MaxLengthRuleArgs("Name", 100));
//      }
//      public new void AddInstanceValidationRules(Csla.Validation.ValidationRules rules)
//      {
//        rules.AddInstanceRule(/* Instance Validation Rule */);
//      }
//    }
//  }
//}
