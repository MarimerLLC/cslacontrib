
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using System.Configuration;
using System.IO;
using System.ComponentModel;
using System.Collections.Generic;
namespace Northwind.CSLA.Library
{
	public delegate void ProductInfoEvent(object sender);
	/// <summary>
	///	ProductInfo Generated by MyGeneration using the CSLA Object Mapping template
	/// </summary>
	[Serializable()]
	[TypeConverter(typeof(ProductInfoConverter))]
	public partial class ProductInfo : ReadOnlyBase<ProductInfo>, IDisposable
	{
		public event ProductInfoEvent Changed;
		private void OnChange()
		{
			if (Changed != null) Changed(this);
		}
		#region Collection
		protected static List<ProductInfo> _AllList = new List<ProductInfo>();
		private static Dictionary<string, ProductInfo> _AllByPrimaryKey = new Dictionary<string, ProductInfo>();
		private static void ConvertListToDictionary()
		{
			List<ProductInfo> remove = new List<ProductInfo>();
			foreach (ProductInfo tmp in _AllList)
			{
				_AllByPrimaryKey[tmp.ProductID.ToString()]=tmp; // Primary Key
				remove.Add(tmp);
			}
			foreach (ProductInfo tmp in remove)
				_AllList.Remove(tmp);
		}
		internal static void AddList(ProductInfoList lst)
		{
			foreach (ProductInfo item in lst) _AllList.Add(item);
		}
		public static ProductInfo GetExistingByPrimaryKey(int productID)
		{
			ConvertListToDictionary();
			string key = productID.ToString();
			if (_AllByPrimaryKey.ContainsKey(key)) return _AllByPrimaryKey[key]; 
			return null;
		}
		#endregion
		#region Business Methods
		private string _ErrorMessage = string.Empty;
		public string ErrorMessage
		{
			get { return _ErrorMessage; }
		}
		protected Product _Editable;
		private IVEHasBrokenRules HasBrokenRules
		{
			get
			{
				IVEHasBrokenRules hasBrokenRules = null;
				if (_Editable != null)
					hasBrokenRules = _Editable.HasBrokenRules;
				return hasBrokenRules;
			}
		}
		private int _ProductID;
		[System.ComponentModel.DataObjectField(true, true)]
		public int ProductID
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _ProductID;
			}
		}
		private string _ProductName = string.Empty;
		public string ProductName
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _ProductName;
			}
		}
		private int? _SupplierID;
		public int? SupplierID
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MySupplier != null) _SupplierID = _MySupplier.SupplierID;
				return _SupplierID;
			}
		}
		private SupplierInfo _MySupplier;
		public SupplierInfo MySupplier
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MySupplier == null && _SupplierID != null) _MySupplier = SupplierInfo.Get((int)_SupplierID);
				return _MySupplier;
			}
		}
		private int? _CategoryID;
		public int? CategoryID
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyCategory != null) _CategoryID = _MyCategory.CategoryID;
				return _CategoryID;
			}
		}
		private CategoryInfo _MyCategory;
		public CategoryInfo MyCategory
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyCategory == null && _CategoryID != null) _MyCategory = CategoryInfo.Get((int)_CategoryID);
				return _MyCategory;
			}
		}
		private string _QuantityPerUnit = string.Empty;
		public string QuantityPerUnit
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _QuantityPerUnit;
			}
		}
		private decimal? _UnitPrice;
		public decimal? UnitPrice
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _UnitPrice;
			}
		}
		private Int16? _UnitsInStock;
		public Int16? UnitsInStock
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _UnitsInStock;
			}
		}
		private Int16? _UnitsOnOrder;
		public Int16? UnitsOnOrder
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _UnitsOnOrder;
			}
		}
		private Int16? _ReorderLevel;
		public Int16? ReorderLevel
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _ReorderLevel;
			}
		}
		private bool _Discontinued;
		public bool Discontinued
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Discontinued;
			}
		}
		private int _ProductOrderDetailCount = 0;
		/// <summary>
		/// Count of ProductOrderDetails for this Product
		/// </summary>
		public int ProductOrderDetailCount
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _ProductOrderDetailCount;
			}
		}
		private OrderDetailInfoList _ProductOrderDetails = null;
		[TypeConverter(typeof(OrderDetailInfoListConverter))]
		public OrderDetailInfoList ProductOrderDetails
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_ProductOrderDetailCount > 0 && _ProductOrderDetails == null)
					_ProductOrderDetails = OrderDetailInfoList.GetByProductID(_ProductID);
				return _ProductOrderDetails;
			}
		}
		// TODO: Replace base ProductInfo.ToString function as necessary
		/// <summary>
		/// Overrides Base ToString
		/// </summary>
		/// <returns>A string representation of current ProductInfo</returns>
		//public override string ToString()
		//{
		//  return base.ToString();
		//}
		// TODO: Check ProductInfo.GetIdValue to assure that the ID returned is unique
		/// <summary>
		/// Overrides Base GetIdValue - Used internally by CSLA to determine equality
		/// </summary>
		/// <returns>A Unique ID for the current ProductInfo</returns>
		protected override object GetIdValue()
		{
			return _ProductID;
		}
		#endregion
		#region Factory Methods
		private ProductInfo()
		{/* require use of factory methods */
			_AllList.Add(this);
		}
		public void Dispose()
		{
			_AllList.Remove(this);
			_AllByPrimaryKey.Remove(ProductID.ToString());
		}
		public virtual Product Get()
		{
			return _Editable = Product.Get(_ProductID);
		}
		public static void Refresh(Product tmp)
		{
			ProductInfo tmpInfo = GetExistingByPrimaryKey(tmp.ProductID);
			if (tmpInfo == null) return;
			tmpInfo.RefreshFields(tmp);
		}
		private void RefreshFields(Product tmp)
		{
			_ProductName = tmp.ProductName;
			_SupplierID = tmp.SupplierID;
			_CategoryID = tmp.CategoryID;
			_QuantityPerUnit = tmp.QuantityPerUnit;
			_UnitPrice = tmp.UnitPrice;
			_UnitsInStock = tmp.UnitsInStock;
			_UnitsOnOrder = tmp.UnitsOnOrder;
			_ReorderLevel = tmp.ReorderLevel;
			_Discontinued = tmp.Discontinued;
			_ProductInfoExtension.Refresh(this);
			_MySupplier = null;
			_MyCategory = null;
			OnChange();// raise an event
		}
		public static void Refresh(CategoryProduct tmp)
		{
			ProductInfo tmpInfo = GetExistingByPrimaryKey(tmp.ProductID);
			if (tmpInfo == null) return;
			tmpInfo.RefreshFields(tmp);
		}
		private void RefreshFields(CategoryProduct tmp)
		{
			_ProductName = tmp.ProductName;
			_SupplierID = tmp.SupplierID;
			_QuantityPerUnit = tmp.QuantityPerUnit;
			_UnitPrice = tmp.UnitPrice;
			_UnitsInStock = tmp.UnitsInStock;
			_UnitsOnOrder = tmp.UnitsOnOrder;
			_ReorderLevel = tmp.ReorderLevel;
			_Discontinued = tmp.Discontinued;
			_ProductInfoExtension.Refresh(this);
			_MySupplier = null;
			_MyCategory = null;
			OnChange();// raise an event
		}
		public static void Refresh(SupplierProduct tmp)
		{
			ProductInfo tmpInfo = GetExistingByPrimaryKey(tmp.ProductID);
			if (tmpInfo == null) return;
			tmpInfo.RefreshFields(tmp);
		}
		private void RefreshFields(SupplierProduct tmp)
		{
			_ProductName = tmp.ProductName;
			_CategoryID = tmp.CategoryID;
			_QuantityPerUnit = tmp.QuantityPerUnit;
			_UnitPrice = tmp.UnitPrice;
			_UnitsInStock = tmp.UnitsInStock;
			_UnitsOnOrder = tmp.UnitsOnOrder;
			_ReorderLevel = tmp.ReorderLevel;
			_Discontinued = tmp.Discontinued;
			_ProductInfoExtension.Refresh(this);
			_MySupplier = null;
			_MyCategory = null;
			OnChange();// raise an event
		}
		public static ProductInfo Get(int productID)
		{
			//if (!CanGetObject())
			//  throw new System.Security.SecurityException("User not authorized to view a Product");
			try
			{
				ProductInfo tmp = GetExistingByPrimaryKey(productID);
				if (tmp == null)
				{
					tmp = DataPortal.Fetch<ProductInfo>(new PKCriteria(productID));
					_AllList.Add(tmp);
				}
				if (tmp.ErrorMessage == "No Record Found") tmp = null;
				return tmp;
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on ProductInfo.Get", ex);
			}
		}
		#endregion
		#region Data Access Portal
		internal ProductInfo(SafeDataReader dr)
		{
			Database.LogInfo("ProductInfo.Constructor", GetHashCode());
			try
			{
				ReadData(dr);
			}
			catch (Exception ex)
			{
				Database.LogException("ProductInfo.Constructor", ex);
				throw new DbCslaException("ProductInfo.Constructor", ex);
			}
		}
		[Serializable()]
		protected class PKCriteria
		{
			private int _ProductID;
			public int ProductID
			{ get { return _ProductID; } }
			public PKCriteria(int productID)
			{
				_ProductID = productID;
			}
		}
		private void ReadData(SafeDataReader dr)
		{
			Database.LogInfo("ProductInfo.ReadData", GetHashCode());
			try
			{
				_ProductID = dr.GetInt32("ProductID");
				_ProductName = dr.GetString("ProductName");
				_SupplierID = (int?)dr.GetValue("SupplierID");
				_CategoryID = (int?)dr.GetValue("CategoryID");
				_QuantityPerUnit = dr.GetString("QuantityPerUnit");
				_UnitPrice = (decimal?)dr.GetValue("UnitPrice");
				_UnitsInStock = (Int16?)dr.GetValue("UnitsInStock");
				_UnitsOnOrder = (Int16?)dr.GetValue("UnitsOnOrder");
				_ReorderLevel = (Int16?)dr.GetValue("ReorderLevel");
				_Discontinued = dr.GetBoolean("Discontinued");
				_ProductOrderDetailCount = dr.GetInt32("OrderDetailCount");
			}
			catch (Exception ex)
			{
				Database.LogException("ProductInfo.ReadData", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("ProductInfo.ReadData", ex);
			}
		}
		private void DataPortal_Fetch(PKCriteria criteria)
		{
			Database.LogInfo("ProductInfo.DataPortal_Fetch", GetHashCode());
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					ApplicationContext.LocalContext["cn"] = cn;
					using (SqlCommand cm = cn.CreateCommand())
					{
						cm.CommandType = CommandType.StoredProcedure;
						cm.CommandText = "getProduct";
						cm.Parameters.AddWithValue("@ProductID", criteria.ProductID);
						using (SafeDataReader dr = new SafeDataReader(cm.ExecuteReader()))
						{
							if (!dr.Read())
							{
								_ErrorMessage = "No Record Found";
								return;
							}
							ReadData(dr);
						}
					}
					// removing of item only needed for local data portal
					if (ApplicationContext.ExecutionLocation == ApplicationContext.ExecutionLocations.Client)
						ApplicationContext.LocalContext.Remove("cn");
				}
			}
			catch (Exception ex)
			{
				Database.LogException("ProductInfo.DataPortal_Fetch", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("ProductInfo.DataPortal_Fetch", ex);
			}
		}
		#endregion
		// Standard Refresh
		#region extension
		ProductInfoExtension _ProductInfoExtension = new ProductInfoExtension();
		[Serializable()]
		partial class ProductInfoExtension : extensionBase {}
		[Serializable()]
		class extensionBase
		{
			// Default Refresh
			public virtual void Refresh(ProductInfo tmp) { }
		}
		#endregion
	} // Class
	#region Converter
	internal class ProductInfoConverter : ExpandableObjectConverter
	{
		public override object ConvertTo(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destType)
		{
			if (destType == typeof(string) && value is ProductInfo)
			{
				// Return the ToString value
				return ((ProductInfo)value).ToString();
			}
			return base.ConvertTo(context, culture, value, destType);
		}
	}
	#endregion
} // Namespace
