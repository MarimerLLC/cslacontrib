<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ruleAOrBValue" xml:space="preserve">
    <value>Only one of these can have a non-blank value ({propertyList}).</value>
    <comment>Descriptive explanation/error message for the AOrBValue rule.</comment>
  </data>
  <data name="ruleIntegerMaxValue" xml:space="preserve">
    <value>{rulePropertyName} can not exceed {maxValue}.</value>
    <comment>Descriptive explanation/error message for the IntegerMaxValue rule.</comment>
  </data>
  <data name="ruleIntegerMinValue" xml:space="preserve">
    <value>{rulePropertyName} can not be less than {minValue}.</value>
    <comment>Descriptive explanation/error message for the IntegerMinValue rule.</comment>
  </data>
  <data name="ruleIsEmailAddress" xml:space="preserve">
    <value>{rulePropertyName} must be in a valid email address format. (Ex: abc@def.com)</value>
    <comment>Descriptive explanation/error message for the IsEmailAddress rule.</comment>
  </data>
  <data name="ruleIsEmailAddressAdjacentPeriods" xml:space="preserve">
    <value>Periods may not be next to one another in an email address.</value>
    <comment>Supplemental descriptive explanation/error message for the IsEmailAddress rule.</comment>
  </data>
  <data name="ruleIsEmailAddressEndAtSign" xml:space="preserve">
    <value>You may not end an email address with the '@' sign.</value>
    <comment>Supplemental descriptive explanation/error message for the IsEmailAddress rule.</comment>
  </data>
  <data name="ruleIsEmailAddressEndPeriod" xml:space="preserve">
    <value>You may not end an email address with a period.</value>
    <comment>Supplemental descriptive explanation/error message for the IsEmailAddress rule.</comment>
  </data>
  <data name="ruleIsEmailAddressForbiddenCharacter" xml:space="preserve">
    <value>Forbidden character '{invalidCharacter}' not permitted in an email address.  Only the characters a-z A-z 0-9 ! # $ % &amp; ' * + - / = ? ^ _ ` { | } ~ @ . are allowed.</value>
    <comment>Supplemental descriptive explanation/error message for the IsEmailAddress rule.</comment>
  </data>
  <data name="ruleIsEmailAddressNoAtSign" xml:space="preserve">
    <value>A '@' sign is required in an email address.</value>
    <comment>Supplemental descriptive explanation/error message for the IsEmailAddress rule.</comment>
  </data>
  <data name="ruleIsEmailAddressNoPeriodAfterAtSign" xml:space="preserve">
    <value>A period is required following the '@' sign in an email address.</value>
    <comment>Supplemental descriptive explanation/error message for the IsEmailAddress rule.</comment>
  </data>
  <data name="ruleIsEmailAddressPeriodNextToAtSign" xml:space="preserve">
    <value>Periods and '@' signs may not be next to one another in an email address.</value>
    <comment>Supplemental descriptive explanation/error message for the IsEmailAddress rule.</comment>
  </data>
  <data name="ruleIsEmailAddressStartAtSign" xml:space="preserve">
    <value>You may not start an email address with the '@' sign.</value>
    <comment>Supplemental descriptive explanation/error message for the IsEmailAddress rule.</comment>
  </data>
  <data name="ruleIsEmailAddressStartPeriod" xml:space="preserve">
    <value>You may not start an email address with a period.</value>
    <comment>Supplemental descriptive explanation/error message for the IsEmailAddress rule.</comment>
  </data>
  <data name="ruleIsEmailAddressTwoAtSigns" xml:space="preserve">
    <value>You may only have one '@' sign in an email address.</value>
    <comment>Supplemental descriptive explanation/error message for the IsEmailAddress rule.</comment>
  </data>
  <data name="ruleMaxValue" xml:space="preserve">
    <value>{rulePropertyName} can not exceed {maxValue}.</value>
    <comment>Descriptive explanation/error message for the MaxValue&lt;T&gt; rule.</comment>
  </data>
  <data name="ruleMinMax" xml:space="preserve">
    <value>{minPropertyName} must not be after {maxPropertyName}.</value>
    <comment>Descriptive explanation/error message for theMinMax&lt;T&gt; rule.</comment>
  </data>
  <data name="ruleMinValue" xml:space="preserve">
    <value>{rulePropertyName} can not be less than {minValue}.</value>
    <comment>Descriptive explanation/error message for the MinValue&lt;T&gt; rule.</comment>
  </data>
  <data name="ruleNoDuplicates" xml:space="preserve">
    <value>{rulePropertyName} must be unique.</value>
    <comment>Descriptive explanation/error message for the NoDuplicates rule.</comment>
  </data>
  <data name="ruleRegExMatch" xml:space="preserve">
    <value>{rulePropertyName} does not match regular expression.</value>
    <comment>Descriptive explanation/error message for the RegExMatch rule.</comment>
  </data>
  <data name="ruleSmartDateRequired" xml:space="preserve">
    <value>{rulePropertyName} is required.</value>
    <comment>Descriptive explanation/error message for the SmartDateRequired rule.</comment>
  </data>
  <data name="ruleSmartFieldRequired" xml:space="preserve">
    <value>{rulePropertyName} is required.</value>
    <comment>Descriptive explanation/error message for the SmartFieldRequired rule.</comment>
  </data>
  <data name="ruleStringMaxLength" xml:space="preserve">
    <value>{rulePropertyName} can not exceed {maxLength} characters.</value>
    <comment>Descriptive explanation/error message for the StringMaxLength rule.</comment>
  </data>
  <data name="ruleStringRequired" xml:space="preserve">
    <value>{rulePropertyName} is required.</value>
    <comment>Descriptive explanation/error message for the StringRequired rule.</comment>
  </data>
  <data name="StringToBoolException" xml:space="preserve">
    <value>String value can not be converted to a Boolean.</value>
  </data>
  <data name="StringToDecimalException" xml:space="preserve">
    <value>String value can not be converted to a Decimal.</value>
  </data>
  <data name="StringToFloatException" xml:space="preserve">
    <value>String value can not be converted to a Float.</value>
  </data>
  <data name="StringToInt16Exception" xml:space="preserve">
    <value>String value can not be converted to an Int16.</value>
  </data>
  <data name="StringToInt32Exception" xml:space="preserve">
    <value>String value can not be converted to an Int32.</value>
  </data>
  <data name="StringToInt64Exception" xml:space="preserve">
    <value>String value can not be converted to an Int64.</value>
  </data>
  <data name="ValueNotSmartBoolException" xml:space="preserve">
    <value>Value is not a SmartBool.</value>
  </data>
  <data name="ValueNotSmartDecimalException" xml:space="preserve">
    <value>Value is not a SmartDecimal.</value>
  </data>
  <data name="ValueNotSmartFloatException" xml:space="preserve">
    <value>Value is not a SmartFloat.</value>
  </data>
  <data name="ValueNotSmartInt16Exception" xml:space="preserve">
    <value>Value is not a SmartInt16.</value>
  </data>
  <data name="ValueNotSmartInt32Exception" xml:space="preserve">
    <value>Value is not a SmartInt32.</value>
  </data>
  <data name="ValueNotSmartInt64Exception" xml:space="preserve">
    <value>Value is not a SmartInt64.</value>
  </data>
</root>