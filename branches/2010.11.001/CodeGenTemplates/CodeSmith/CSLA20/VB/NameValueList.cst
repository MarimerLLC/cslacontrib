<%@ CodeTemplate Src="TemplateBase.vb" Inherits="CodeSmith.Csla.TemplateBase" Language="VB" TargetLanguage="VB" Description="Generates a CSLA Name Value List Object." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Property Name="ObjectName" Type="System.String" Optional="true" Category="1. Object" Description="Required - The Name of the Business Object Collection Class to Generate." %>
<%@ Property Name="RootCommand" Type="CommandSchema" Optional="true" Category="2. Data Source" Description="Required - The stored procedure that the object is based on. Must select RootTable,  RootView, or RootCommand." %>
<%@ Property Name="RootTable" Type="TableSchema" Optional="true" Category="2. Data Source" Description="Required - The Root Table that the object is based on. Must select RootTable,  RootView, or RootCommand." %>
<%@ Property Name="RootView" Type="ViewSchema" Optional="true" Category="2. Data Source" Description="Required - The Root View that the object is based on. Must select RootTable,  RootView, or RootCommand." %>
<%@ Property Name="ResultSetIndex" Type="System.Int32" Default="0" Optional="true" Category="2. Data Source" Description="Result set index indicates which result set to use from the stored procedure. Required when using RootCommand." %>
<%@ Property Name="UniqueColumnNames" Type="CodeSmith.CustomProperties.StringCollection" Optional="true" Category="2. Data Source" Description="Unique columns. Required when using RootView or when ResultSetIndex > 0." %>

<%-- Generic Variables for code to use  --%>
<% 
    Dim i As Integer = BaseIndentLevel
    Dim objInfo As ObjectInfo = New ObjectInfo(Me)
%>
<!-- #INCLUDE FILE="AutoGenWarning.inc" -->
Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports Csla
Imports Csla.Data

<% If Not ClassNamespace Is Nothing AndAlso ClassNamespace.Length > 0 Then %>Namespace <%= ClassNamespace %>
<% i+=1 %>
<% End If %> 
<% If Not objInfo.IsUserPartial Then %>
<%=Indent(i)%><Serializable()> _
<% End If %>
<%=Indent(i)%><%= objInfo.Modifiers %> Class <%=objInfo.Name%>
<% i+=1 %>
<%=Indent(i)%>Inherits <%=objInfo.Inherits%>

#Region " Factory Methods "
<% If objInfo.IsSingle OrElse objInfo.IsGeneratedPartial OrElse objInfo.IsUserBase Then %>
<%=Indent(i, True)%>Private Sub New()
<%=Indent(i+1)%>' require use of factory method 
<%=Indent(i)%>End Sub
<% End If %>
<% If objInfo.IsGeneratedClass Then%>
<%=Indent(i, True)%>Private Shared _list As <%=objInfo.CustomName%>
<%=Indent(i, True)%>Public Shared Function <%=objInfo.GetMethodName%>() As <%=objInfo.CustomName%>
<% i+=1 %>
<%=Indent(i)%>If _list Is Nothing then
<%=Indent(i + 1)%>_list = DataPortal.Fetch(Of <%=objInfo.CustomName%>)(New Criteria(GetType(<%=objInfo.CustomName%>)))
<%=Indent(i)%>End If
<%=Indent(i)%>Return _list
<% i-=1 %>
<%=Indent(i)%>End Function
<%=Indent(i, True)%>public Shared Sub InvalidateCache()
<%=Indent(i+1)%>_list = Nothing
<%=Indent(i)%>End Sub
<% End if %>

#End Region
<% If objInfo.IsGeneratedClass Then %>

#Region " Data Access "
<%=Indent(i, True)%>Protected Overrides Sub DataPortal_Fetch(ByVal criteria As Object)
<% i+=1 %>
<%=Indent(i)%>RaiseListChangedEvents = False

<%=Indent(i)%>Using cn As SqlConnection = New SqlConnection(<%=objInfo.DbConnection%>)
<% i+=1 %>
<%=Indent(i)%>Using cm As SqlCommand = cn.CreateCommand()
<% i+=1 %>
<%=Indent(i)%>cn.Open()
<%=Indent(i)%>cm.CommandType = CommandType.StoredProcedure
<%=Indent(i)%>cm.CommandText = "<%=objInfo.FetchCommandText%>"
<%=Indent(i, True)%>Using dr As SafeDataReader = New SafeDataReader(cm.ExecuteReader())
<% i+=1 %>
<%=Indent(i)%>IsReadOnly = False
<%=Indent(i)%>While(dr.Read())
<%=Indent(i+1)%>Me.Add(<%=GetNewNameValuePair(objInfo)%>)
<%=Indent(i)%>End While
<%=Indent(i)%>IsReadOnly = true
<% i-=1 %>
<%=Indent(i)%>End Using
<% i-=1 %>
<%=Indent(i)%>End Using
<% i-=1 %>
<%=Indent(i)%>End Using
<%=Indent(i, True)%>RaiseListChangedEvents = true
<% i-=1 %>
<%=Indent(i)%>End Sub

#End Region 
<% End If %>

<% i-=1 %>
<%=Indent(i)%>End Class
<% If Not ClassNamespace Is Nothing AndAlso ClassNamespace.Length > 0 Then %>End namespace<% End If %>