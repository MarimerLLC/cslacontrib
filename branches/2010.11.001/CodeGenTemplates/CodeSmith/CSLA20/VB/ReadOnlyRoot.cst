<%@ CodeTemplate src="TemplateBase.vb" Inherits="CodeSmith.Csla.TemplateBase" Language="VB" TargetLanguage="VB" Description="Generates a CSLA Read Only Root Object." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Property Name="ObjectName" Type="System.String" Optional="true" Category="1. Object" Description="Required - The Name of the Business Object Class to Generate." %>
<%@ Property Name="RootCommand" Type="CommandSchema" Optional="true" Category="2. Data Source" Description="Required - The stored procedure that the object is based on. Must select RootTable,  RootView, or RootCommand." %>
<%@ Property Name="RootTable" Type="TableSchema" Optional="true" Category="2. Data Source" Description="Required - The Root Table that the object is based on. Must select RootTable,  RootView, or RootCommand." %>
<%@ Property Name="RootView" Type="ViewSchema" Optional="true" Category="2. Data Source" Description="Required - The Root View that the object is based on. Must select RootTable,  RootView, or RootCommand." %>
<%@ Property Name="ResultSetIndex" Type="System.Int32" Default="0" Optional="true" Category="2. Data Source" Description="Result set index indicates which result set to use from the stored procedure. Required when using RootCommand." %>
<%@ Property Name="UniqueColumnNames" Type="CodeSmith.CustomProperties.StringCollection" Optional="true" Category="2. Data Source" Description="Unique columns. Required when using RootView or when ResultSetIndex > 0." %>
<%@ Property Name="ChildCollectionNames" Type="CodeSmith.CustomProperties.StringCollection" Optional="true" Category="1a. Child Collection Object" Description="The Child Collection's Name. Used for the memeber variable and collection name." %>
<%@ Property Name="ChildPropertyNames" Type="CodeSmith.CustomProperties.StringCollection" Optional="true" Category="1a. Child Collection Object" Description="The Child Collection's member variable name." %>

<%-- Generic Variables for code to use  --%>
<% 
   Dim i As Integer = BaseIndentLevel
   Dim objInfo As ObjectInfo = New ObjectInfo(Me)
%>
<!-- #INCLUDE FILE="AutoGenWarning.inc" -->
Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports Csla
Imports Csla.Data
Imports Csla.Validation

<% If Not ClassNamespace Is Nothing AndAlso ClassNamespace.Length > 0 Then %>Namespace <%= ClassNamespace %>
<% i+=1 %>
<% End If %> 
<% If Not objInfo.IsUserPartial Then %>

<%=Indent(i)%><Serializable()> _
<% Else %>

<% End If %>
<%=Indent(i)%><%= objInfo.Modifiers %> Class <%=objInfo.NameAndSuffix%>
<%=Indent(i+1)%>Inherits <%=objInfo.Inherits%>
<% i+=1 %>
<% If objInfo.IsUserPartial Then %>

#Region " Initialize "

<%=Indent(i)%>Protected Overrides Sub Initialize()
<% i+=1 %>
<%=Indent(i)%>'executeFetchDelegate = AddressOf ExecuteFetch
<%=Indent(i)%>'executeFetchCompleteDelegate = AddressOf ExecuteFetchComplete
<%=Indent(i)%>'fetchObjectCompleteDelegate = AddressOf FetchObjectComplete
<%=Indent(i)%>'fetchChildrenCompleteDelegate = AddressOf FetchChildrenComplete
<% i-=1 %>
<%=Indent(i)%>End Sub

#End Region
<% End If %>
<!-- #INCLUDE FILE="PropertiesMethods.inc" -->
<!-- #INCLUDE FILE="AuthorizationRules.inc" -->
<!-- #INCLUDE FILE="ObjectFactoryMethods.inc" -->

#Region " Data Access "
<% If objInfo.IsGeneratedClass Then %>
<!-- #INCLUDE FILE="ObjectCriteria.inc" -->
<!-- #INCLUDE FILE="DataPortalFetch.inc" -->
<% End If %>

#End Region
<% If objInfo.IsGeneratedPartial Then %>

#Region " Delegation Methods "

<%=Indent(i)%>Private Delegate Function predicateEx(Of U, V)(ByVal obj1 As U, ByVal obj2 As V) As Boolean
<%=Indent(i)%>Private Delegate Sub actionEx(Of U, V)(ByVal obj1 As U, ByVal obj2 As V)

<%=Indent(i)%>'
<%=Indent(i)%>' Fetch
<%=Indent(i)%>'
<%=Indent(i)%><NonSerialized()> _
<%=Indent(i)%>Private executeFetchDelegate  As predicateEx(Of <%If objInfo.UseAdoTransaction Then%>SqlTransaction<%Else%>SqlConnection<%End If%>, Criteria) = Nothing
<%=Indent(i)%>Private Function OnExecuteFetch(<%If objInfo.UseAdoTransaction Then%>ByVal tr As SqlTransaction<%Else%>ByVal cn As SqlConnection<%End If%>, ByVal criteria As Criteria) As Boolean
<% i+=1 %>
<%=Indent(i)%>If Not executeFetchDelegate Is Nothing Then
<%=Indent(i+1)%>Return executeFetchDelegate(<%If objInfo.UseAdoTransaction Then%>tr<%else%>cn<%End If%>, criteria)
<%=Indent(i)%>End If
<%=Indent(i)%>Return True
<% i-=1 %>
<%=Indent(i)%>End Function

<%=Indent(i)%><NonSerialized()> _
<%=Indent(i)%>Private executeFetchCompleteDelegate As actionEx(Of SqlCommand, Criteria) = Nothing
<%=Indent(i)%>Private Sub OnExecuteFetchComplete(ByVal cm As SqlCommand,ByVal criteria As Criteria)
<% i+=1 %>
<%=Indent(i)%>If Not executeFetchCompleteDelegate Is Nothing Then
<%=Indent(i+1)%>executeFetchCompleteDelegate(cm, criteria)
<%=Indent(i)%>End If
<% i-=1 %>
<%=Indent(i)%>End Sub

<%=Indent(i)%><NonSerialized()> _
<%=Indent(i)%>Private fetchObjectCompleteDelegate As Action(Of SafeDataReader) = Nothing
<%=Indent(i)%>Private Sub onFetchObjectComplete(ByVal dr As SafeDataReader)
<% i+=1 %>
<%=Indent(i)%>If Not fetchObjectCompleteDelegate Is Nothing Then
<%=Indent(i+1)%>fetchObjectCompleteDelegate(dr)
<%=Indent(i)%>End If
<% i-=1 %>
<%=Indent(i)%>End Sub

<%=Indent(i)%><NonSerialized()> _
<%=Indent(i)%>Private fetchChildrenCompleteDelegate As Action(Of SafeDataReader) = Nothing
<%=Indent(i)%>Private Sub onFetchChildrenComplete(ByVal dr As SafeDataReader)
<% i+=1 %>
<%=Indent(i)%>If Not fetchChildrenCompleteDelegate Is Nothing Then
<%=Indent(i+1)%>fetchChildrenCompleteDelegate(dr)
<%=Indent(i)%>End If
<% i-=1 %>
<%=Indent(i)%>End Sub

#End Region 

<% End If %>
<% i-=1 %>
<%=Indent(i)%>End Class

<% If Not ClassNamespace Is Nothing AndAlso ClassNamespace.Length > 0 Then %>End Namespace<%End If%>