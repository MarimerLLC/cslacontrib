
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using System.Configuration;
using System.IO;
using System.ComponentModel;
using Csla.Validation;
namespace Northwind.CSLA.Library
{
	/// <summary>
	///	CategoryProducts Generated by MyGeneration using the CSLA Object Mapping template
	/// </summary>
	[Serializable()]
	[TypeConverter(typeof(CategoryProductsConverter))]
	public partial class CategoryProducts : BusinessListBase<CategoryProducts, CategoryProduct>, ICustomTypeDescriptor, IVEHasBrokenRules
	{
		#region Business Methods
		private string _ErrorMessage = string.Empty;
		public string ErrorMessage
		{
			get { return _ErrorMessage; }
		}
		// One To Many
		public CategoryProduct this[Product myProduct]
		{
			get
			{
				foreach (CategoryProduct product in this)
					if (product.ProductID == myProduct.ProductID)
						return product;
				return null;
			}
		}
		public new System.Collections.Generic.IList<CategoryProduct> Items
		{
			get { return base.Items; }
		}
		public CategoryProduct GetItem(Product myProduct)
		{
			foreach (CategoryProduct product in this)
				if (product.ProductID == myProduct.ProductID)
					return product;
			return null;
		}
		public CategoryProduct Add(string productName) // One to Many 
		{
			 CategoryProduct product = CategoryProduct.New(productName);
			 this.Add(product);
			 return product;
		}
		public void Remove(Product myProduct)
		{
			foreach (CategoryProduct product in this)
			{
				if (product.ProductID == myProduct.ProductID)
				{
					Remove(product);
					break;
				}
			}
		}
		public bool Contains(Product myProduct)
		{
			foreach (CategoryProduct product in this)
				if (product.ProductID == myProduct.ProductID)
					return true;
			return false;
		}
		public bool ContainsDeleted(Product myProduct)
		{
			foreach (CategoryProduct product in DeletedList)
				if (product.ProductID == myProduct.ProductID)
					return true;
			return false;
		}
		#endregion
		#region ValidationRules
		public IVEHasBrokenRules HasBrokenRules
		{
			get
			{
				IVEHasBrokenRules hasBrokenRules=null;
				foreach(CategoryProduct categoryProduct in this)
					if ((hasBrokenRules = categoryProduct.HasBrokenRules) != null) return hasBrokenRules;
				return hasBrokenRules;
			}
		}
		public BrokenRulesCollection BrokenRules
		{
			get
			{
			IVEHasBrokenRules hasBrokenRules = HasBrokenRules;
			return (hasBrokenRules != null ? hasBrokenRules.BrokenRules : null);
			}
		}
		#endregion
		#region Factory Methods
		internal static CategoryProducts New()
		{
			return new CategoryProducts();
		}
		internal static CategoryProducts Get(SafeDataReader dr)
		{
			return new CategoryProducts(dr);
		}
		public static CategoryProducts GetByCategoryID(int? categoryID)
		{
			try
			{
				return DataPortal.Fetch<CategoryProducts>(new CategoryIDCriteria(categoryID));
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on CategoryProducts.GetByCategoryID", ex);
			}
		}
		private CategoryProducts()
		{
			MarkAsChild();
		}
		internal CategoryProducts(SafeDataReader dr)
		{
			MarkAsChild();
			Fetch(dr);
		}
		#endregion
		#region Data Access Portal
		// called to load data from the database
		private void Fetch(SafeDataReader dr)
		{
			this.RaiseListChangedEvents = false;
			while (dr.Read())
				this.Add(CategoryProduct.Get(dr));
			this.RaiseListChangedEvents = true;
		}
		[Serializable()]
		private class CategoryIDCriteria
		{
			public CategoryIDCriteria(int? categoryID)
			{
				_CategoryID = categoryID;
			}
			private int? _CategoryID;
			public int? CategoryID
			{
				get { return _CategoryID; }
				set { _CategoryID = value; }
			}
		}
		private void DataPortal_Fetch(CategoryIDCriteria criteria)
		{
			this.RaiseListChangedEvents = false;
			Database.LogInfo("CategoryProducts.DataPortal_FetchCategoryID", GetHashCode());
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					using (SqlCommand cm = cn.CreateCommand())
					{
						cm.CommandType = CommandType.StoredProcedure;
						cm.CommandText = "getProductsByCategoryID";
						cm.Parameters.AddWithValue("@CategoryID", criteria.CategoryID);
						using (SafeDataReader dr = new SafeDataReader(cm.ExecuteReader()))
						{
							while (dr.Read()) this.Add(new CategoryProduct(dr));
						}
					}
				}
			}
			catch (Exception ex)
			{
				Database.LogException("CategoryProducts.DataPortal_FetchCategoryID", ex);
				throw new DbCslaException("CategoryProducts.DataPortal_Fetch", ex);
			}
			this.RaiseListChangedEvents = true;
		}
		internal void Update(Category category)
		{
			this.RaiseListChangedEvents = false;
			try
			{
				// update (thus deleting) any deleted child objects
				foreach (CategoryProduct obj in DeletedList)
					obj.Delete();// TODO: Should this be SQLDelete
				// now that they are deleted, remove them from memory too
				DeletedList.Clear();
				// add/update any current child objects
				foreach (CategoryProduct obj in this)
				{
					if (obj.IsNew)
						obj.Insert(category);
					else
						obj.Update(category);
				}
			}
			finally
			{
				this.RaiseListChangedEvents = true;
			}
		}
		#endregion
		#region ICustomTypeDescriptor impl
		public String GetClassName()
		{ return TypeDescriptor.GetClassName(this, true); }
		public AttributeCollection GetAttributes()
		{ return TypeDescriptor.GetAttributes(this, true); }
		public String GetComponentName()
		{ return TypeDescriptor.GetComponentName(this, true); }
		public TypeConverter GetConverter()
		{ return TypeDescriptor.GetConverter(this, true); }
		public EventDescriptor GetDefaultEvent()
		{ return TypeDescriptor.GetDefaultEvent(this, true); }
		public PropertyDescriptor GetDefaultProperty()
		{ return TypeDescriptor.GetDefaultProperty(this, true); }
		public object GetEditor(Type editorBaseType)
		{ return TypeDescriptor.GetEditor(this, editorBaseType, true); }
		public EventDescriptorCollection GetEvents(Attribute[] attributes)
		{ return TypeDescriptor.GetEvents(this, attributes, true); }
		public EventDescriptorCollection GetEvents()
		{ return TypeDescriptor.GetEvents(this, true); }
		public object GetPropertyOwner(PropertyDescriptor pd)
		{ return this; }
		/// <summary>
		/// Called to get the properties of this type. Returns properties with certain
		/// attributes. this restriction is not implemented here.
		/// </summary>
		/// <param name="attributes"></param>
		/// <returns></returns>
		public PropertyDescriptorCollection GetProperties(Attribute[] attributes)
		{ return GetProperties(); }
		/// <summary>
		/// Called to get the properties of this type.
		/// </summary>
		/// <returns></returns>
		public PropertyDescriptorCollection GetProperties()
		{
			// Create a collection object to hold property descriptors
			PropertyDescriptorCollection pds = new PropertyDescriptorCollection(null);
			// Iterate the list 
			for (int i = 0; i < this.Items.Count; i++)
			{
				// Create a property descriptor for the item and add to the property descriptor collection
				CategoryProductsPropertyDescriptor pd = new CategoryProductsPropertyDescriptor(this, i);
				pds.Add(pd);
			}
			// return the property descriptor collection
			return pds;
		}
		#endregion
	} // Class
	#region Property Descriptor
	/// <summary>
	/// Summary description for CollectionPropertyDescriptor.
	/// </summary>
	public partial class CategoryProductsPropertyDescriptor : vlnListPropertyDescriptor
	{
		private CategoryProduct Item { get { return (CategoryProduct) _Item;} }
		public CategoryProductsPropertyDescriptor(CategoryProducts collection, int index):base(collection, index){;}
	}
	#endregion
	#region Converter
	internal class CategoryProductsConverter : ExpandableObjectConverter
	{
		public override object ConvertTo(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destType)
		{
			if (destType == typeof(string) && value is CategoryProducts)
			{
				// Return department and department role separated by comma.
				return ((CategoryProducts) value).Items.Count.ToString() + " Products";
			}
			return base.ConvertTo(context, culture, value, destType);
		}
	}
	#endregion
} // Namespace
