
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using System.Configuration;
using System.IO;
using System.ComponentModel;
using Csla.Validation;
namespace Northwind.CSLA.Library
{
	/// <summary>
	///	CustomerDemographicCustomerCustomerDemo Generated by MyGeneration using the CSLA Object Mapping template
	/// </summary>
	[Serializable()]
	[TypeConverter(typeof(CustomerDemographicCustomerCustomerDemoConverter))]
	public partial class CustomerDemographicCustomerCustomerDemo : BusinessBase<CustomerDemographicCustomerCustomerDemo>, IVEHasBrokenRules
	{
		#region Business Methods
		private string _ErrorMessage = string.Empty;
		public string ErrorMessage
		{
			get { return _ErrorMessage; }
		}
		private string _CustomerID = string.Empty;
		[System.ComponentModel.DataObjectField(true, true)]
		public string CustomerID
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyCustomer != null) _CustomerID = _MyCustomer.CustomerID;
				return _CustomerID;
			}
		}
		private Customer _MyCustomer;
		[System.ComponentModel.DataObjectField(true, true)]
		public Customer MyCustomer
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyCustomer == null && _CustomerID != null) _MyCustomer = Customer.Get(_CustomerID);
				return _MyCustomer;
			}
		}
		private string _Customer_CompanyName = string.Empty;
		public string Customer_CompanyName
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Customer_CompanyName;
			}
		}
		private string _Customer_ContactName = string.Empty;
		public string Customer_ContactName
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Customer_ContactName;
			}
		}
		private string _Customer_ContactTitle = string.Empty;
		public string Customer_ContactTitle
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Customer_ContactTitle;
			}
		}
		private string _Customer_Address = string.Empty;
		public string Customer_Address
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Customer_Address;
			}
		}
		private string _Customer_City = string.Empty;
		public string Customer_City
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Customer_City;
			}
		}
		private string _Customer_Region = string.Empty;
		public string Customer_Region
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Customer_Region;
			}
		}
		private string _Customer_PostalCode = string.Empty;
		public string Customer_PostalCode
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Customer_PostalCode;
			}
		}
		private string _Customer_Country = string.Empty;
		public string Customer_Country
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Customer_Country;
			}
		}
		private string _Customer_Phone = string.Empty;
		public string Customer_Phone
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Customer_Phone;
			}
		}
		private string _Customer_Fax = string.Empty;
		public string Customer_Fax
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Customer_Fax;
			}
		}
		// TODO: Check CustomerDemographicCustomerCustomerDemo.GetIdValue to assure that the ID returned is unique
		/// <summary>
		/// Overrides Base GetIdValue - Used internally by CSLA to determine equality
		/// </summary>
		/// <returns>A Unique ID for the current CustomerDemographicCustomerCustomerDemo</returns>
		protected override object GetIdValue()
		{
			return _CustomerID;
		}
		// TODO: Replace base CustomerDemographicCustomerCustomerDemo.ToString function as necessary
		/// <summary>
		/// Overrides Base ToString
		/// </summary>
		/// <returns>A string representation of current CustomerDemographicCustomerCustomerDemo</returns>
		//public override string ToString()
		//{
		//  return base.ToString();
		//}
		#endregion
		#region ValidationRules
		[NonSerialized]
		private bool _CheckingBrokenRules=false;
		public IVEHasBrokenRules HasBrokenRules
		{
			get
			{
				if(_CheckingBrokenRules)return null;
				if (BrokenRulesCollection.Count > 0) return this;
				try
				{
					_CheckingBrokenRules=true;
				 IVEHasBrokenRules hasBrokenRules = null;
				 return hasBrokenRules;
				}
				finally
				{
					_CheckingBrokenRules=false;
				}
			}
		}
		public BrokenRulesCollection BrokenRules
		{
			get
			{
				IVEHasBrokenRules hasBrokenRules = HasBrokenRules;
				if (this.Equals(hasBrokenRules)) return BrokenRulesCollection;
				return (hasBrokenRules != null ? hasBrokenRules.BrokenRules : null);
			}
		}
		protected override void AddBusinessRules()
		{
			// TODO:  Add other validation rules
		}
		// Sample data comparison validation rule
		//private bool StartDateGTEndDate(object target, Csla.Validation.RuleArgs e)
		//{
		//	if (_started > _ended)
		//	{
		//		e.Description = "Start date can't be after end date";
		//		return false;
		//	}
		//	else
		//		return true;
		//}
		#endregion
		#region Authorization Rules
		protected override void AddAuthorizationRules()
		{
			//TODO: Who can read/write which fields
			//AuthorizationRules.AllowRead(CustomerID, "<Role(s)>");
		}
		public static bool CanAddObject()
		{
			// TODO: Can Add Authorization
			//return Csla.ApplicationContext.User.IsInRole("ProjectManager");
			return true;
		}
		public static bool CanGetObject()
		{
			// TODO: CanGet Authorization
			return true;
		}
		public static bool CanDeleteObject()
		{
			// TODO: CanDelete Authorization
			//bool result = false;
			//if (Csla.ApplicationContext.User.IsInRole("ProjectManager"))result = true;
			//if (Csla.ApplicationContext.User.IsInRole("Administrator"))result = true;
			//return result;
			return true;
		}
		public static bool CanEditObject()
		{
			// TODO: CanEdit Authorization
			//return Csla.ApplicationContext.User.IsInRole("ProjectManager");
			return true;
		}
		#endregion
		#region Factory Methods
		public int CurrentEditLevel
		{ get { return EditLevel; } }
		internal static CustomerDemographicCustomerCustomerDemo New(Customer myCustomer)
		{
			return new CustomerDemographicCustomerCustomerDemo(myCustomer);
		}
		internal static CustomerDemographicCustomerCustomerDemo Get(SafeDataReader dr)
		{
			return new CustomerDemographicCustomerCustomerDemo(dr);
		}
		public CustomerDemographicCustomerCustomerDemo()
		{
			MarkAsChild();


			ValidationRules.CheckRules();
		}
		private CustomerDemographicCustomerCustomerDemo(Customer myCustomer)
		{
			MarkAsChild();
			// TODO: Add any initialization & defaults

			_MyCustomer  = myCustomer;
			ValidationRules.CheckRules();
		}
		internal CustomerDemographicCustomerCustomerDemo(SafeDataReader dr)
		{
			MarkAsChild();
			Fetch(dr);
		}
		#endregion
		#region Data Access Portal
		private void Fetch(SafeDataReader dr)
		{
			Database.LogInfo("CustomerDemographicCustomerCustomerDemo.FetchDR", GetHashCode());
			try
			{
				_CustomerID = dr.GetString("CustomerID");
				_Customer_CompanyName = dr.GetString("Customer_CompanyName");
				_Customer_ContactName = dr.GetString("Customer_ContactName");
				_Customer_ContactTitle = dr.GetString("Customer_ContactTitle");
				_Customer_Address = dr.GetString("Customer_Address");
				_Customer_City = dr.GetString("Customer_City");
				_Customer_Region = dr.GetString("Customer_Region");
				_Customer_PostalCode = dr.GetString("Customer_PostalCode");
				_Customer_Country = dr.GetString("Customer_Country");
				_Customer_Phone = dr.GetString("Customer_Phone");
				_Customer_Fax = dr.GetString("Customer_Fax");
			}
			catch (Exception ex) // FKItem Fetch
			{
				Database.LogException("CustomerDemographicCustomerCustomerDemo.FetchDR", ex);
				throw new DbCslaException("CustomerDemographicCustomerCustomerDemo.Fetch", ex);
			}
			MarkOld();
		}
		internal void Insert(CustomerDemographic myCustomerDemographic)
		{
			// if we're not dirty then don't update the database
			if (!this.IsDirty) return;
			SqlConnection cn = (SqlConnection)ApplicationContext.LocalContext["cn"];
			CustomerCustomerDemo.Add(cn, _MyCustomer, myCustomerDemographic);
			MarkOld();
		}
		internal void Update(CustomerDemographic myCustomerDemographic)
		{
			// if we're not dirty then don't update the database
			if (!this.IsDirty) return;
			SqlConnection cn = (SqlConnection)ApplicationContext.LocalContext["cn"];
			CustomerCustomerDemo.Update(cn, _MyCustomer, myCustomerDemographic);
			MarkOld();
		}
		internal void DeleteSelf(CustomerDemographic myCustomerDemographic)
		{
			// if we're not dirty then don't update the database
			if (!this.IsDirty) return;
			// if we're new then don't update the database
			if (this.IsNew) return;
			SqlConnection cn = (SqlConnection)ApplicationContext.LocalContext["cn"];
			CustomerCustomerDemo.Remove(cn, _CustomerID, myCustomerDemographic.CustomerTypeID);
			MarkNew();
		}
		#endregion
		// Standard Default Code
		#region extension
		CustomerDemographicCustomerCustomerDemoExtension _CustomerDemographicCustomerCustomerDemoExtension = new CustomerDemographicCustomerCustomerDemoExtension();
		[Serializable()]
		partial class CustomerDemographicCustomerCustomerDemoExtension : extensionBase
		{
		}
		[Serializable()]
		class extensionBase
		{
			// Default Values
			// Authorization Rules
			public virtual void AddAuthorizationRules(Csla.Security.AuthorizationRules rules)
			{
				// Needs to be overriden to add new authorization rules
			}
			// Instance Authorization Rules
			public virtual void AddInstanceAuthorizationRules(Csla.Security.AuthorizationRules rules)
			{
				// Needs to be overriden to add new authorization rules
			}
			// Validation Rules
			public virtual void AddValidationRules(Csla.Validation.ValidationRules rules)
			{
				// Needs to be overriden to add new validation rules
			}
			// InstanceValidation Rules
			public virtual void AddInstanceValidationRules(Csla.Validation.ValidationRules rules)
			{
				// Needs to be overriden to add new validation rules
			}
		}
		#endregion
	} // Class
	#region Converter
	internal class CustomerDemographicCustomerCustomerDemoConverter : ExpandableObjectConverter
	{
		public override object ConvertTo(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destType)
		{
			if (destType == typeof(string) && value is CustomerDemographicCustomerCustomerDemo)
			{
				// Return the ToString value
				return ((CustomerDemographicCustomerCustomerDemo)value).ToString();
			}
			return base.ConvertTo(context, culture, value, destType);
		}
	}
	#endregion
} // Namespace


//// The following is a sample Extension File.  You can use it to create CustomerDemographicCustomerCustomerDemoExt.cs
//using System;
//using System.Collections.Generic;
//using System.Text;
//using Csla;

//namespace Northwind.CSLA.Library
//{
//  public partial class CustomerDemographicCustomerCustomerDemo
//  {
//    partial class CustomerDemographicCustomerCustomerDemoExtension : extensionBase
//    {
//      // TODO: Override automatic defaults
//      public new void AddAuthorizationRules(Csla.Security.AuthorizationRules rules)
//      {
//        //rules.AllowRead(Dbid, "<Role(s)>");
//      }
//      public new void AddInstanceAuthorizationRules(Csla.Security.AuthorizationRules rules)
//      {
//        //rules.AllowInstanceRead(Dbid, "<Role(s)>");
//      }
//      public new void AddValidationRules(Csla.Validation.ValidationRules rules)
//      {
//        rules.AddRule(
//          Csla.Validation.CommonRules.StringMaxLength,
//          new Csla.Validation.CommonRules.MaxLengthRuleArgs("Name", 100));
//      }
//      public new void AddInstanceValidationRules(Csla.Validation.ValidationRules rules)
//      {
//        rules.AddInstanceRule(/* Instance Validation Rule */);
//      }
//    }
//  }
//}
