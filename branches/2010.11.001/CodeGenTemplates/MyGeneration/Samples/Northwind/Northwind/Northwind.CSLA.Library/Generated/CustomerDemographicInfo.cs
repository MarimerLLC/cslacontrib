
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using System.Configuration;
using System.IO;
using System.ComponentModel;
using System.Collections.Generic;
namespace Northwind.CSLA.Library
{
	public delegate void CustomerDemographicInfoEvent(object sender);
	/// <summary>
	///	CustomerDemographicInfo Generated by MyGeneration using the CSLA Object Mapping template
	/// </summary>
	[Serializable()]
	[TypeConverter(typeof(CustomerDemographicInfoConverter))]
	public partial class CustomerDemographicInfo : ReadOnlyBase<CustomerDemographicInfo>, IDisposable
	{
		public event CustomerDemographicInfoEvent Changed;
		private void OnChange()
		{
			if (Changed != null) Changed(this);
		}
		#region Collection
		protected static List<CustomerDemographicInfo> _AllList = new List<CustomerDemographicInfo>();
		private static Dictionary<string, CustomerDemographicInfo> _AllByPrimaryKey = new Dictionary<string, CustomerDemographicInfo>();
		private static void ConvertListToDictionary()
		{
			List<CustomerDemographicInfo> remove = new List<CustomerDemographicInfo>();
			foreach (CustomerDemographicInfo tmp in _AllList)
			{
				_AllByPrimaryKey[tmp.CustomerTypeID.ToString()]=tmp; // Primary Key
				remove.Add(tmp);
			}
			foreach (CustomerDemographicInfo tmp in remove)
				_AllList.Remove(tmp);
		}
		internal static void AddList(CustomerDemographicInfoList lst)
		{
			foreach (CustomerDemographicInfo item in lst) _AllList.Add(item);
		}
		public static CustomerDemographicInfo GetExistingByPrimaryKey(string customerTypeID)
		{
			ConvertListToDictionary();
			string key = customerTypeID.ToString();
			if (_AllByPrimaryKey.ContainsKey(key)) return _AllByPrimaryKey[key]; 
			return null;
		}
		#endregion
		#region Business Methods
		private string _ErrorMessage = string.Empty;
		public string ErrorMessage
		{
			get { return _ErrorMessage; }
		}
		protected CustomerDemographic _Editable;
		private IVEHasBrokenRules HasBrokenRules
		{
			get
			{
				IVEHasBrokenRules hasBrokenRules = null;
				if (_Editable != null)
					hasBrokenRules = _Editable.HasBrokenRules;
				return hasBrokenRules;
			}
		}
		private string _CustomerTypeID = string.Empty;
		[System.ComponentModel.DataObjectField(true, true)]
		public string CustomerTypeID
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _CustomerTypeID;
			}
		}
		private string _CustomerDesc = string.Empty;
		public string CustomerDesc
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _CustomerDesc;
			}
		}
		private int _CustomerDemographicCustomerCustomerDemoCount = 0;
		/// <summary>
		/// Count of CustomerDemographicCustomerCustomerDemos for this CustomerDemographic
		/// </summary>
		public int CustomerDemographicCustomerCustomerDemoCount
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _CustomerDemographicCustomerCustomerDemoCount;
			}
		}
		private CustomerCustomerDemoInfoList _CustomerDemographicCustomerCustomerDemos = null;
		[TypeConverter(typeof(CustomerCustomerDemoInfoListConverter))]
		public CustomerCustomerDemoInfoList CustomerDemographicCustomerCustomerDemos
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_CustomerDemographicCustomerCustomerDemoCount > 0 && _CustomerDemographicCustomerCustomerDemos == null)
					_CustomerDemographicCustomerCustomerDemos = CustomerCustomerDemoInfoList.GetByCustomerTypeID(_CustomerTypeID);
				return _CustomerDemographicCustomerCustomerDemos;
			}
		}
		// TODO: Replace base CustomerDemographicInfo.ToString function as necessary
		/// <summary>
		/// Overrides Base ToString
		/// </summary>
		/// <returns>A string representation of current CustomerDemographicInfo</returns>
		//public override string ToString()
		//{
		//  return base.ToString();
		//}
		// TODO: Check CustomerDemographicInfo.GetIdValue to assure that the ID returned is unique
		/// <summary>
		/// Overrides Base GetIdValue - Used internally by CSLA to determine equality
		/// </summary>
		/// <returns>A Unique ID for the current CustomerDemographicInfo</returns>
		protected override object GetIdValue()
		{
			return _CustomerTypeID;
		}
		#endregion
		#region Factory Methods
		private CustomerDemographicInfo()
		{/* require use of factory methods */
			_AllList.Add(this);
		}
		public void Dispose()
		{
			_AllList.Remove(this);
			_AllByPrimaryKey.Remove(CustomerTypeID.ToString());
		}
		public virtual CustomerDemographic Get()
		{
			return _Editable = CustomerDemographic.Get(_CustomerTypeID);
		}
		public static void Refresh(CustomerDemographic tmp)
		{
			CustomerDemographicInfo tmpInfo = GetExistingByPrimaryKey(tmp.CustomerTypeID);
			if (tmpInfo == null) return;
			tmpInfo.RefreshFields(tmp);
		}
		private void RefreshFields(CustomerDemographic tmp)
		{
			_CustomerDesc = tmp.CustomerDesc;
			_CustomerDemographicInfoExtension.Refresh(this);
			OnChange();// raise an event
		}
		public static CustomerDemographicInfo Get(string customerTypeID)
		{
			//if (!CanGetObject())
			//  throw new System.Security.SecurityException("User not authorized to view a CustomerDemographic");
			try
			{
				CustomerDemographicInfo tmp = GetExistingByPrimaryKey(customerTypeID);
				if (tmp == null)
				{
					tmp = DataPortal.Fetch<CustomerDemographicInfo>(new PKCriteria(customerTypeID));
					_AllList.Add(tmp);
				}
				if (tmp.ErrorMessage == "No Record Found") tmp = null;
				return tmp;
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on CustomerDemographicInfo.Get", ex);
			}
		}
		#endregion
		#region Data Access Portal
		internal CustomerDemographicInfo(SafeDataReader dr)
		{
			Database.LogInfo("CustomerDemographicInfo.Constructor", GetHashCode());
			try
			{
				ReadData(dr);
			}
			catch (Exception ex)
			{
				Database.LogException("CustomerDemographicInfo.Constructor", ex);
				throw new DbCslaException("CustomerDemographicInfo.Constructor", ex);
			}
		}
		[Serializable()]
		protected class PKCriteria
		{
			private string _CustomerTypeID;
			public string CustomerTypeID
			{ get { return _CustomerTypeID; } }
			public PKCriteria(string customerTypeID)
			{
				_CustomerTypeID = customerTypeID;
			}
		}
		private void ReadData(SafeDataReader dr)
		{
			Database.LogInfo("CustomerDemographicInfo.ReadData", GetHashCode());
			try
			{
				_CustomerTypeID = dr.GetString("CustomerTypeID");
				_CustomerDesc = dr.GetString("CustomerDesc");
				_CustomerDemographicCustomerCustomerDemoCount = dr.GetInt32("CustomerCustomerDemoCount");
			}
			catch (Exception ex)
			{
				Database.LogException("CustomerDemographicInfo.ReadData", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("CustomerDemographicInfo.ReadData", ex);
			}
		}
		private void DataPortal_Fetch(PKCriteria criteria)
		{
			Database.LogInfo("CustomerDemographicInfo.DataPortal_Fetch", GetHashCode());
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					ApplicationContext.LocalContext["cn"] = cn;
					using (SqlCommand cm = cn.CreateCommand())
					{
						cm.CommandType = CommandType.StoredProcedure;
						cm.CommandText = "getCustomerDemographic";
						cm.Parameters.AddWithValue("@CustomerTypeID", criteria.CustomerTypeID);
						using (SafeDataReader dr = new SafeDataReader(cm.ExecuteReader()))
						{
							if (!dr.Read())
							{
								_ErrorMessage = "No Record Found";
								return;
							}
							ReadData(dr);
						}
					}
					// removing of item only needed for local data portal
					if (ApplicationContext.ExecutionLocation == ApplicationContext.ExecutionLocations.Client)
						ApplicationContext.LocalContext.Remove("cn");
				}
			}
			catch (Exception ex)
			{
				Database.LogException("CustomerDemographicInfo.DataPortal_Fetch", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("CustomerDemographicInfo.DataPortal_Fetch", ex);
			}
		}
		#endregion
		// Standard Refresh
		#region extension
		CustomerDemographicInfoExtension _CustomerDemographicInfoExtension = new CustomerDemographicInfoExtension();
		[Serializable()]
		partial class CustomerDemographicInfoExtension : extensionBase {}
		[Serializable()]
		class extensionBase
		{
			// Default Refresh
			public virtual void Refresh(CustomerDemographicInfo tmp) { }
		}
		#endregion
	} // Class
	#region Converter
	internal class CustomerDemographicInfoConverter : ExpandableObjectConverter
	{
		public override object ConvertTo(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destType)
		{
			if (destType == typeof(string) && value is CustomerDemographicInfo)
			{
				// Return the ToString value
				return ((CustomerDemographicInfo)value).ToString();
			}
			return base.ConvertTo(context, culture, value, destType);
		}
	}
	#endregion
} // Namespace
