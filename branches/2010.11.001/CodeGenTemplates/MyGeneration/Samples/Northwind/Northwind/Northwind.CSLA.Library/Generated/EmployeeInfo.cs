
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using System.Configuration;
using System.IO;
using System.ComponentModel;
using System.Collections.Generic;
namespace Northwind.CSLA.Library
{
	public delegate void EmployeeInfoEvent(object sender);
	/// <summary>
	///	EmployeeInfo Generated by MyGeneration using the CSLA Object Mapping template
	/// </summary>
	[Serializable()]
	[TypeConverter(typeof(EmployeeInfoConverter))]
	public partial class EmployeeInfo : ReadOnlyBase<EmployeeInfo>, IDisposable
	{
		public event EmployeeInfoEvent Changed;
		private void OnChange()
		{
			if (Changed != null) Changed(this);
		}
		#region Collection
		protected static List<EmployeeInfo> _AllList = new List<EmployeeInfo>();
		private static Dictionary<string, EmployeeInfo> _AllByPrimaryKey = new Dictionary<string, EmployeeInfo>();
		private static void ConvertListToDictionary()
		{
			List<EmployeeInfo> remove = new List<EmployeeInfo>();
			foreach (EmployeeInfo tmp in _AllList)
			{
				_AllByPrimaryKey[tmp.EmployeeID.ToString()]=tmp; // Primary Key
				remove.Add(tmp);
			}
			foreach (EmployeeInfo tmp in remove)
				_AllList.Remove(tmp);
		}
		internal static void AddList(EmployeeInfoList lst)
		{
			foreach (EmployeeInfo item in lst) _AllList.Add(item);
		}
		public static EmployeeInfo GetExistingByPrimaryKey(int employeeID)
		{
			ConvertListToDictionary();
			string key = employeeID.ToString();
			if (_AllByPrimaryKey.ContainsKey(key)) return _AllByPrimaryKey[key]; 
			return null;
		}
		#endregion
		#region Business Methods
		private string _ErrorMessage = string.Empty;
		public string ErrorMessage
		{
			get { return _ErrorMessage; }
		}
		protected Employee _Editable;
		private IVEHasBrokenRules HasBrokenRules
		{
			get
			{
				IVEHasBrokenRules hasBrokenRules = null;
				if (_Editable != null)
					hasBrokenRules = _Editable.HasBrokenRules;
				return hasBrokenRules;
			}
		}
		private int _EmployeeID;
		[System.ComponentModel.DataObjectField(true, true)]
		public int EmployeeID
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _EmployeeID;
			}
		}
		private string _LastName = string.Empty;
		public string LastName
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _LastName;
			}
		}
		private string _FirstName = string.Empty;
		public string FirstName
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _FirstName;
			}
		}
		private string _Title = string.Empty;
		public string Title
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Title;
			}
		}
		private string _TitleOfCourtesy = string.Empty;
		public string TitleOfCourtesy
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _TitleOfCourtesy;
			}
		}
		private string _BirthDate = string.Empty;
		public string BirthDate
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _BirthDate;
			}
		}
		private string _HireDate = string.Empty;
		public string HireDate
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _HireDate;
			}
		}
		private string _Address = string.Empty;
		public string Address
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Address;
			}
		}
		private string _City = string.Empty;
		public string City
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _City;
			}
		}
		private string _Region = string.Empty;
		public string Region
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Region;
			}
		}
		private string _PostalCode = string.Empty;
		public string PostalCode
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _PostalCode;
			}
		}
		private string _Country = string.Empty;
		public string Country
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Country;
			}
		}
		private string _HomePhone = string.Empty;
		public string HomePhone
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _HomePhone;
			}
		}
		private string _Extension = string.Empty;
		public string Extension
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Extension;
			}
		}
		private byte[] _Photo;
		public byte[] Photo
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Photo;
			}
		}
		private string _Notes = string.Empty;
		public string Notes
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Notes;
			}
		}
		private int? _ReportsTo;
		public int? ReportsTo
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyParent != null) _ReportsTo = _MyParent.EmployeeID;
				return _ReportsTo;
			}
		}
		private EmployeeInfo _MyParent;
		public EmployeeInfo MyParent
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyParent == null && _ReportsTo != null) _MyParent = EmployeeInfo.Get((int)_ReportsTo);
				return _MyParent;
			}
		}
		private string _PhotoPath = string.Empty;
		public string PhotoPath
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _PhotoPath;
			}
		}
		private int _ChildEmployeeCount = 0;
		/// <summary>
		/// Count of ChildEmployees for this Employee
		/// </summary>
		public int ChildEmployeeCount
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _ChildEmployeeCount;
			}
		}
		private EmployeeInfoList _ChildEmployees = null;
		[TypeConverter(typeof(EmployeeInfoListConverter))]
		public EmployeeInfoList ChildEmployees
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_ChildEmployeeCount > 0 && _ChildEmployees == null)
					_ChildEmployees = EmployeeInfoList.GetChildren(_EmployeeID);
				return _ChildEmployees;
			}
		}
		private int _EmployeeEmployeeTerritoryCount = 0;
		/// <summary>
		/// Count of EmployeeEmployeeTerritories for this Employee
		/// </summary>
		public int EmployeeEmployeeTerritoryCount
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _EmployeeEmployeeTerritoryCount;
			}
		}
		private EmployeeTerritoryInfoList _EmployeeEmployeeTerritories = null;
		[TypeConverter(typeof(EmployeeTerritoryInfoListConverter))]
		public EmployeeTerritoryInfoList EmployeeEmployeeTerritories
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_EmployeeEmployeeTerritoryCount > 0 && _EmployeeEmployeeTerritories == null)
					_EmployeeEmployeeTerritories = EmployeeTerritoryInfoList.GetByEmployeeID(_EmployeeID);
				return _EmployeeEmployeeTerritories;
			}
		}
		private int _EmployeeOrderCount = 0;
		/// <summary>
		/// Count of EmployeeOrders for this Employee
		/// </summary>
		public int EmployeeOrderCount
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _EmployeeOrderCount;
			}
		}
		private OrderInfoList _EmployeeOrders = null;
		[TypeConverter(typeof(OrderInfoListConverter))]
		public OrderInfoList EmployeeOrders
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_EmployeeOrderCount > 0 && _EmployeeOrders == null)
					_EmployeeOrders = OrderInfoList.GetByEmployeeID(_EmployeeID);
				return _EmployeeOrders;
			}
		}
		// TODO: Replace base EmployeeInfo.ToString function as necessary
		/// <summary>
		/// Overrides Base ToString
		/// </summary>
		/// <returns>A string representation of current EmployeeInfo</returns>
		//public override string ToString()
		//{
		//  return base.ToString();
		//}
		// TODO: Check EmployeeInfo.GetIdValue to assure that the ID returned is unique
		/// <summary>
		/// Overrides Base GetIdValue - Used internally by CSLA to determine equality
		/// </summary>
		/// <returns>A Unique ID for the current EmployeeInfo</returns>
		protected override object GetIdValue()
		{
			return _EmployeeID;
		}
		#endregion
		#region Factory Methods
		private EmployeeInfo()
		{/* require use of factory methods */
			_AllList.Add(this);
		}
		public void Dispose()
		{
			_AllList.Remove(this);
			_AllByPrimaryKey.Remove(EmployeeID.ToString());
		}
		public virtual Employee Get()
		{
			return _Editable = Employee.Get(_EmployeeID);
		}
		public static void Refresh(Employee tmp)
		{
			EmployeeInfo tmpInfo = GetExistingByPrimaryKey(tmp.EmployeeID);
			if (tmpInfo == null) return;
			tmpInfo.RefreshFields(tmp);
		}
		private void RefreshFields(Employee tmp)
		{
			_LastName = tmp.LastName;
			_FirstName = tmp.FirstName;
			_Title = tmp.Title;
			_TitleOfCourtesy = tmp.TitleOfCourtesy;
			_BirthDate = tmp.BirthDate;
			_HireDate = tmp.HireDate;
			_Address = tmp.Address;
			_City = tmp.City;
			_Region = tmp.Region;
			_PostalCode = tmp.PostalCode;
			_Country = tmp.Country;
			_HomePhone = tmp.HomePhone;
			_Extension = tmp.Extension;
			_Photo = tmp.Photo;
			_Notes = tmp.Notes;
			_ReportsTo = tmp.ReportsTo;
			_PhotoPath = tmp.PhotoPath;
			_EmployeeInfoExtension.Refresh(this);
			_MyParent = null;
			OnChange();// raise an event
		}
		public static EmployeeInfo Get(int employeeID)
		{
			//if (!CanGetObject())
			//  throw new System.Security.SecurityException("User not authorized to view a Employee");
			try
			{
				EmployeeInfo tmp = GetExistingByPrimaryKey(employeeID);
				if (tmp == null)
				{
					tmp = DataPortal.Fetch<EmployeeInfo>(new PKCriteria(employeeID));
					_AllList.Add(tmp);
				}
				if (tmp.ErrorMessage == "No Record Found") tmp = null;
				return tmp;
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on EmployeeInfo.Get", ex);
			}
		}
		#endregion
		#region Data Access Portal
		internal EmployeeInfo(SafeDataReader dr)
		{
			Database.LogInfo("EmployeeInfo.Constructor", GetHashCode());
			try
			{
				ReadData(dr);
			}
			catch (Exception ex)
			{
				Database.LogException("EmployeeInfo.Constructor", ex);
				throw new DbCslaException("EmployeeInfo.Constructor", ex);
			}
		}
		[Serializable()]
		protected class PKCriteria
		{
			private int _EmployeeID;
			public int EmployeeID
			{ get { return _EmployeeID; } }
			public PKCriteria(int employeeID)
			{
				_EmployeeID = employeeID;
			}
		}
		private void ReadData(SafeDataReader dr)
		{
			Database.LogInfo("EmployeeInfo.ReadData", GetHashCode());
			try
			{
				_EmployeeID = dr.GetInt32("EmployeeID");
				_LastName = dr.GetString("LastName");
				_FirstName = dr.GetString("FirstName");
				_Title = dr.GetString("Title");
				_TitleOfCourtesy = dr.GetString("TitleOfCourtesy");
				_BirthDate = dr.GetSmartDate("BirthDate").Text;
				_HireDate = dr.GetSmartDate("HireDate").Text;
				_Address = dr.GetString("Address");
				_City = dr.GetString("City");
				_Region = dr.GetString("Region");
				_PostalCode = dr.GetString("PostalCode");
				_Country = dr.GetString("Country");
				_HomePhone = dr.GetString("HomePhone");
				_Extension = dr.GetString("Extension");
				_Photo = (byte[])dr.GetValue("Photo");
				_Notes = dr.GetString("Notes");
				_ReportsTo = (int?)dr.GetValue("ReportsTo");
				_PhotoPath = dr.GetString("PhotoPath");
				_ChildEmployeeCount = dr.GetInt32("ChildCount");
				_EmployeeEmployeeTerritoryCount = dr.GetInt32("EmployeeTerritoryCount");
				_EmployeeOrderCount = dr.GetInt32("OrderCount");
			}
			catch (Exception ex)
			{
				Database.LogException("EmployeeInfo.ReadData", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("EmployeeInfo.ReadData", ex);
			}
		}
		private void DataPortal_Fetch(PKCriteria criteria)
		{
			Database.LogInfo("EmployeeInfo.DataPortal_Fetch", GetHashCode());
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					ApplicationContext.LocalContext["cn"] = cn;
					using (SqlCommand cm = cn.CreateCommand())
					{
						cm.CommandType = CommandType.StoredProcedure;
						cm.CommandText = "getEmployee";
						cm.Parameters.AddWithValue("@EmployeeID", criteria.EmployeeID);
						using (SafeDataReader dr = new SafeDataReader(cm.ExecuteReader()))
						{
							if (!dr.Read())
							{
								_ErrorMessage = "No Record Found";
								return;
							}
							ReadData(dr);
						}
					}
					// removing of item only needed for local data portal
					if (ApplicationContext.ExecutionLocation == ApplicationContext.ExecutionLocations.Client)
						ApplicationContext.LocalContext.Remove("cn");
				}
			}
			catch (Exception ex)
			{
				Database.LogException("EmployeeInfo.DataPortal_Fetch", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("EmployeeInfo.DataPortal_Fetch", ex);
			}
		}
		#endregion
		// Standard Refresh
		#region extension
		EmployeeInfoExtension _EmployeeInfoExtension = new EmployeeInfoExtension();
		[Serializable()]
		partial class EmployeeInfoExtension : extensionBase {}
		[Serializable()]
		class extensionBase
		{
			// Default Refresh
			public virtual void Refresh(EmployeeInfo tmp) { }
		}
		#endregion
	} // Class
	#region Converter
	internal class EmployeeInfoConverter : ExpandableObjectConverter
	{
		public override object ConvertTo(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destType)
		{
			if (destType == typeof(string) && value is EmployeeInfo)
			{
				// Return the ToString value
				return ((EmployeeInfo)value).ToString();
			}
			return base.ConvertTo(context, culture, value, destType);
		}
	}
	#endregion
} // Namespace
