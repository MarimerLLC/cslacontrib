
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using System.Configuration;
using System.IO;
using System.ComponentModel;
using System.Collections.Generic;
namespace Northwind.CSLA.Library
{
	/// <summary>
	///	EmployeeTerritoryInfoList Generated by MyGeneration using the CSLA Object Mapping template
	/// </summary>
	[Serializable()]
	[TypeConverter(typeof(EmployeeTerritoryInfoListConverter))]
	public partial class EmployeeTerritoryInfoList : ReadOnlyListBase<EmployeeTerritoryInfoList, EmployeeTerritoryInfo>, ICustomTypeDescriptor, IDisposable
	{
		#region Business Methods
		internal new IList<EmployeeTerritoryInfo> Items
		{ get { return base.Items; } }
		public void AddEvents()
		{
			foreach (EmployeeTerritoryInfo tmp in this)
			{
				tmp.Changed += new EmployeeTerritoryInfoEvent(tmp_Changed);
			}
		}
		void tmp_Changed(object sender)
		{
			for (int i = 0; i < Count; i++)
			{
				if (base[i] == sender)
					this.OnListChanged(new ListChangedEventArgs(ListChangedType.ItemChanged, i));
			}
		}
		public void Dispose()
		{
			foreach (EmployeeTerritoryInfo tmp in this)
			{
				tmp.Changed -= new EmployeeTerritoryInfoEvent(tmp_Changed);
			}
		}
		#endregion
		#region Factory Methods
		/// <summary>
		/// Return a list of all projects.
		/// </summary>
		public static EmployeeTerritoryInfoList Get()
		{
			try
			{
				EmployeeTerritoryInfoList tmp = DataPortal.Fetch<EmployeeTerritoryInfoList>();
				EmployeeTerritoryInfo.AddList(tmp);
				tmp.AddEvents();
				return tmp;
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on EmployeeTerritoryInfoList.Get", ex);
			}
		}
		// TODO: Add alternative gets - 
		//public static EmployeeTerritoryInfoList Get(<criteria>)
		//{
		//	try
		//	{
		//  	return DataPortal.Fetch<EmployeeTerritoryInfoList>(new FilteredCriteria(<criteria>));
		//	}
		//	catch (Exception ex)
		//	{
		//		throw new DbCslaException("Error on EmployeeTerritoryInfoList.Get", ex);
		//	}
		//}
		public static EmployeeTerritoryInfoList GetByEmployeeID(int employeeID)
		{
			try
			{
				EmployeeTerritoryInfoList tmp = DataPortal.Fetch<EmployeeTerritoryInfoList>(new EmployeeIDCriteria(employeeID));
				EmployeeTerritoryInfo.AddList(tmp);
				tmp.AddEvents();
				return tmp;
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on EmployeeTerritoryInfoList.GetByEmployeeID", ex);
			}
		}
		public static EmployeeTerritoryInfoList GetByTerritoryID(string territoryID)
		{
			try
			{
				EmployeeTerritoryInfoList tmp = DataPortal.Fetch<EmployeeTerritoryInfoList>(new TerritoryIDCriteria(territoryID));
				EmployeeTerritoryInfo.AddList(tmp);
				tmp.AddEvents();
				return tmp;
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on EmployeeTerritoryInfoList.GetByTerritoryID", ex);
			}
		}
		private EmployeeTerritoryInfoList()
		{ /* require use of factory methods */ }
		#endregion
		#region Data Access Portal
		private void DataPortal_Fetch()
		{
			this.RaiseListChangedEvents = false;
			Database.LogInfo("EmployeeTerritoryInfoList.DataPortal_Fetch", GetHashCode());
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					using (SqlCommand cm = cn.CreateCommand())
					{
						cm.CommandType = CommandType.StoredProcedure;
						cm.CommandText = "getEmployeeTerritories";
						using (SafeDataReader dr = new SafeDataReader(cm.ExecuteReader()))
						{
							IsReadOnly = false;
							while (dr.Read()) this.Add(new EmployeeTerritoryInfo(dr));
							IsReadOnly = true;
						}
					}
				}
			}
			catch (Exception ex)
			{
				Database.LogException("EmployeeTerritoryInfoList.DataPortal_Fetch", ex);
				throw new DbCslaException("EmployeeTerritoryInfoList.DataPortal_Fetch", ex);
			}
			this.RaiseListChangedEvents = true;
		}
		[Serializable()]
		private class EmployeeIDCriteria
		{
			public EmployeeIDCriteria(int employeeID)
			{
				_EmployeeID = employeeID;
			}
			private int _EmployeeID;
			public int EmployeeID
			{
				get { return _EmployeeID; }
				set { _EmployeeID = value; }
			}
		}
		private void DataPortal_Fetch(EmployeeIDCriteria criteria)
		{
			this.RaiseListChangedEvents = false;
			Database.LogInfo("EmployeeTerritoryInfoList.DataPortal_FetchEmployeeID", GetHashCode());
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					using (SqlCommand cm = cn.CreateCommand())
					{
						cm.CommandType = CommandType.StoredProcedure;
						cm.CommandText = "getEmployeeTerritoriesByEmployeeID";
						cm.Parameters.AddWithValue("@EmployeeID", criteria.EmployeeID);
						using (SafeDataReader dr = new SafeDataReader(cm.ExecuteReader()))
						{
							IsReadOnly = false;
							while (dr.Read()) this.Add(new EmployeeTerritoryInfo(dr));
							IsReadOnly = true;
						}
					}
				}
			}
			catch (Exception ex)
			{
				Database.LogException("EmployeeTerritoryInfoList.DataPortal_FetchEmployeeID", ex);
				throw new DbCslaException("EmployeeTerritoryInfoList.DataPortal_Fetch", ex);
			}
			this.RaiseListChangedEvents = true;
		}
		[Serializable()]
		private class TerritoryIDCriteria
		{
			public TerritoryIDCriteria(string territoryID)
			{
				_TerritoryID = territoryID;
			}
			private string _TerritoryID;
			public string TerritoryID
			{
				get { return _TerritoryID; }
				set { _TerritoryID = value; }
			}
		}
		private void DataPortal_Fetch(TerritoryIDCriteria criteria)
		{
			this.RaiseListChangedEvents = false;
			Database.LogInfo("EmployeeTerritoryInfoList.DataPortal_FetchTerritoryID", GetHashCode());
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					using (SqlCommand cm = cn.CreateCommand())
					{
						cm.CommandType = CommandType.StoredProcedure;
						cm.CommandText = "getEmployeeTerritoriesByTerritoryID";
						cm.Parameters.AddWithValue("@TerritoryID", criteria.TerritoryID);
						using (SafeDataReader dr = new SafeDataReader(cm.ExecuteReader()))
						{
							IsReadOnly = false;
							while (dr.Read()) this.Add(new EmployeeTerritoryInfo(dr));
							IsReadOnly = true;
						}
					}
				}
			}
			catch (Exception ex)
			{
				Database.LogException("EmployeeTerritoryInfoList.DataPortal_FetchTerritoryID", ex);
				throw new DbCslaException("EmployeeTerritoryInfoList.DataPortal_Fetch", ex);
			}
			this.RaiseListChangedEvents = true;
		}
		#endregion
		#region ICustomTypeDescriptor impl
		public String GetClassName()
		{ return TypeDescriptor.GetClassName(this, true); }
		public AttributeCollection GetAttributes()
		{ return TypeDescriptor.GetAttributes(this, true); }
		public String GetComponentName()
		{ return TypeDescriptor.GetComponentName(this, true); }
		public TypeConverter GetConverter()
		{ return TypeDescriptor.GetConverter(this, true); }
		public EventDescriptor GetDefaultEvent()
		{ return TypeDescriptor.GetDefaultEvent(this, true); }
		public PropertyDescriptor GetDefaultProperty()
		{ return TypeDescriptor.GetDefaultProperty(this, true); }
		public object GetEditor(Type editorBaseType)
		{ return TypeDescriptor.GetEditor(this, editorBaseType, true); }
		public EventDescriptorCollection GetEvents(Attribute[] attributes)
		{ return TypeDescriptor.GetEvents(this, attributes, true); }
		public EventDescriptorCollection GetEvents()
		{ return TypeDescriptor.GetEvents(this, true); }
		public object GetPropertyOwner(PropertyDescriptor pd)
		{ return this; }
		/// <summary>
		/// Called to get the properties of this type. Returns properties with certain
		/// attributes. this restriction is not implemented here.
		/// </summary>
		/// <param name="attributes"></param>
		/// <returns></returns>
		public PropertyDescriptorCollection GetProperties(Attribute[] attributes)
		{ return GetProperties(); }
		/// <summary>
		/// Called to get the properties of this type.
		/// </summary>
		/// <returns></returns>
		public PropertyDescriptorCollection GetProperties()
		{
			// Create a collection object to hold property descriptors
			PropertyDescriptorCollection pds = new PropertyDescriptorCollection(null);
			// Iterate the list 
			for (int i = 0; i < this.Items.Count; i++)
			{
				// Create a property descriptor for the item and add to the property descriptor collection
				EmployeeTerritoryInfoListPropertyDescriptor pd = new EmployeeTerritoryInfoListPropertyDescriptor(this, i);
				pds.Add(pd);
			}
			// return the property descriptor collection
			return pds;
		}
		#endregion
	} // Class
	#region Property Descriptor
	/// <summary>
	/// Summary description for CollectionPropertyDescriptor.
	/// </summary>
	public partial class EmployeeTerritoryInfoListPropertyDescriptor : vlnListPropertyDescriptor
	{
		private EmployeeTerritoryInfo Item { get { return (EmployeeTerritoryInfo) _Item;} }
		public EmployeeTerritoryInfoListPropertyDescriptor(EmployeeTerritoryInfoList collection, int index):base(collection, index){;}
	}
	#endregion
	#region Converter
	internal class EmployeeTerritoryInfoListConverter : ExpandableObjectConverter
	{
		public override object ConvertTo(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destType)
		{
			if (destType == typeof(string) && value is EmployeeTerritoryInfoList)
			{
				// Return department and department role separated by comma.
				return ((EmployeeTerritoryInfoList) value).Items.Count.ToString() + " EmployeeTerritories";
			}
			return base.ConvertTo(context, culture, value, destType);
		}
	}
	#endregion
} // Namespace
