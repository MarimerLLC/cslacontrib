
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using System.Configuration;
using System.IO;
using System.ComponentModel;
using System.Collections.Generic;
using Csla.Validation;
namespace Northwind.CSLA.Library
{
	/// <summary>
	///	Order Generated by MyGeneration using the CSLA Object Mapping template
	/// </summary>
	[Serializable()]
	[TypeConverter(typeof(OrderConverter))]
	public partial class Order : BusinessBase<Order>, IDisposable, IVEHasBrokenRules
	{
		#region Refresh
		private List<Order> _RefreshOrders = new List<Order>();
		private List<OrderOrderDetail> _RefreshOrderOrderDetails = new List<OrderOrderDetail>();
		private void AddToRefreshList(List<Order> refreshOrders, List<OrderOrderDetail> refreshOrderOrderDetails)
		{
			if (IsDirty)
				refreshOrders.Add(this);
			if (_OrderOrderDetails != null && _OrderOrderDetails.IsDirty)
			{
				foreach (OrderOrderDetail tmp in _OrderOrderDetails)
				{
					if(tmp.IsDirty)refreshOrderOrderDetails.Add(tmp);
				}
			}
		}
		private void BuildRefreshList()
		{
			_RefreshOrders = new List<Order>();
			_RefreshOrderOrderDetails = new List<OrderOrderDetail>();
			AddToRefreshList(_RefreshOrders, _RefreshOrderOrderDetails);
		}
		private void ProcessRefreshList()
		{
			foreach (Order tmp in _RefreshOrders)
			{
				OrderInfo.Refresh(tmp);
				if(tmp._MyCustomer != null) CustomerInfo.Refresh(tmp._MyCustomer);
				if(tmp._MyEmployee != null) EmployeeInfo.Refresh(tmp._MyEmployee);
				if(tmp._MyShipper != null) ShipperInfo.Refresh(tmp._MyShipper);
			}
			foreach (OrderOrderDetail tmp in _RefreshOrderOrderDetails)
			{
				OrderDetailInfo.Refresh(this, tmp);
			}
		}
		#endregion
		#region Collection
		protected static List<Order> _AllList = new List<Order>();
		private static Dictionary<string, Order> _AllByPrimaryKey = new Dictionary<string, Order>();
		private static void ConvertListToDictionary()
		{
			List<Order> remove = new List<Order>();
			foreach (Order tmp in _AllList)
			{
				_AllByPrimaryKey[tmp.OrderID.ToString()]=tmp; // Primary Key
				remove.Add(tmp);
			}
			foreach (Order tmp in remove)
				_AllList.Remove(tmp);
		}
		public static Order GetExistingByPrimaryKey(int orderID)
		{
			ConvertListToDictionary();
			string key = orderID.ToString();
			if (_AllByPrimaryKey.ContainsKey(key)) return _AllByPrimaryKey[key]; 
			return null;
		}
		#endregion
		#region Business Methods
		private string _ErrorMessage = string.Empty;
		public string ErrorMessage
		{
			get { return _ErrorMessage; }
		}
		private static int _nextOrderID = -1;
		public static int NextOrderID
		{
			get { return _nextOrderID--; }
		}
		private int _OrderID;
		[System.ComponentModel.DataObjectField(true, true)]
		public int OrderID
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _OrderID;
			}
		}
		private string _CustomerID = string.Empty;
		public string CustomerID
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyCustomer != null) _CustomerID = _MyCustomer.CustomerID;
				return _CustomerID;
			}
		}
		private Customer _MyCustomer;
		public Customer MyCustomer
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyCustomer == null && _CustomerID != null) _MyCustomer = Customer.Get((string)_CustomerID);
				return _MyCustomer;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (_MyCustomer != value)
				{
					_MyCustomer = value;
					_CustomerID = (value == null ? null : (string) value.CustomerID);
					PropertyHasChanged();
				}
			}
		}
		private int? _EmployeeID;
		public int? EmployeeID
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyEmployee != null) _EmployeeID = _MyEmployee.EmployeeID;
				return _EmployeeID;
			}
		}
		private Employee _MyEmployee;
		public Employee MyEmployee
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyEmployee == null && _EmployeeID != null) _MyEmployee = Employee.Get((int)_EmployeeID);
				return _MyEmployee;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (_MyEmployee != value)
				{
					_MyEmployee = value;
					_EmployeeID = (value == null ? null : (int?) value.EmployeeID);
					PropertyHasChanged();
				}
			}
		}
		private string _OrderDate = string.Empty;
		public string OrderDate
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _OrderDate;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (value == null) value = string.Empty;
				_OrderDate = value;
				try
				{
					SmartDate tmp = new SmartDate(value);
					if (_OrderDate != tmp.ToString())
					{
						_OrderDate = tmp.ToString();
						// TODO: Any Cross Property Validation
					}
				}
				catch
				{
				}
				PropertyHasChanged();
			}
		}
		private string _RequiredDate = string.Empty;
		public string RequiredDate
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _RequiredDate;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (value == null) value = string.Empty;
				_RequiredDate = value;
				try
				{
					SmartDate tmp = new SmartDate(value);
					if (_RequiredDate != tmp.ToString())
					{
						_RequiredDate = tmp.ToString();
						// TODO: Any Cross Property Validation
					}
				}
				catch
				{
				}
				PropertyHasChanged();
			}
		}
		private string _ShippedDate = string.Empty;
		public string ShippedDate
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _ShippedDate;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (value == null) value = string.Empty;
				_ShippedDate = value;
				try
				{
					SmartDate tmp = new SmartDate(value);
					if (_ShippedDate != tmp.ToString())
					{
						_ShippedDate = tmp.ToString();
						// TODO: Any Cross Property Validation
					}
				}
				catch
				{
				}
				PropertyHasChanged();
			}
		}
		private int? _ShipVia;
		public int? ShipVia
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyShipper != null) _ShipVia = _MyShipper.ShipperID;
				return _ShipVia;
			}
		}
		private Shipper _MyShipper;
		public Shipper MyShipper
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyShipper == null && _ShipVia != null) _MyShipper = Shipper.Get((int)_ShipVia);
				return _MyShipper;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (_MyShipper != value)
				{
					_MyShipper = value;
					_ShipVia = (value == null ? null : (int?) value.ShipperID);
					PropertyHasChanged();
				}
			}
		}
		private decimal? _Freight;
		public decimal? Freight
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Freight;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (_Freight != value)
				{
					_Freight = value;
					PropertyHasChanged();
				}
			}
		}
		private string _ShipName = string.Empty;
		public string ShipName
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _ShipName;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (value == null) value = string.Empty;
				if (_ShipName != value)
				{
					_ShipName = value;
					PropertyHasChanged();
				}
			}
		}
		private string _ShipAddress = string.Empty;
		public string ShipAddress
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _ShipAddress;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (value == null) value = string.Empty;
				if (_ShipAddress != value)
				{
					_ShipAddress = value;
					PropertyHasChanged();
				}
			}
		}
		private string _ShipCity = string.Empty;
		public string ShipCity
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _ShipCity;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (value == null) value = string.Empty;
				if (_ShipCity != value)
				{
					_ShipCity = value;
					PropertyHasChanged();
				}
			}
		}
		private string _ShipRegion = string.Empty;
		public string ShipRegion
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _ShipRegion;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (value == null) value = string.Empty;
				if (_ShipRegion != value)
				{
					_ShipRegion = value;
					PropertyHasChanged();
				}
			}
		}
		private string _ShipPostalCode = string.Empty;
		public string ShipPostalCode
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _ShipPostalCode;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (value == null) value = string.Empty;
				if (_ShipPostalCode != value)
				{
					_ShipPostalCode = value;
					PropertyHasChanged();
				}
			}
		}
		private string _ShipCountry = string.Empty;
		public string ShipCountry
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _ShipCountry;
			}
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			set
			{
				CanWriteProperty(true);
				if (value == null) value = string.Empty;
				if (_ShipCountry != value)
				{
					_ShipCountry = value;
					PropertyHasChanged();
				}
			}
		}
		private int _OrderOrderDetailCount = 0;
		/// <summary>
		/// Count of OrderOrderDetails for this Order
		/// </summary>
		public int OrderOrderDetailCount
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _OrderOrderDetailCount;
			}
		}
		private OrderOrderDetails _OrderOrderDetails = null;
		/// <summary>
		/// Related Field
		/// </summary>
		[TypeConverter(typeof(OrderOrderDetailsConverter))]
		public OrderOrderDetails OrderOrderDetails
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if(_OrderOrderDetailCount > 0 && _OrderOrderDetails == null)
					_OrderOrderDetails = OrderOrderDetails.GetByOrderID(OrderID);
				else if(_OrderOrderDetails == null)
					_OrderOrderDetails = OrderOrderDetails.New();
				return _OrderOrderDetails;
			}
		}
		public override bool IsDirty
		{
			get { return base.IsDirty || (_OrderOrderDetails == null? false : _OrderOrderDetails.IsDirty) || (_MyCustomer == null? false : _MyCustomer.IsDirty) || (_MyEmployee == null? false : _MyEmployee.IsDirty) || (_MyShipper == null? false : _MyShipper.IsDirty); }
		}
		public override bool IsValid
		{
			get { return (IsNew && !IsDirty ? true : base.IsValid) && (_OrderOrderDetails == null? true : _OrderOrderDetails.IsValid) && (_MyCustomer == null? true : _MyCustomer.IsValid) && (_MyEmployee == null? true : _MyEmployee.IsValid) && (_MyShipper == null? true : _MyShipper.IsValid); }
		}
		// TODO: Replace base Order.ToString function as necessary
		/// <summary>
		/// Overrides Base ToString
		/// </summary>
		/// <returns>A string representation of current Order</returns>
		//public override string ToString()
		//{
		//  return base.ToString();
		//}
		// TODO: Check Order.GetIdValue to assure that the ID returned is unique
		/// <summary>
		/// Overrides Base GetIdValue - Used internally by CSLA to determine equality
		/// </summary>
		/// <returns>A Unique ID for the current Order</returns>
		protected override object GetIdValue()
		{
			return _OrderID;
		}
		#endregion
		#region ValidationRules
		[NonSerialized]
		private bool _CheckingBrokenRules=false;
		public IVEHasBrokenRules HasBrokenRules
		{
			get {
				if(_CheckingBrokenRules)return null;
				if ((IsDirty || !IsNew) && BrokenRulesCollection.Count > 0) return this;
				try
				{
					_CheckingBrokenRules=true;
					IVEHasBrokenRules hasBrokenRules = null;
				if (_OrderOrderDetails != null && (hasBrokenRules = _OrderOrderDetails.HasBrokenRules) != null) return hasBrokenRules;
				if (_MyCustomer != null && (hasBrokenRules = _MyCustomer.HasBrokenRules) != null) return hasBrokenRules;
				if (_MyEmployee != null && (hasBrokenRules = _MyEmployee.HasBrokenRules) != null) return hasBrokenRules;
				if (_MyShipper != null && (hasBrokenRules = _MyShipper.HasBrokenRules) != null) return hasBrokenRules;
					return hasBrokenRules;
				}
				finally
				{
					_CheckingBrokenRules=false;
				}
			}
		}
		public BrokenRulesCollection BrokenRules
		{
			get
			{
				IVEHasBrokenRules hasBrokenRules = HasBrokenRules;
				if (this.Equals(hasBrokenRules)) return BrokenRulesCollection;
				return (hasBrokenRules != null ? hasBrokenRules.BrokenRules : null);
			}
		}
		protected override void AddBusinessRules()
		{
			ValidationRules.AddRule(
				Csla.Validation.CommonRules.StringMaxLength,
				new Csla.Validation.CommonRules.MaxLengthRuleArgs("CustomerID", 5));
			ValidationRules.AddRule<Order>(OrderDateValid, "OrderDate");
			ValidationRules.AddRule<Order>(RequiredDateValid, "RequiredDate");
			ValidationRules.AddRule<Order>(ShippedDateValid, "ShippedDate");
			ValidationRules.AddRule(
				Csla.Validation.CommonRules.StringMaxLength,
				new Csla.Validation.CommonRules.MaxLengthRuleArgs("ShipName", 40));
			ValidationRules.AddRule(
				Csla.Validation.CommonRules.StringMaxLength,
				new Csla.Validation.CommonRules.MaxLengthRuleArgs("ShipAddress", 60));
			ValidationRules.AddRule(
				Csla.Validation.CommonRules.StringMaxLength,
				new Csla.Validation.CommonRules.MaxLengthRuleArgs("ShipCity", 15));
			ValidationRules.AddRule(
				Csla.Validation.CommonRules.StringMaxLength,
				new Csla.Validation.CommonRules.MaxLengthRuleArgs("ShipRegion", 15));
			ValidationRules.AddRule(
				Csla.Validation.CommonRules.StringMaxLength,
				new Csla.Validation.CommonRules.MaxLengthRuleArgs("ShipPostalCode", 10));
			ValidationRules.AddRule(
				Csla.Validation.CommonRules.StringMaxLength,
				new Csla.Validation.CommonRules.MaxLengthRuleArgs("ShipCountry", 15));
			//ValidationRules.AddDependantProperty("x", "y");
			_OrderExtension.AddValidationRules(ValidationRules);
			// TODO:  Add other validation rules
		}
		protected override void AddInstanceBusinessRules()
		{
			_OrderExtension.AddInstanceValidationRules(ValidationRules);
			// TODO:  Add other validation rules
		}
		private static bool OrderDateValid(Order target, Csla.Validation.RuleArgs e)
		{
			try
			{
				DateTime tmp = SmartDate.StringToDate(target._OrderDate);
			}
			catch
			{
				e.Description = "Invalid Date";
				return false;
			}
			return true;
		}
		private static bool RequiredDateValid(Order target, Csla.Validation.RuleArgs e)
		{
			try
			{
				DateTime tmp = SmartDate.StringToDate(target._RequiredDate);
			}
			catch
			{
				e.Description = "Invalid Date";
				return false;
			}
			return true;
		}
		private static bool ShippedDateValid(Order target, Csla.Validation.RuleArgs e)
		{
			try
			{
				DateTime tmp = SmartDate.StringToDate(target._ShippedDate);
			}
			catch
			{
				e.Description = "Invalid Date";
				return false;
			}
			return true;
		}
		// Sample data comparison validation rule
		//private bool StartDateGTEndDate(object target, Csla.Validation.RuleArgs e)
		//{
		//	if (_started > _ended)
		//	{
		//		e.Description = "Start date can't be after end date";
		//		return false;
		//	}
		//	else
		//		return true;
		//}
		#endregion
		#region Authorization Rules
		protected override void AddAuthorizationRules()
		{
			//TODO: Who can read/write which fields
			//AuthorizationRules.AllowRead(OrderID, "<Role(s)>");
			//AuthorizationRules.AllowRead(CustomerID, "<Role(s)>");
			//AuthorizationRules.AllowRead(EmployeeID, "<Role(s)>");
			//AuthorizationRules.AllowRead(OrderDate, "<Role(s)>");
			//AuthorizationRules.AllowRead(RequiredDate, "<Role(s)>");
			//AuthorizationRules.AllowRead(ShippedDate, "<Role(s)>");
			//AuthorizationRules.AllowRead(ShipVia, "<Role(s)>");
			//AuthorizationRules.AllowRead(Freight, "<Role(s)>");
			//AuthorizationRules.AllowRead(ShipName, "<Role(s)>");
			//AuthorizationRules.AllowRead(ShipAddress, "<Role(s)>");
			//AuthorizationRules.AllowRead(ShipCity, "<Role(s)>");
			//AuthorizationRules.AllowRead(ShipRegion, "<Role(s)>");
			//AuthorizationRules.AllowRead(ShipPostalCode, "<Role(s)>");
			//AuthorizationRules.AllowRead(ShipCountry, "<Role(s)>");
			//AuthorizationRules.AllowWrite(CustomerID, "<Role(s)>");
			//AuthorizationRules.AllowWrite(EmployeeID, "<Role(s)>");
			//AuthorizationRules.AllowWrite(OrderDate, "<Role(s)>");
			//AuthorizationRules.AllowWrite(RequiredDate, "<Role(s)>");
			//AuthorizationRules.AllowWrite(ShippedDate, "<Role(s)>");
			//AuthorizationRules.AllowWrite(ShipVia, "<Role(s)>");
			//AuthorizationRules.AllowWrite(Freight, "<Role(s)>");
			//AuthorizationRules.AllowWrite(ShipName, "<Role(s)>");
			//AuthorizationRules.AllowWrite(ShipAddress, "<Role(s)>");
			//AuthorizationRules.AllowWrite(ShipCity, "<Role(s)>");
			//AuthorizationRules.AllowWrite(ShipRegion, "<Role(s)>");
			//AuthorizationRules.AllowWrite(ShipPostalCode, "<Role(s)>");
			//AuthorizationRules.AllowWrite(ShipCountry, "<Role(s)>");
			_OrderExtension.AddAuthorizationRules(AuthorizationRules);
		}
		protected override void AddInstanceAuthorizationRules()
		{
			//TODO: Who can read/write which fields
			_OrderExtension.AddInstanceAuthorizationRules(AuthorizationRules);
		}
		public static bool CanAddObject()
		{
			// TODO: Can Add Authorization
			//return Csla.ApplicationContext.User.IsInRole("ProjectManager");
			return true;
		}
		public static bool CanGetObject()
		{
			// TODO: CanGet Authorization
			return true;
		}
		public static bool CanDeleteObject()
		{
			// TODO: CanDelete Authorization
			//bool result = false;
			//if (Csla.ApplicationContext.User.IsInRole("ProjectManager"))result = true;
			//if (Csla.ApplicationContext.User.IsInRole("Administrator"))result = true;
			//return result;
			return true;
		}
		public static bool CanEditObject()
		{
			// TODO: CanEdit Authorization
			//return Csla.ApplicationContext.User.IsInRole("ProjectManager");
			return true;
		}
		#endregion
		#region Factory Methods
		public int CurrentEditLevel
		{ get { return EditLevel; } }
		protected Order()
		{/* require use of factory methods */
			_AllList.Add(this);
		}
		public void Dispose()
		{
			_AllList.Remove(this);
			_AllByPrimaryKey.Remove(OrderID.ToString());
		}
		public static Order New()
		{
			if (!CanAddObject())
				throw new System.Security.SecurityException("User not authorized to add a Order");
			try
			{
				return DataPortal.Create<Order>();
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on Order.New", ex);
			}
		}
		public static Order New(Customer myCustomer, Employee myEmployee, string orderDate, string requiredDate, string shippedDate, Shipper myShipper, decimal? freight, string shipName, string shipAddress, string shipCity, string shipRegion, string shipPostalCode, string shipCountry)
		{
			Order tmp = Order.New();
			tmp.MyCustomer = myCustomer;
			tmp.MyEmployee = myEmployee;
			tmp.OrderDate = orderDate;
			tmp.RequiredDate = requiredDate;
			tmp.ShippedDate = shippedDate;
			tmp.MyShipper = myShipper;
			tmp.Freight = freight;
			tmp.ShipName = shipName;
			tmp.ShipAddress = shipAddress;
			tmp.ShipCity = shipCity;
			tmp.ShipRegion = shipRegion;
			tmp.ShipPostalCode = shipPostalCode;
			tmp.ShipCountry = shipCountry;
			return tmp;
		}
		public static Order MakeOrder(Customer myCustomer, Employee myEmployee, string orderDate, string requiredDate, string shippedDate, Shipper myShipper, decimal? freight, string shipName, string shipAddress, string shipCity, string shipRegion, string shipPostalCode, string shipCountry)
		{
			Order tmp = Order.New(myCustomer, myEmployee, orderDate, requiredDate, shippedDate, myShipper, freight, shipName, shipAddress, shipCity, shipRegion, shipPostalCode, shipCountry);
			if (tmp.IsSavable)
				tmp = tmp.Save();
			else
			{
				Csla.Validation.BrokenRulesCollection brc = tmp.ValidationRules.GetBrokenRules();
				tmp._ErrorMessage = "Failed Validation:";
				foreach (Csla.Validation.BrokenRule br in brc)
				{
					tmp._ErrorMessage += "\r\n\tFailure: " + br.RuleName;
				}
			}
			return tmp;
		}
		public static Order New(Customer myCustomer, Employee myEmployee, string orderDate, string requiredDate, string shippedDate, Shipper myShipper, string shipName, string shipAddress, string shipCity, string shipRegion, string shipPostalCode, string shipCountry)
		{
			Order tmp = Order.New();
			tmp.MyCustomer = myCustomer;
			tmp.MyEmployee = myEmployee;
			tmp.OrderDate = orderDate;
			tmp.RequiredDate = requiredDate;
			tmp.ShippedDate = shippedDate;
			tmp.MyShipper = myShipper;
			tmp.ShipName = shipName;
			tmp.ShipAddress = shipAddress;
			tmp.ShipCity = shipCity;
			tmp.ShipRegion = shipRegion;
			tmp.ShipPostalCode = shipPostalCode;
			tmp.ShipCountry = shipCountry;
			return tmp;
		}
		public static Order MakeOrder(Customer myCustomer, Employee myEmployee, string orderDate, string requiredDate, string shippedDate, Shipper myShipper, string shipName, string shipAddress, string shipCity, string shipRegion, string shipPostalCode, string shipCountry)
		{
			Order tmp = Order.New(myCustomer, myEmployee, orderDate, requiredDate, shippedDate, myShipper, shipName, shipAddress, shipCity, shipRegion, shipPostalCode, shipCountry);
			if (tmp.IsSavable)
				tmp = tmp.Save();
			else
			{
				Csla.Validation.BrokenRulesCollection brc = tmp.ValidationRules.GetBrokenRules();
				tmp._ErrorMessage = "Failed Validation:";
				foreach (Csla.Validation.BrokenRule br in brc)
				{
					tmp._ErrorMessage += "\r\n\tFailure: " + br.RuleName;
				}
			}
			return tmp;
		}
		public static Order Get(int orderID)
		{
			if (!CanGetObject())
				throw new System.Security.SecurityException("User not authorized to view a Order");
			try
			{
				Order tmp = GetExistingByPrimaryKey(orderID);
				if (tmp == null)
				{
					tmp = DataPortal.Fetch<Order>(new PKCriteria(orderID));
					_AllList.Add(tmp);
				}
				if (tmp.ErrorMessage == "No Record Found") tmp = null;
				return tmp;
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on Order.Get", ex);
			}
		}
		public static Order Get(SafeDataReader dr)
		{
			if (dr.Read()) return new Order(dr);
			return null;
		}
		internal Order(SafeDataReader dr)
		{
			ReadData(dr);
		}
		public static void Delete(int orderID)
		{
			if (!CanDeleteObject())
				throw new System.Security.SecurityException("User not authorized to remove a Order");
			try
			{
				DataPortal.Delete(new PKCriteria(orderID));
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on Order.Delete", ex);
			}
		}
		public override Order Save()
		{
			if (IsDeleted && !CanDeleteObject())
				throw new System.Security.SecurityException("User not authorized to remove a Order");
			else if (IsNew && !CanAddObject())
				throw new System.Security.SecurityException("User not authorized to add a Order");
			else if (!CanEditObject())
				throw new System.Security.SecurityException("User not authorized to update a Order");
			try
			{
				BuildRefreshList();
				Order order = base.Save();
				_AllList.Add(order);//Refresh the item in AllList
				ProcessRefreshList();
				return order;
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on CSLA Save", ex);
			}
		}
		#endregion
		#region Data Access Portal
		[Serializable()]
		protected class PKCriteria
		{
			private int _OrderID;
			public int OrderID
			{ get { return _OrderID; } }
			public PKCriteria(int orderID)
			{
				_OrderID = orderID;
			}
		}
		// TODO: If Create needs to access DB - It should not be marked RunLocal
		[RunLocal()]
		private new void DataPortal_Create()
		{
			_OrderID = NextOrderID;
			// Database Defaults
			_Freight = _OrderExtension.DefaultFreight;
			// TODO: Add any defaults that are necessary
			ValidationRules.CheckRules();
		}
		private void ReadData(SafeDataReader dr)
		{
			Database.LogInfo("Order.ReadData", GetHashCode());
			try
			{
				_OrderID = dr.GetInt32("OrderID");
				_CustomerID = dr.GetString("CustomerID");
				_EmployeeID = (int?)dr.GetValue("EmployeeID");
				_OrderDate = dr.GetSmartDate("OrderDate").Text;
				_RequiredDate = dr.GetSmartDate("RequiredDate").Text;
				_ShippedDate = dr.GetSmartDate("ShippedDate").Text;
				_ShipVia = (int?)dr.GetValue("ShipVia");
				_Freight = (decimal?)dr.GetValue("Freight");
				_ShipName = dr.GetString("ShipName");
				_ShipAddress = dr.GetString("ShipAddress");
				_ShipCity = dr.GetString("ShipCity");
				_ShipRegion = dr.GetString("ShipRegion");
				_ShipPostalCode = dr.GetString("ShipPostalCode");
				_ShipCountry = dr.GetString("ShipCountry");
				_OrderOrderDetailCount = dr.GetInt32("OrderDetailCount");
				MarkOld();
			}
			catch (Exception ex)
			{
				Database.LogException("Order.ReadData", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("Order.ReadData", ex);
			}
		}
		private void DataPortal_Fetch(PKCriteria criteria)
		{
			Database.LogInfo("Order.DataPortal_Fetch", GetHashCode());
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					ApplicationContext.LocalContext["cn"] = cn;
					using (SqlCommand cm = cn.CreateCommand())
					{
						cm.CommandType = CommandType.StoredProcedure;
						cm.CommandText = "getOrder";
						cm.Parameters.AddWithValue("@OrderID", criteria.OrderID);
						using (SafeDataReader dr = new SafeDataReader(cm.ExecuteReader()))
						{
							if (!dr.Read())
							{
								_ErrorMessage = "No Record Found";
								return;
							}
							ReadData(dr);
							// load child objects
							dr.NextResult();
							_OrderOrderDetails = OrderOrderDetails.Get(dr);
						}
					}
					// removing of item only needed for local data portal
					if (ApplicationContext.ExecutionLocation == ApplicationContext.ExecutionLocations.Client)
						ApplicationContext.LocalContext.Remove("cn");
				}
			}
			catch (Exception ex)
			{
				Database.LogException("Order.DataPortal_Fetch", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("Order.DataPortal_Fetch", ex);
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		protected override void DataPortal_Insert()
		{
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					ApplicationContext.LocalContext["cn"] = cn;
					SQLInsert();
					// removing of item only needed for local data portal
					if (ApplicationContext.ExecutionLocation == ApplicationContext.ExecutionLocations.Client)
						ApplicationContext.LocalContext.Remove("cn");
				}
			}
			catch (Exception ex)
			{
				Database.LogException("Order.DataPortal_Insert", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("Order.DataPortal_Insert", ex);
			}
			finally
			{
				Database.LogInfo("Order.DataPortal_Insert", GetHashCode());
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		internal void SQLInsert()
		{
			if (!this.IsDirty) return;
			try
			{
				if(_MyCustomer != null) _MyCustomer.Update();
				if(_MyEmployee != null) _MyEmployee.Update();
				if(_MyShipper != null) _MyShipper.Update();
				SqlConnection cn = (SqlConnection)ApplicationContext.LocalContext["cn"];
				using (SqlCommand cm = cn.CreateCommand())
				{
					cm.CommandType = CommandType.StoredProcedure;
					cm.CommandText = "addOrder";
					// Input All Fields - Except Calculated Columns
					cm.Parameters.AddWithValue("@CustomerID", CustomerID);
					cm.Parameters.AddWithValue("@EmployeeID", EmployeeID);
					cm.Parameters.AddWithValue("@OrderDate", new SmartDate(_OrderDate).DBValue);
					cm.Parameters.AddWithValue("@RequiredDate", new SmartDate(_RequiredDate).DBValue);
					cm.Parameters.AddWithValue("@ShippedDate", new SmartDate(_ShippedDate).DBValue);
					cm.Parameters.AddWithValue("@ShipVia", ShipVia);
					cm.Parameters.AddWithValue("@Freight", _Freight);
					cm.Parameters.AddWithValue("@ShipName", _ShipName);
					cm.Parameters.AddWithValue("@ShipAddress", _ShipAddress);
					cm.Parameters.AddWithValue("@ShipCity", _ShipCity);
					cm.Parameters.AddWithValue("@ShipRegion", _ShipRegion);
					cm.Parameters.AddWithValue("@ShipPostalCode", _ShipPostalCode);
					cm.Parameters.AddWithValue("@ShipCountry", _ShipCountry);
					// Output Calculated Columns
					SqlParameter param_OrderID = new SqlParameter("@newOrderID", SqlDbType.Int);
					param_OrderID.Direction = ParameterDirection.Output;
					cm.Parameters.Add(param_OrderID);
					// TODO: Define any additional output parameters
					cm.ExecuteNonQuery();
					// Save all values being returned from the Procedure
					_OrderID = (int)cm.Parameters["@newOrderID"].Value;
				}
				MarkOld();
				// update child objects
				if (_OrderOrderDetails != null) _OrderOrderDetails.Update(this);
				Database.LogInfo("Order.SQLInsert", GetHashCode());
			}
			catch (Exception ex)
			{
				Database.LogException("Order.SQLInsert", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("Order.SQLInsert", ex);
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		public static void Add(SqlConnection cn, ref int orderID, Customer myCustomer, Employee myEmployee, SmartDate orderDate, SmartDate requiredDate, SmartDate shippedDate, Shipper myShipper, decimal? freight, string shipName, string shipAddress, string shipCity, string shipRegion, string shipPostalCode, string shipCountry)
		{
			Database.LogInfo("Order.Add", 0);
			try
			{
				using (SqlCommand cm = cn.CreateCommand())
				{
					cm.CommandType = CommandType.StoredProcedure;
					cm.CommandText = "addOrder";
					// Input All Fields - Except Calculated Columns
					if(myCustomer != null)cm.Parameters.AddWithValue("@CustomerID", myCustomer.CustomerID);
					if(myEmployee != null)cm.Parameters.AddWithValue("@EmployeeID", myEmployee.EmployeeID);
					cm.Parameters.AddWithValue("@OrderDate", orderDate.DBValue);
					cm.Parameters.AddWithValue("@RequiredDate", requiredDate.DBValue);
					cm.Parameters.AddWithValue("@ShippedDate", shippedDate.DBValue);
					if(myShipper != null)cm.Parameters.AddWithValue("@ShipVia", myShipper.ShipperID);
					cm.Parameters.AddWithValue("@Freight", freight);
					cm.Parameters.AddWithValue("@ShipName", shipName);
					cm.Parameters.AddWithValue("@ShipAddress", shipAddress);
					cm.Parameters.AddWithValue("@ShipCity", shipCity);
					cm.Parameters.AddWithValue("@ShipRegion", shipRegion);
					cm.Parameters.AddWithValue("@ShipPostalCode", shipPostalCode);
					cm.Parameters.AddWithValue("@ShipCountry", shipCountry);
					// Output Calculated Columns
					SqlParameter param_OrderID = new SqlParameter("@newOrderID", SqlDbType.Int);
					param_OrderID.Direction = ParameterDirection.Output;
					cm.Parameters.Add(param_OrderID);
					// TODO: Define any additional output parameters
					cm.ExecuteNonQuery();
					// Save all values being returned from the Procedure
					orderID = (int)cm.Parameters["@newOrderID"].Value;
			// No Timestamp value to return
				}
			}
			catch (Exception ex)
			{
				Database.LogException("Order.Add", ex);
				throw new DbCslaException("Order.Add", ex);
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		protected override void DataPortal_Update()
		{
			if (!IsDirty) return;	// If not dirty - nothing to do
			Database.LogInfo("Order.DataPortal_Update", GetHashCode());
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					ApplicationContext.LocalContext["cn"] = cn;
					SQLUpdate();
					// removing of item only needed for local data portal
					if (ApplicationContext.ExecutionLocation == ApplicationContext.ExecutionLocations.Client)
						ApplicationContext.LocalContext.Remove("cn");
				}
			}
			catch (Exception ex)
			{
				Database.LogException("Order.DataPortal_Update", ex);
				_ErrorMessage = ex.Message;
				if (!ex.Message.EndsWith("has been edited by another user.")) throw ex;
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		internal void SQLUpdate()
		{
			if (!IsDirty) return;	// If not dirty - nothing to do
			Database.LogInfo("Order.SQLUpdate", GetHashCode());
			try
			{
				if(_MyCustomer != null) _MyCustomer.Update();
				if(_MyEmployee != null) _MyEmployee.Update();
				if(_MyShipper != null) _MyShipper.Update();
				SqlConnection cn = (SqlConnection)ApplicationContext.LocalContext["cn"];
				if (base.IsDirty)
				{
					using (SqlCommand cm = cn.CreateCommand())
					{
						cm.CommandType = CommandType.StoredProcedure;
						cm.CommandText = "updateOrder";
						// All Fields including Calculated Fields
						cm.Parameters.AddWithValue("@OrderID", _OrderID);
						cm.Parameters.AddWithValue("@CustomerID", CustomerID);
						cm.Parameters.AddWithValue("@EmployeeID", EmployeeID);
						cm.Parameters.AddWithValue("@OrderDate", new SmartDate(_OrderDate).DBValue);
						cm.Parameters.AddWithValue("@RequiredDate", new SmartDate(_RequiredDate).DBValue);
						cm.Parameters.AddWithValue("@ShippedDate", new SmartDate(_ShippedDate).DBValue);
						cm.Parameters.AddWithValue("@ShipVia", ShipVia);
						cm.Parameters.AddWithValue("@Freight", _Freight);
						cm.Parameters.AddWithValue("@ShipName", _ShipName);
						cm.Parameters.AddWithValue("@ShipAddress", _ShipAddress);
						cm.Parameters.AddWithValue("@ShipCity", _ShipCity);
						cm.Parameters.AddWithValue("@ShipRegion", _ShipRegion);
						cm.Parameters.AddWithValue("@ShipPostalCode", _ShipPostalCode);
						cm.Parameters.AddWithValue("@ShipCountry", _ShipCountry);
						// Output Calculated Columns
						// TODO: Define any additional output parameters
						cm.ExecuteNonQuery();
						// Save all values being returned from the Procedure
					}
				}
				MarkOld();
				// use the open connection to update child objects
				if (_OrderOrderDetails != null) _OrderOrderDetails.Update(this);
			}
			catch (Exception ex)
			{
				Database.LogException("Order.SQLUpdate", ex);
				_ErrorMessage = ex.Message;
				if (!ex.Message.EndsWith("has been edited by another user.")) throw ex;
			}
		}
		internal void Update()
		{
			if (!this.IsDirty) return;
			if (base.IsDirty)
			{
				SqlConnection cn = (SqlConnection)ApplicationContext.LocalContext["cn"];
				if (IsNew)
					Order.Add(cn, ref _OrderID, _MyCustomer, _MyEmployee, new SmartDate(_OrderDate), new SmartDate(_RequiredDate), new SmartDate(_ShippedDate), _MyShipper, _Freight, _ShipName, _ShipAddress, _ShipCity, _ShipRegion, _ShipPostalCode, _ShipCountry);
				else
					Order.Update(cn, ref _OrderID, _MyCustomer, _MyEmployee, new SmartDate(_OrderDate), new SmartDate(_RequiredDate), new SmartDate(_ShippedDate), _MyShipper, _Freight, _ShipName, _ShipAddress, _ShipCity, _ShipRegion, _ShipPostalCode, _ShipCountry);
				MarkOld();
			}
			if (_OrderOrderDetails != null) _OrderOrderDetails.Update(this);
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		public static void Update(SqlConnection cn, ref int orderID, Customer myCustomer, Employee myEmployee, SmartDate orderDate, SmartDate requiredDate, SmartDate shippedDate, Shipper myShipper, decimal? freight, string shipName, string shipAddress, string shipCity, string shipRegion, string shipPostalCode, string shipCountry)
		{
			Database.LogInfo("Order.Update", 0);
			try
			{
				using (SqlCommand cm = cn.CreateCommand())
				{
					cm.CommandType = CommandType.StoredProcedure;
					cm.CommandText = "updateOrder";
					// Input All Fields - Except Calculated Columns
					cm.Parameters.AddWithValue("@OrderID", orderID);
					if(myCustomer != null)cm.Parameters.AddWithValue("@CustomerID", myCustomer.CustomerID);
					if(myEmployee != null)cm.Parameters.AddWithValue("@EmployeeID", myEmployee.EmployeeID);
					cm.Parameters.AddWithValue("@OrderDate", orderDate.DBValue);
					cm.Parameters.AddWithValue("@RequiredDate", requiredDate.DBValue);
					cm.Parameters.AddWithValue("@ShippedDate", shippedDate.DBValue);
					if(myShipper != null)cm.Parameters.AddWithValue("@ShipVia", myShipper.ShipperID);
					cm.Parameters.AddWithValue("@Freight", freight);
					cm.Parameters.AddWithValue("@ShipName", shipName);
					cm.Parameters.AddWithValue("@ShipAddress", shipAddress);
					cm.Parameters.AddWithValue("@ShipCity", shipCity);
					cm.Parameters.AddWithValue("@ShipRegion", shipRegion);
					cm.Parameters.AddWithValue("@ShipPostalCode", shipPostalCode);
					cm.Parameters.AddWithValue("@ShipCountry", shipCountry);
					// Output Calculated Columns
					// TODO: Define any additional output parameters
					cm.ExecuteNonQuery();
					// Save all values being returned from the Procedure
				// No Timestamp value to return
				}
			}
			catch (Exception ex)
			{
				Database.LogException("Order.Update", ex);
				throw new DbCslaException("Order.Update", ex);
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		protected override void DataPortal_DeleteSelf()
		{
			DataPortal_Delete(new PKCriteria(_OrderID));
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		private void DataPortal_Delete(PKCriteria criteria)
		{
			Database.LogInfo("Order.DataPortal_Delete", GetHashCode());
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					using (SqlCommand cm = cn.CreateCommand())
					{
						cm.CommandType = CommandType.StoredProcedure;
						cm.CommandText = "deleteOrder";
						cm.Parameters.AddWithValue("@OrderID", criteria.OrderID);
						cm.ExecuteNonQuery();
					}
				}
			}
			catch (Exception ex)
			{
				Database.LogException("Order.DataPortal_Delete", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("Order.DataPortal_Delete", ex);
			}
		}
		[Transactional(TransactionalTypes.TransactionScope)]
		public static void Remove(SqlConnection cn, int orderID)
		{
			Database.LogInfo("Order.Remove", 0);
			try
			{
				using (SqlCommand cm = cn.CreateCommand())
				{
					cm.CommandType = CommandType.StoredProcedure;
					cm.CommandText = "deleteOrder";
					// Input PK Fields
					cm.Parameters.AddWithValue("@OrderID", orderID);
					// TODO: Define any additional output parameters
					cm.ExecuteNonQuery();
				}
			}
			catch (Exception ex)
			{
				Database.LogException("Order.Remove", ex);
				throw new DbCslaException("Order.Remove", ex);
			}
		}
		#endregion
		#region Exists
		public static bool Exists(int orderID)
		{
			ExistsCommand result;
			try
			{
				result = DataPortal.Execute<ExistsCommand>(new ExistsCommand(orderID));
				return result.Exists;
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on Order.Exists", ex);
			}
		}
		[Serializable()]
		private class ExistsCommand : CommandBase
		{
			private int _OrderID;
			private bool _exists;
			public bool Exists
			{
				get { return _exists; }
			}
			public ExistsCommand(int orderID)
			{
				_OrderID = orderID;
			}
			protected override void DataPortal_Execute()
			{
				Database.LogInfo("Order.DataPortal_Execute", GetHashCode());
				try
				{
					using (SqlConnection cn = Database.Northwind_SqlConnection)
					{
						cn.Open();
						using (SqlCommand cm = cn.CreateCommand())
						{
							cm.CommandType = CommandType.StoredProcedure;
							cm.CommandText = "existsOrder";
							cm.Parameters.AddWithValue("@OrderID", _OrderID);
							int count = (int)cm.ExecuteScalar();
							_exists = (count > 0);
						}
					}
				}
				catch (Exception ex)
				{
					Database.LogException("Order.DataPortal_Execute", ex);
					throw new DbCslaException("Order.DataPortal_Execute", ex);
				}
			}
		}
		#endregion
		// Standard Default Code
		#region extension
		OrderExtension _OrderExtension = new OrderExtension();
		[Serializable()]
		partial class OrderExtension : extensionBase
		{
		}
		[Serializable()]
		class extensionBase
		{
			// Default Values
			public virtual decimal? DefaultFreight
			{
				get { return 0; }
			}
			// Authorization Rules
			public virtual void AddAuthorizationRules(Csla.Security.AuthorizationRules rules)
			{
				// Needs to be overriden to add new authorization rules
			}
			// Instance Authorization Rules
			public virtual void AddInstanceAuthorizationRules(Csla.Security.AuthorizationRules rules)
			{
				// Needs to be overriden to add new authorization rules
			}
			// Validation Rules
			public virtual void AddValidationRules(Csla.Validation.ValidationRules rules)
			{
				// Needs to be overriden to add new validation rules
			}
			// InstanceValidation Rules
			public virtual void AddInstanceValidationRules(Csla.Validation.ValidationRules rules)
			{
				// Needs to be overriden to add new validation rules
			}
		}
		#endregion
	} // Class
	#region Converter
	internal class OrderConverter : ExpandableObjectConverter
	{
		public override object ConvertTo(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destType)
		{
			if (destType == typeof(string) && value is Order)
			{
				// Return the ToString value
				return ((Order)value).ToString();
			}
			return base.ConvertTo(context, culture, value, destType);
		}
	}
	#endregion
} // Namespace


//// The following is a sample Extension File.  You can use it to create OrderExt.cs
//using System;
//using System.Collections.Generic;
//using System.Text;
//using Csla;

//namespace Northwind.CSLA.Library
//{
//  public partial class Order
//  {
//    partial class OrderExtension : extensionBase
//    {
//      // TODO: Override automatic defaults
//      public virtual decimal? DefaultFreight
//      {
//        get { return 0; }
//      }
//      public new void AddAuthorizationRules(Csla.Security.AuthorizationRules rules)
//      {
//        //rules.AllowRead(Dbid, "<Role(s)>");
//      }
//      public new void AddInstanceAuthorizationRules(Csla.Security.AuthorizationRules rules)
//      {
//        //rules.AllowInstanceRead(Dbid, "<Role(s)>");
//      }
//      public new void AddValidationRules(Csla.Validation.ValidationRules rules)
//      {
//        rules.AddRule(
//          Csla.Validation.CommonRules.StringMaxLength,
//          new Csla.Validation.CommonRules.MaxLengthRuleArgs("Name", 100));
//      }
//      public new void AddInstanceValidationRules(Csla.Validation.ValidationRules rules)
//      {
//        rules.AddInstanceRule(/* Instance Validation Rule */);
//      }
//    }
//  }
//}
