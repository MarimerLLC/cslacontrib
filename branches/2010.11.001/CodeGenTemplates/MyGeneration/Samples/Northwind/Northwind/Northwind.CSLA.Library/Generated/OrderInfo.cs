
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using System.Configuration;
using System.IO;
using System.ComponentModel;
using System.Collections.Generic;
namespace Northwind.CSLA.Library
{
	public delegate void OrderInfoEvent(object sender);
	/// <summary>
	///	OrderInfo Generated by MyGeneration using the CSLA Object Mapping template
	/// </summary>
	[Serializable()]
	[TypeConverter(typeof(OrderInfoConverter))]
	public partial class OrderInfo : ReadOnlyBase<OrderInfo>, IDisposable
	{
		public event OrderInfoEvent Changed;
		private void OnChange()
		{
			if (Changed != null) Changed(this);
		}
		#region Collection
		protected static List<OrderInfo> _AllList = new List<OrderInfo>();
		private static Dictionary<string, OrderInfo> _AllByPrimaryKey = new Dictionary<string, OrderInfo>();
		private static void ConvertListToDictionary()
		{
			List<OrderInfo> remove = new List<OrderInfo>();
			foreach (OrderInfo tmp in _AllList)
			{
				_AllByPrimaryKey[tmp.OrderID.ToString()]=tmp; // Primary Key
				remove.Add(tmp);
			}
			foreach (OrderInfo tmp in remove)
				_AllList.Remove(tmp);
		}
		internal static void AddList(OrderInfoList lst)
		{
			foreach (OrderInfo item in lst) _AllList.Add(item);
		}
		public static OrderInfo GetExistingByPrimaryKey(int orderID)
		{
			ConvertListToDictionary();
			string key = orderID.ToString();
			if (_AllByPrimaryKey.ContainsKey(key)) return _AllByPrimaryKey[key]; 
			return null;
		}
		#endregion
		#region Business Methods
		private string _ErrorMessage = string.Empty;
		public string ErrorMessage
		{
			get { return _ErrorMessage; }
		}
		protected Order _Editable;
		private IVEHasBrokenRules HasBrokenRules
		{
			get
			{
				IVEHasBrokenRules hasBrokenRules = null;
				if (_Editable != null)
					hasBrokenRules = _Editable.HasBrokenRules;
				return hasBrokenRules;
			}
		}
		private int _OrderID;
		[System.ComponentModel.DataObjectField(true, true)]
		public int OrderID
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _OrderID;
			}
		}
		private string _CustomerID = string.Empty;
		public string CustomerID
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyCustomer != null) _CustomerID = _MyCustomer.CustomerID;
				return _CustomerID;
			}
		}
		private CustomerInfo _MyCustomer;
		public CustomerInfo MyCustomer
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyCustomer == null && _CustomerID != null) _MyCustomer = CustomerInfo.Get((string)_CustomerID);
				return _MyCustomer;
			}
		}
		private int? _EmployeeID;
		public int? EmployeeID
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyEmployee != null) _EmployeeID = _MyEmployee.EmployeeID;
				return _EmployeeID;
			}
		}
		private EmployeeInfo _MyEmployee;
		public EmployeeInfo MyEmployee
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyEmployee == null && _EmployeeID != null) _MyEmployee = EmployeeInfo.Get((int)_EmployeeID);
				return _MyEmployee;
			}
		}
		private string _OrderDate = string.Empty;
		public string OrderDate
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _OrderDate;
			}
		}
		private string _RequiredDate = string.Empty;
		public string RequiredDate
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _RequiredDate;
			}
		}
		private string _ShippedDate = string.Empty;
		public string ShippedDate
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _ShippedDate;
			}
		}
		private int? _ShipVia;
		public int? ShipVia
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyShipper != null) _ShipVia = _MyShipper.ShipperID;
				return _ShipVia;
			}
		}
		private ShipperInfo _MyShipper;
		public ShipperInfo MyShipper
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_MyShipper == null && _ShipVia != null) _MyShipper = ShipperInfo.Get((int)_ShipVia);
				return _MyShipper;
			}
		}
		private decimal? _Freight;
		public decimal? Freight
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Freight;
			}
		}
		private string _ShipName = string.Empty;
		public string ShipName
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _ShipName;
			}
		}
		private string _ShipAddress = string.Empty;
		public string ShipAddress
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _ShipAddress;
			}
		}
		private string _ShipCity = string.Empty;
		public string ShipCity
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _ShipCity;
			}
		}
		private string _ShipRegion = string.Empty;
		public string ShipRegion
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _ShipRegion;
			}
		}
		private string _ShipPostalCode = string.Empty;
		public string ShipPostalCode
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _ShipPostalCode;
			}
		}
		private string _ShipCountry = string.Empty;
		public string ShipCountry
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _ShipCountry;
			}
		}
		private int _OrderOrderDetailCount = 0;
		/// <summary>
		/// Count of OrderOrderDetails for this Order
		/// </summary>
		public int OrderOrderDetailCount
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _OrderOrderDetailCount;
			}
		}
		private OrderDetailInfoList _OrderOrderDetails = null;
		[TypeConverter(typeof(OrderDetailInfoListConverter))]
		public OrderDetailInfoList OrderOrderDetails
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_OrderOrderDetailCount > 0 && _OrderOrderDetails == null)
					_OrderOrderDetails = OrderDetailInfoList.GetByOrderID(_OrderID);
				return _OrderOrderDetails;
			}
		}
		// TODO: Replace base OrderInfo.ToString function as necessary
		/// <summary>
		/// Overrides Base ToString
		/// </summary>
		/// <returns>A string representation of current OrderInfo</returns>
		//public override string ToString()
		//{
		//  return base.ToString();
		//}
		// TODO: Check OrderInfo.GetIdValue to assure that the ID returned is unique
		/// <summary>
		/// Overrides Base GetIdValue - Used internally by CSLA to determine equality
		/// </summary>
		/// <returns>A Unique ID for the current OrderInfo</returns>
		protected override object GetIdValue()
		{
			return _OrderID;
		}
		#endregion
		#region Factory Methods
		private OrderInfo()
		{/* require use of factory methods */
			_AllList.Add(this);
		}
		public void Dispose()
		{
			_AllList.Remove(this);
			_AllByPrimaryKey.Remove(OrderID.ToString());
		}
		public virtual Order Get()
		{
			return _Editable = Order.Get(_OrderID);
		}
		public static void Refresh(Order tmp)
		{
			OrderInfo tmpInfo = GetExistingByPrimaryKey(tmp.OrderID);
			if (tmpInfo == null) return;
			tmpInfo.RefreshFields(tmp);
		}
		private void RefreshFields(Order tmp)
		{
			_CustomerID = tmp.CustomerID;
			_EmployeeID = tmp.EmployeeID;
			_OrderDate = tmp.OrderDate;
			_RequiredDate = tmp.RequiredDate;
			_ShippedDate = tmp.ShippedDate;
			_ShipVia = tmp.ShipVia;
			_Freight = tmp.Freight;
			_ShipName = tmp.ShipName;
			_ShipAddress = tmp.ShipAddress;
			_ShipCity = tmp.ShipCity;
			_ShipRegion = tmp.ShipRegion;
			_ShipPostalCode = tmp.ShipPostalCode;
			_ShipCountry = tmp.ShipCountry;
			_OrderInfoExtension.Refresh(this);
			_MyCustomer = null;
			_MyEmployee = null;
			_MyShipper = null;
			OnChange();// raise an event
		}
		public static void Refresh(CustomerOrder tmp)
		{
			OrderInfo tmpInfo = GetExistingByPrimaryKey(tmp.OrderID);
			if (tmpInfo == null) return;
			tmpInfo.RefreshFields(tmp);
		}
		private void RefreshFields(CustomerOrder tmp)
		{
			_EmployeeID = tmp.EmployeeID;
			_OrderDate = tmp.OrderDate;
			_RequiredDate = tmp.RequiredDate;
			_ShippedDate = tmp.ShippedDate;
			_ShipVia = tmp.ShipVia;
			_Freight = tmp.Freight;
			_ShipName = tmp.ShipName;
			_ShipAddress = tmp.ShipAddress;
			_ShipCity = tmp.ShipCity;
			_ShipRegion = tmp.ShipRegion;
			_ShipPostalCode = tmp.ShipPostalCode;
			_ShipCountry = tmp.ShipCountry;
			_OrderInfoExtension.Refresh(this);
			_MyCustomer = null;
			_MyEmployee = null;
			_MyShipper = null;
			OnChange();// raise an event
		}
		public static void Refresh(EmployeeOrder tmp)
		{
			OrderInfo tmpInfo = GetExistingByPrimaryKey(tmp.OrderID);
			if (tmpInfo == null) return;
			tmpInfo.RefreshFields(tmp);
		}
		private void RefreshFields(EmployeeOrder tmp)
		{
			_CustomerID = tmp.CustomerID;
			_OrderDate = tmp.OrderDate;
			_RequiredDate = tmp.RequiredDate;
			_ShippedDate = tmp.ShippedDate;
			_ShipVia = tmp.ShipVia;
			_Freight = tmp.Freight;
			_ShipName = tmp.ShipName;
			_ShipAddress = tmp.ShipAddress;
			_ShipCity = tmp.ShipCity;
			_ShipRegion = tmp.ShipRegion;
			_ShipPostalCode = tmp.ShipPostalCode;
			_ShipCountry = tmp.ShipCountry;
			_OrderInfoExtension.Refresh(this);
			_MyCustomer = null;
			_MyEmployee = null;
			_MyShipper = null;
			OnChange();// raise an event
		}
		public static void Refresh(ShipperOrder tmp)
		{
			OrderInfo tmpInfo = GetExistingByPrimaryKey(tmp.OrderID);
			if (tmpInfo == null) return;
			tmpInfo.RefreshFields(tmp);
		}
		private void RefreshFields(ShipperOrder tmp)
		{
			_CustomerID = tmp.CustomerID;
			_EmployeeID = tmp.EmployeeID;
			_OrderDate = tmp.OrderDate;
			_RequiredDate = tmp.RequiredDate;
			_ShippedDate = tmp.ShippedDate;
			_Freight = tmp.Freight;
			_ShipName = tmp.ShipName;
			_ShipAddress = tmp.ShipAddress;
			_ShipCity = tmp.ShipCity;
			_ShipRegion = tmp.ShipRegion;
			_ShipPostalCode = tmp.ShipPostalCode;
			_ShipCountry = tmp.ShipCountry;
			_OrderInfoExtension.Refresh(this);
			_MyCustomer = null;
			_MyEmployee = null;
			_MyShipper = null;
			OnChange();// raise an event
		}
		public static OrderInfo Get(int orderID)
		{
			//if (!CanGetObject())
			//  throw new System.Security.SecurityException("User not authorized to view a Order");
			try
			{
				OrderInfo tmp = GetExistingByPrimaryKey(orderID);
				if (tmp == null)
				{
					tmp = DataPortal.Fetch<OrderInfo>(new PKCriteria(orderID));
					_AllList.Add(tmp);
				}
				if (tmp.ErrorMessage == "No Record Found") tmp = null;
				return tmp;
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on OrderInfo.Get", ex);
			}
		}
		#endregion
		#region Data Access Portal
		internal OrderInfo(SafeDataReader dr)
		{
			Database.LogInfo("OrderInfo.Constructor", GetHashCode());
			try
			{
				ReadData(dr);
			}
			catch (Exception ex)
			{
				Database.LogException("OrderInfo.Constructor", ex);
				throw new DbCslaException("OrderInfo.Constructor", ex);
			}
		}
		[Serializable()]
		protected class PKCriteria
		{
			private int _OrderID;
			public int OrderID
			{ get { return _OrderID; } }
			public PKCriteria(int orderID)
			{
				_OrderID = orderID;
			}
		}
		private void ReadData(SafeDataReader dr)
		{
			Database.LogInfo("OrderInfo.ReadData", GetHashCode());
			try
			{
				_OrderID = dr.GetInt32("OrderID");
				_CustomerID = dr.GetString("CustomerID");
				_EmployeeID = (int?)dr.GetValue("EmployeeID");
				_OrderDate = dr.GetSmartDate("OrderDate").Text;
				_RequiredDate = dr.GetSmartDate("RequiredDate").Text;
				_ShippedDate = dr.GetSmartDate("ShippedDate").Text;
				_ShipVia = (int?)dr.GetValue("ShipVia");
				_Freight = (decimal?)dr.GetValue("Freight");
				_ShipName = dr.GetString("ShipName");
				_ShipAddress = dr.GetString("ShipAddress");
				_ShipCity = dr.GetString("ShipCity");
				_ShipRegion = dr.GetString("ShipRegion");
				_ShipPostalCode = dr.GetString("ShipPostalCode");
				_ShipCountry = dr.GetString("ShipCountry");
				_OrderOrderDetailCount = dr.GetInt32("OrderDetailCount");
			}
			catch (Exception ex)
			{
				Database.LogException("OrderInfo.ReadData", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("OrderInfo.ReadData", ex);
			}
		}
		private void DataPortal_Fetch(PKCriteria criteria)
		{
			Database.LogInfo("OrderInfo.DataPortal_Fetch", GetHashCode());
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					ApplicationContext.LocalContext["cn"] = cn;
					using (SqlCommand cm = cn.CreateCommand())
					{
						cm.CommandType = CommandType.StoredProcedure;
						cm.CommandText = "getOrder";
						cm.Parameters.AddWithValue("@OrderID", criteria.OrderID);
						using (SafeDataReader dr = new SafeDataReader(cm.ExecuteReader()))
						{
							if (!dr.Read())
							{
								_ErrorMessage = "No Record Found";
								return;
							}
							ReadData(dr);
						}
					}
					// removing of item only needed for local data portal
					if (ApplicationContext.ExecutionLocation == ApplicationContext.ExecutionLocations.Client)
						ApplicationContext.LocalContext.Remove("cn");
				}
			}
			catch (Exception ex)
			{
				Database.LogException("OrderInfo.DataPortal_Fetch", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("OrderInfo.DataPortal_Fetch", ex);
			}
		}
		#endregion
		// Standard Refresh
		#region extension
		OrderInfoExtension _OrderInfoExtension = new OrderInfoExtension();
		[Serializable()]
		partial class OrderInfoExtension : extensionBase {}
		[Serializable()]
		class extensionBase
		{
			// Default Refresh
			public virtual void Refresh(OrderInfo tmp) { }
		}
		#endregion
	} // Class
	#region Converter
	internal class OrderInfoConverter : ExpandableObjectConverter
	{
		public override object ConvertTo(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destType)
		{
			if (destType == typeof(string) && value is OrderInfo)
			{
				// Return the ToString value
				return ((OrderInfo)value).ToString();
			}
			return base.ConvertTo(context, culture, value, destType);
		}
	}
	#endregion
} // Namespace
