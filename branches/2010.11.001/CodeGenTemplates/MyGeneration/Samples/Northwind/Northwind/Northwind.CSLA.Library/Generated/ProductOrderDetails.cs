
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using System.Configuration;
using System.IO;
using System.ComponentModel;
using Csla.Validation;
namespace Northwind.CSLA.Library
{
	/// <summary>
	///	ProductOrderDetails Generated by MyGeneration using the CSLA Object Mapping template
	/// </summary>
	[Serializable()]
	[TypeConverter(typeof(ProductOrderDetailsConverter))]
	public partial class ProductOrderDetails : BusinessListBase<ProductOrderDetails, ProductOrderDetail>, ICustomTypeDescriptor, IVEHasBrokenRules
	{
		#region Business Methods
		private string _ErrorMessage = string.Empty;
		public string ErrorMessage
		{
			get { return _ErrorMessage; }
		}
		// Many To Many
		public ProductOrderDetail this[Order myOrder]
		{
			get
			{
				foreach (ProductOrderDetail orderDetail in this)
					if (orderDetail.OrderID == myOrder.OrderID)
						return orderDetail;
				return null;
			}
		}
		public new System.Collections.Generic.IList<ProductOrderDetail> Items
		{
			get { return base.Items; }
		}
		public ProductOrderDetail GetItem(Order myOrder)
		{
			foreach (ProductOrderDetail orderDetail in this)
				if (orderDetail.OrderID == myOrder.OrderID)
					return orderDetail;
			return null;
		}
		public ProductOrderDetail Add(Order myOrder)// Many to Many with required fields
		{
			if (!Contains(myOrder))
			{
				ProductOrderDetail orderDetail =	ProductOrderDetail.New(myOrder);
				this.Add(orderDetail);
				return orderDetail;
			}
			else
				throw new InvalidOperationException("orderDetail already exists");
		}
		public void Remove(Order myOrder)
		{
			foreach (ProductOrderDetail orderDetail in this)
			{
				if (orderDetail.OrderID == myOrder.OrderID)
				{
					Remove(orderDetail);
					break;
				}
			}
		}
		public bool Contains(Order myOrder)
		{
			foreach (ProductOrderDetail orderDetail in this)
				if (orderDetail.OrderID == myOrder.OrderID)
					return true;
			return false;
		}
		public bool ContainsDeleted(Order myOrder)
		{
			foreach (ProductOrderDetail orderDetail in DeletedList)
				if (orderDetail.OrderID == myOrder.OrderID)
					return true;
			return false;
		}
		#endregion
		#region ValidationRules
		public IVEHasBrokenRules HasBrokenRules
		{
			get
			{
				IVEHasBrokenRules hasBrokenRules=null;
				foreach(ProductOrderDetail productOrderDetail in this)
					if ((hasBrokenRules = productOrderDetail.HasBrokenRules) != null) return hasBrokenRules;
				return hasBrokenRules;
			}
		}
		public BrokenRulesCollection BrokenRules
		{
			get
			{
			IVEHasBrokenRules hasBrokenRules = HasBrokenRules;
			return (hasBrokenRules != null ? hasBrokenRules.BrokenRules : null);
			}
		}
		#endregion
		#region Factory Methods
		internal static ProductOrderDetails New()
		{
			return new ProductOrderDetails();
		}
		internal static ProductOrderDetails Get(SafeDataReader dr)
		{
			return new ProductOrderDetails(dr);
		}
		public static ProductOrderDetails GetByProductID(int productID)
		{
			try
			{
				return DataPortal.Fetch<ProductOrderDetails>(new ProductIDCriteria(productID));
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on ProductOrderDetails.GetByProductID", ex);
			}
		}
		private ProductOrderDetails()
		{
			MarkAsChild();
		}
		internal ProductOrderDetails(SafeDataReader dr)
		{
			MarkAsChild();
			Fetch(dr);
		}
		#endregion
		#region Data Access Portal
		// called to load data from the database
		private void Fetch(SafeDataReader dr)
		{
			this.RaiseListChangedEvents = false;
			while (dr.Read())
				this.Add(ProductOrderDetail.Get(dr));
			this.RaiseListChangedEvents = true;
		}
		[Serializable()]
		private class ProductIDCriteria
		{
			public ProductIDCriteria(int productID)
			{
				_ProductID = productID;
			}
			private int _ProductID;
			public int ProductID
			{
				get { return _ProductID; }
				set { _ProductID = value; }
			}
		}
		private void DataPortal_Fetch(ProductIDCriteria criteria)
		{
			this.RaiseListChangedEvents = false;
			Database.LogInfo("ProductOrderDetails.DataPortal_FetchProductID", GetHashCode());
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					using (SqlCommand cm = cn.CreateCommand())
					{
						cm.CommandType = CommandType.StoredProcedure;
						cm.CommandText = "getOrderDetailsByProductID";
						cm.Parameters.AddWithValue("@ProductID", criteria.ProductID);
						using (SafeDataReader dr = new SafeDataReader(cm.ExecuteReader()))
						{
							while (dr.Read()) this.Add(new ProductOrderDetail(dr));
						}
					}
				}
			}
			catch (Exception ex)
			{
				Database.LogException("ProductOrderDetails.DataPortal_FetchProductID", ex);
				throw new DbCslaException("ProductOrderDetails.DataPortal_Fetch", ex);
			}
			this.RaiseListChangedEvents = true;
		}
		internal void Update(Product product)
		{
			this.RaiseListChangedEvents = false;
			try
			{
				// update (thus deleting) any deleted child objects
				foreach (ProductOrderDetail obj in DeletedList)
					obj.Delete();// TODO: Should this be SQLDelete
				// now that they are deleted, remove them from memory too
				DeletedList.Clear();
				// add/update any current child objects
				foreach (ProductOrderDetail obj in this)
				{
					if (obj.IsNew)
						obj.Insert(product);
					else
						obj.Update(product);
				}
			}
			finally
			{
				this.RaiseListChangedEvents = true;
			}
		}
		#endregion
		#region ICustomTypeDescriptor impl
		public String GetClassName()
		{ return TypeDescriptor.GetClassName(this, true); }
		public AttributeCollection GetAttributes()
		{ return TypeDescriptor.GetAttributes(this, true); }
		public String GetComponentName()
		{ return TypeDescriptor.GetComponentName(this, true); }
		public TypeConverter GetConverter()
		{ return TypeDescriptor.GetConverter(this, true); }
		public EventDescriptor GetDefaultEvent()
		{ return TypeDescriptor.GetDefaultEvent(this, true); }
		public PropertyDescriptor GetDefaultProperty()
		{ return TypeDescriptor.GetDefaultProperty(this, true); }
		public object GetEditor(Type editorBaseType)
		{ return TypeDescriptor.GetEditor(this, editorBaseType, true); }
		public EventDescriptorCollection GetEvents(Attribute[] attributes)
		{ return TypeDescriptor.GetEvents(this, attributes, true); }
		public EventDescriptorCollection GetEvents()
		{ return TypeDescriptor.GetEvents(this, true); }
		public object GetPropertyOwner(PropertyDescriptor pd)
		{ return this; }
		/// <summary>
		/// Called to get the properties of this type. Returns properties with certain
		/// attributes. this restriction is not implemented here.
		/// </summary>
		/// <param name="attributes"></param>
		/// <returns></returns>
		public PropertyDescriptorCollection GetProperties(Attribute[] attributes)
		{ return GetProperties(); }
		/// <summary>
		/// Called to get the properties of this type.
		/// </summary>
		/// <returns></returns>
		public PropertyDescriptorCollection GetProperties()
		{
			// Create a collection object to hold property descriptors
			PropertyDescriptorCollection pds = new PropertyDescriptorCollection(null);
			// Iterate the list 
			for (int i = 0; i < this.Items.Count; i++)
			{
				// Create a property descriptor for the item and add to the property descriptor collection
				ProductOrderDetailsPropertyDescriptor pd = new ProductOrderDetailsPropertyDescriptor(this, i);
				pds.Add(pd);
			}
			// return the property descriptor collection
			return pds;
		}
		#endregion
	} // Class
	#region Property Descriptor
	/// <summary>
	/// Summary description for CollectionPropertyDescriptor.
	/// </summary>
	public partial class ProductOrderDetailsPropertyDescriptor : vlnListPropertyDescriptor
	{
		private ProductOrderDetail Item { get { return (ProductOrderDetail) _Item;} }
		public ProductOrderDetailsPropertyDescriptor(ProductOrderDetails collection, int index):base(collection, index){;}
	}
	#endregion
	#region Converter
	internal class ProductOrderDetailsConverter : ExpandableObjectConverter
	{
		public override object ConvertTo(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destType)
		{
			if (destType == typeof(string) && value is ProductOrderDetails)
			{
				// Return department and department role separated by comma.
				return ((ProductOrderDetails) value).Items.Count.ToString() + " OrderDetails";
			}
			return base.ConvertTo(context, culture, value, destType);
		}
	}
	#endregion
} // Namespace
