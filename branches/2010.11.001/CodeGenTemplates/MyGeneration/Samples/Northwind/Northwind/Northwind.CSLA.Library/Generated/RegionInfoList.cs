
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using System.Configuration;
using System.IO;
using System.ComponentModel;
using System.Collections.Generic;
namespace Northwind.CSLA.Library
{
	/// <summary>
	///	RegionInfoList Generated by MyGeneration using the CSLA Object Mapping template
	/// </summary>
	[Serializable()]
	[TypeConverter(typeof(RegionInfoListConverter))]
	public partial class RegionInfoList : ReadOnlyListBase<RegionInfoList, RegionInfo>, ICustomTypeDescriptor, IDisposable
	{
		#region Business Methods
		internal new IList<RegionInfo> Items
		{ get { return base.Items; } }
		public void AddEvents()
		{
			foreach (RegionInfo tmp in this)
			{
				tmp.Changed += new RegionInfoEvent(tmp_Changed);
			}
		}
		void tmp_Changed(object sender)
		{
			for (int i = 0; i < Count; i++)
			{
				if (base[i] == sender)
					this.OnListChanged(new ListChangedEventArgs(ListChangedType.ItemChanged, i));
			}
		}
		public void Dispose()
		{
			foreach (RegionInfo tmp in this)
			{
				tmp.Changed -= new RegionInfoEvent(tmp_Changed);
			}
		}
		#endregion
		#region Factory Methods
		/// <summary>
		/// Return a list of all projects.
		/// </summary>
		public static RegionInfoList Get()
		{
			try
			{
				RegionInfoList tmp = DataPortal.Fetch<RegionInfoList>();
				RegionInfo.AddList(tmp);
				tmp.AddEvents();
				return tmp;
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on RegionInfoList.Get", ex);
			}
		}
		// TODO: Add alternative gets - 
		//public static RegionInfoList Get(<criteria>)
		//{
		//	try
		//	{
		//  	return DataPortal.Fetch<RegionInfoList>(new FilteredCriteria(<criteria>));
		//	}
		//	catch (Exception ex)
		//	{
		//		throw new DbCslaException("Error on RegionInfoList.Get", ex);
		//	}
		//}
		private RegionInfoList()
		{ /* require use of factory methods */ }
		#endregion
		#region Data Access Portal
		private void DataPortal_Fetch()
		{
			this.RaiseListChangedEvents = false;
			Database.LogInfo("RegionInfoList.DataPortal_Fetch", GetHashCode());
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					using (SqlCommand cm = cn.CreateCommand())
					{
						cm.CommandType = CommandType.StoredProcedure;
						cm.CommandText = "getRegions";
						using (SafeDataReader dr = new SafeDataReader(cm.ExecuteReader()))
						{
							IsReadOnly = false;
							while (dr.Read()) this.Add(new RegionInfo(dr));
							IsReadOnly = true;
						}
					}
				}
			}
			catch (Exception ex)
			{
				Database.LogException("RegionInfoList.DataPortal_Fetch", ex);
				throw new DbCslaException("RegionInfoList.DataPortal_Fetch", ex);
			}
			this.RaiseListChangedEvents = true;
		}
		#endregion
		#region ICustomTypeDescriptor impl
		public String GetClassName()
		{ return TypeDescriptor.GetClassName(this, true); }
		public AttributeCollection GetAttributes()
		{ return TypeDescriptor.GetAttributes(this, true); }
		public String GetComponentName()
		{ return TypeDescriptor.GetComponentName(this, true); }
		public TypeConverter GetConverter()
		{ return TypeDescriptor.GetConverter(this, true); }
		public EventDescriptor GetDefaultEvent()
		{ return TypeDescriptor.GetDefaultEvent(this, true); }
		public PropertyDescriptor GetDefaultProperty()
		{ return TypeDescriptor.GetDefaultProperty(this, true); }
		public object GetEditor(Type editorBaseType)
		{ return TypeDescriptor.GetEditor(this, editorBaseType, true); }
		public EventDescriptorCollection GetEvents(Attribute[] attributes)
		{ return TypeDescriptor.GetEvents(this, attributes, true); }
		public EventDescriptorCollection GetEvents()
		{ return TypeDescriptor.GetEvents(this, true); }
		public object GetPropertyOwner(PropertyDescriptor pd)
		{ return this; }
		/// <summary>
		/// Called to get the properties of this type. Returns properties with certain
		/// attributes. this restriction is not implemented here.
		/// </summary>
		/// <param name="attributes"></param>
		/// <returns></returns>
		public PropertyDescriptorCollection GetProperties(Attribute[] attributes)
		{ return GetProperties(); }
		/// <summary>
		/// Called to get the properties of this type.
		/// </summary>
		/// <returns></returns>
		public PropertyDescriptorCollection GetProperties()
		{
			// Create a collection object to hold property descriptors
			PropertyDescriptorCollection pds = new PropertyDescriptorCollection(null);
			// Iterate the list 
			for (int i = 0; i < this.Items.Count; i++)
			{
				// Create a property descriptor for the item and add to the property descriptor collection
				RegionInfoListPropertyDescriptor pd = new RegionInfoListPropertyDescriptor(this, i);
				pds.Add(pd);
			}
			// return the property descriptor collection
			return pds;
		}
		#endregion
	} // Class
	#region Property Descriptor
	/// <summary>
	/// Summary description for CollectionPropertyDescriptor.
	/// </summary>
	public partial class RegionInfoListPropertyDescriptor : vlnListPropertyDescriptor
	{
		private RegionInfo Item { get { return (RegionInfo) _Item;} }
		public RegionInfoListPropertyDescriptor(RegionInfoList collection, int index):base(collection, index){;}
	}
	#endregion
	#region Converter
	internal class RegionInfoListConverter : ExpandableObjectConverter
	{
		public override object ConvertTo(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destType)
		{
			if (destType == typeof(string) && value is RegionInfoList)
			{
				// Return department and department role separated by comma.
				return ((RegionInfoList) value).Items.Count.ToString() + " Regions";
			}
			return base.ConvertTo(context, culture, value, destType);
		}
	}
	#endregion
} // Namespace
