
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using System.Configuration;
using System.IO;
using System.ComponentModel;
using System.Collections.Generic;
namespace Northwind.CSLA.Library
{
	public delegate void SupplierInfoEvent(object sender);
	/// <summary>
	///	SupplierInfo Generated by MyGeneration using the CSLA Object Mapping template
	/// </summary>
	[Serializable()]
	[TypeConverter(typeof(SupplierInfoConverter))]
	public partial class SupplierInfo : ReadOnlyBase<SupplierInfo>, IDisposable
	{
		public event SupplierInfoEvent Changed;
		private void OnChange()
		{
			if (Changed != null) Changed(this);
		}
		#region Collection
		protected static List<SupplierInfo> _AllList = new List<SupplierInfo>();
		private static Dictionary<string, SupplierInfo> _AllByPrimaryKey = new Dictionary<string, SupplierInfo>();
		private static void ConvertListToDictionary()
		{
			List<SupplierInfo> remove = new List<SupplierInfo>();
			foreach (SupplierInfo tmp in _AllList)
			{
				_AllByPrimaryKey[tmp.SupplierID.ToString()]=tmp; // Primary Key
				remove.Add(tmp);
			}
			foreach (SupplierInfo tmp in remove)
				_AllList.Remove(tmp);
		}
		internal static void AddList(SupplierInfoList lst)
		{
			foreach (SupplierInfo item in lst) _AllList.Add(item);
		}
		public static SupplierInfo GetExistingByPrimaryKey(int supplierID)
		{
			ConvertListToDictionary();
			string key = supplierID.ToString();
			if (_AllByPrimaryKey.ContainsKey(key)) return _AllByPrimaryKey[key]; 
			return null;
		}
		#endregion
		#region Business Methods
		private string _ErrorMessage = string.Empty;
		public string ErrorMessage
		{
			get { return _ErrorMessage; }
		}
		protected Supplier _Editable;
		private IVEHasBrokenRules HasBrokenRules
		{
			get
			{
				IVEHasBrokenRules hasBrokenRules = null;
				if (_Editable != null)
					hasBrokenRules = _Editable.HasBrokenRules;
				return hasBrokenRules;
			}
		}
		private int _SupplierID;
		[System.ComponentModel.DataObjectField(true, true)]
		public int SupplierID
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _SupplierID;
			}
		}
		private string _CompanyName = string.Empty;
		public string CompanyName
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _CompanyName;
			}
		}
		private string _ContactName = string.Empty;
		public string ContactName
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _ContactName;
			}
		}
		private string _ContactTitle = string.Empty;
		public string ContactTitle
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _ContactTitle;
			}
		}
		private string _Address = string.Empty;
		public string Address
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Address;
			}
		}
		private string _City = string.Empty;
		public string City
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _City;
			}
		}
		private string _Region = string.Empty;
		public string Region
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Region;
			}
		}
		private string _PostalCode = string.Empty;
		public string PostalCode
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _PostalCode;
			}
		}
		private string _Country = string.Empty;
		public string Country
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Country;
			}
		}
		private string _Phone = string.Empty;
		public string Phone
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Phone;
			}
		}
		private string _Fax = string.Empty;
		public string Fax
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _Fax;
			}
		}
		private string _HomePage = string.Empty;
		public string HomePage
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _HomePage;
			}
		}
		private int _SupplierProductCount = 0;
		/// <summary>
		/// Count of SupplierProducts for this Supplier
		/// </summary>
		public int SupplierProductCount
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				return _SupplierProductCount;
			}
		}
		private ProductInfoList _SupplierProducts = null;
		[TypeConverter(typeof(ProductInfoListConverter))]
		public ProductInfoList SupplierProducts
		{
			[System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
			get
			{
				CanReadProperty(true);
				if (_SupplierProductCount > 0 && _SupplierProducts == null)
					_SupplierProducts = ProductInfoList.GetBySupplierID(_SupplierID);
				return _SupplierProducts;
			}
		}
		// TODO: Replace base SupplierInfo.ToString function as necessary
		/// <summary>
		/// Overrides Base ToString
		/// </summary>
		/// <returns>A string representation of current SupplierInfo</returns>
		//public override string ToString()
		//{
		//  return base.ToString();
		//}
		// TODO: Check SupplierInfo.GetIdValue to assure that the ID returned is unique
		/// <summary>
		/// Overrides Base GetIdValue - Used internally by CSLA to determine equality
		/// </summary>
		/// <returns>A Unique ID for the current SupplierInfo</returns>
		protected override object GetIdValue()
		{
			return _SupplierID;
		}
		#endregion
		#region Factory Methods
		private SupplierInfo()
		{/* require use of factory methods */
			_AllList.Add(this);
		}
		public void Dispose()
		{
			_AllList.Remove(this);
			_AllByPrimaryKey.Remove(SupplierID.ToString());
		}
		public virtual Supplier Get()
		{
			return _Editable = Supplier.Get(_SupplierID);
		}
		public static void Refresh(Supplier tmp)
		{
			SupplierInfo tmpInfo = GetExistingByPrimaryKey(tmp.SupplierID);
			if (tmpInfo == null) return;
			tmpInfo.RefreshFields(tmp);
		}
		private void RefreshFields(Supplier tmp)
		{
			_CompanyName = tmp.CompanyName;
			_ContactName = tmp.ContactName;
			_ContactTitle = tmp.ContactTitle;
			_Address = tmp.Address;
			_City = tmp.City;
			_Region = tmp.Region;
			_PostalCode = tmp.PostalCode;
			_Country = tmp.Country;
			_Phone = tmp.Phone;
			_Fax = tmp.Fax;
			_HomePage = tmp.HomePage;
			_SupplierInfoExtension.Refresh(this);
			OnChange();// raise an event
		}
		public static SupplierInfo Get(int supplierID)
		{
			//if (!CanGetObject())
			//  throw new System.Security.SecurityException("User not authorized to view a Supplier");
			try
			{
				SupplierInfo tmp = GetExistingByPrimaryKey(supplierID);
				if (tmp == null)
				{
					tmp = DataPortal.Fetch<SupplierInfo>(new PKCriteria(supplierID));
					_AllList.Add(tmp);
				}
				if (tmp.ErrorMessage == "No Record Found") tmp = null;
				return tmp;
			}
			catch (Exception ex)
			{
				throw new DbCslaException("Error on SupplierInfo.Get", ex);
			}
		}
		#endregion
		#region Data Access Portal
		internal SupplierInfo(SafeDataReader dr)
		{
			Database.LogInfo("SupplierInfo.Constructor", GetHashCode());
			try
			{
				ReadData(dr);
			}
			catch (Exception ex)
			{
				Database.LogException("SupplierInfo.Constructor", ex);
				throw new DbCslaException("SupplierInfo.Constructor", ex);
			}
		}
		[Serializable()]
		protected class PKCriteria
		{
			private int _SupplierID;
			public int SupplierID
			{ get { return _SupplierID; } }
			public PKCriteria(int supplierID)
			{
				_SupplierID = supplierID;
			}
		}
		private void ReadData(SafeDataReader dr)
		{
			Database.LogInfo("SupplierInfo.ReadData", GetHashCode());
			try
			{
				_SupplierID = dr.GetInt32("SupplierID");
				_CompanyName = dr.GetString("CompanyName");
				_ContactName = dr.GetString("ContactName");
				_ContactTitle = dr.GetString("ContactTitle");
				_Address = dr.GetString("Address");
				_City = dr.GetString("City");
				_Region = dr.GetString("Region");
				_PostalCode = dr.GetString("PostalCode");
				_Country = dr.GetString("Country");
				_Phone = dr.GetString("Phone");
				_Fax = dr.GetString("Fax");
				_HomePage = dr.GetString("HomePage");
				_SupplierProductCount = dr.GetInt32("ProductCount");
			}
			catch (Exception ex)
			{
				Database.LogException("SupplierInfo.ReadData", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("SupplierInfo.ReadData", ex);
			}
		}
		private void DataPortal_Fetch(PKCriteria criteria)
		{
			Database.LogInfo("SupplierInfo.DataPortal_Fetch", GetHashCode());
			try
			{
				using (SqlConnection cn = Database.Northwind_SqlConnection)
				{
					ApplicationContext.LocalContext["cn"] = cn;
					using (SqlCommand cm = cn.CreateCommand())
					{
						cm.CommandType = CommandType.StoredProcedure;
						cm.CommandText = "getSupplier";
						cm.Parameters.AddWithValue("@SupplierID", criteria.SupplierID);
						using (SafeDataReader dr = new SafeDataReader(cm.ExecuteReader()))
						{
							if (!dr.Read())
							{
								_ErrorMessage = "No Record Found";
								return;
							}
							ReadData(dr);
						}
					}
					// removing of item only needed for local data portal
					if (ApplicationContext.ExecutionLocation == ApplicationContext.ExecutionLocations.Client)
						ApplicationContext.LocalContext.Remove("cn");
				}
			}
			catch (Exception ex)
			{
				Database.LogException("SupplierInfo.DataPortal_Fetch", ex);
				_ErrorMessage = ex.Message;
				throw new DbCslaException("SupplierInfo.DataPortal_Fetch", ex);
			}
		}
		#endregion
		// Standard Refresh
		#region extension
		SupplierInfoExtension _SupplierInfoExtension = new SupplierInfoExtension();
		[Serializable()]
		partial class SupplierInfoExtension : extensionBase {}
		[Serializable()]
		class extensionBase
		{
			// Default Refresh
			public virtual void Refresh(SupplierInfo tmp) { }
		}
		#endregion
	} // Class
	#region Converter
	internal class SupplierInfoConverter : ExpandableObjectConverter
	{
		public override object ConvertTo(ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destType)
		{
			if (destType == typeof(string) && value is SupplierInfo)
			{
				// Return the ToString value
				return ((SupplierInfo)value).ToString();
			}
			return base.ConvertTo(context, culture, value, destType);
		}
	}
	#endregion
} // Namespace
